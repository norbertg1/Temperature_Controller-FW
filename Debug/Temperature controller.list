
Temperature controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cac  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd0  08009e38  08009e38  00019e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac08  0800ac08  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac08  0800ac08  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac08  0800ac08  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac08  0800ac08  0001ac08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac0c  0800ac0c  0001ac0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800ac10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000204  0800ae14  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800ae14  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008eaf3  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000457b  00000000  00000000  000aed27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003030  00000000  00000000  000b32a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002de8  00000000  00000000  000b62d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b7bd  00000000  00000000  000b90c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019184  00000000  00000000  000d487d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0fd0  00000000  00000000  000eda01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e9d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dc00  00000000  00000000  0018ea4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000204 	.word	0x20000204
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009e1c 	.word	0x08009e1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000208 	.word	0x20000208
 80001c4:	08009e1c 	.word	0x08009e1c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <reverse>:
// C program for implementation of ftoa() 
#include "float_to_string.h"
  
// Reverses a string 'str' of length 'len' 
void reverse(char* str, int len) 
{ 
 8000ba0:	b480      	push	{r7}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp; 
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	613b      	str	r3, [r7, #16]
    while (i < j) { 
 8000bb4:	e018      	b.n	8000be8 <reverse+0x48>
        temp = str[i]; 
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	60fb      	str	r3, [r7, #12]
        str[i] = str[j]; 
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	440b      	add	r3, r1
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	701a      	strb	r2, [r3, #0]
        str[j] = temp; 
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	701a      	strb	r2, [r3, #0]
        i++; 
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
        j--; 
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
    while (i < j) { 
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbe2      	blt.n	8000bb6 <reverse+0x16>
    } 
} 
 8000bf0:	bf00      	nop
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <intToStr>:
// Converts a given integer x to string str[].  
// d is the number of digits required in the output.  
// If d is more than the number of digits in x,  
// then 0s are added at the beginning. 
int intToStr(int x, char str[], int d) 
{ 
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
    if(x == 0) {
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d124      	bne.n	8000c5c <intToStr+0x60>
    	str[0] = '0';
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2230      	movs	r2, #48	; 0x30
 8000c16:	701a      	strb	r2, [r3, #0]
    	i++;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
    }
    while (x) { 
 8000c1e:	e01d      	b.n	8000c5c <intToStr+0x60>
        str[i++] = (x % 10) + '0'; 
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <intToStr+0x9c>)
 8000c24:	fb83 1302 	smull	r1, r3, r3, r2
 8000c28:	1099      	asrs	r1, r3, #2
 8000c2a:	17d3      	asrs	r3, r2, #31
 8000c2c:	1ac9      	subs	r1, r1, r3
 8000c2e:	460b      	mov	r3, r1
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	440b      	add	r3, r1
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	1ad1      	subs	r1, r2, r3
 8000c38:	b2ca      	uxtb	r2, r1
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	1c59      	adds	r1, r3, #1
 8000c3e:	6179      	str	r1, [r7, #20]
 8000c40:	4619      	mov	r1, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	440b      	add	r3, r1
 8000c46:	3230      	adds	r2, #48	; 0x30
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	701a      	strb	r2, [r3, #0]
        x = x / 10; 
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <intToStr+0x9c>)
 8000c50:	fb82 1203 	smull	r1, r2, r2, r3
 8000c54:	1092      	asrs	r2, r2, #2
 8000c56:	17db      	asrs	r3, r3, #31
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	60fb      	str	r3, [r7, #12]
    while (x) { 
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1de      	bne.n	8000c20 <intToStr+0x24>
    } 
  
    // If number of digits required is more, then 
    // add 0s at the beginning 
    while (i < d) 
 8000c62:	e007      	b.n	8000c74 <intToStr+0x78>
        str[i++] = '0'; 
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	617a      	str	r2, [r7, #20]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4413      	add	r3, r2
 8000c70:	2230      	movs	r2, #48	; 0x30
 8000c72:	701a      	strb	r2, [r3, #0]
    while (i < d) 
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf3      	blt.n	8000c64 <intToStr+0x68>
  
    reverse(str, i); 
 8000c7c:	6979      	ldr	r1, [r7, #20]
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f7ff ff8e 	bl	8000ba0 <reverse>
    str[i] = '\0'; 
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	4413      	add	r3, r2
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
    return i; 
 8000c8e:	697b      	ldr	r3, [r7, #20]
} 
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	66666667 	.word	0x66666667
 8000c9c:	00000000 	.word	0x00000000

08000ca0 <ftoa>:
  
// Converts a floating-point/double number to a string. 
int ftoa(float n, char* res, int afterpoint)
{ 
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000caa:	60b8      	str	r0, [r7, #8]
 8000cac:	6079      	str	r1, [r7, #4]
    // Extract integer part 
    int ipart = (int)n; 
 8000cae:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cb6:	ee17 3a90 	vmov	r3, s15
 8000cba:	61fb      	str	r3, [r7, #28]
  
    // Extract floating part 
    float fpart = n - (float)ipart; 
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cce:	edc7 7a06 	vstr	s15, [r7, #24]
  
    // convert integer part to string 
    int i = intToStr(ipart, res, 0); 
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	69f8      	ldr	r0, [r7, #28]
 8000cd8:	f7ff ff90 	bl	8000bfc <intToStr>
 8000cdc:	6178      	str	r0, [r7, #20]
  
    // check for display option after point 
    if (afterpoint != 0) { 
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d030      	beq.n	8000d46 <ftoa+0xa6>
        res[i] = '.'; // add dot 
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	4413      	add	r3, r2
 8000cea:	222e      	movs	r2, #46	; 0x2e
 8000cec:	701a      	strb	r2, [r3, #0]
  
        // Get the value of fraction part upto given no. 
        // of points after dot. The third parameter  
        // is needed to handle cases like 233.007 
        fpart = fpart * pow(10, afterpoint); 
 8000cee:	69b8      	ldr	r0, [r7, #24]
 8000cf0:	f7ff fbd6 	bl	80004a0 <__aeabi_f2d>
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	460d      	mov	r5, r1
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fbbf 	bl	800047c <__aeabi_i2d>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	ec43 2b11 	vmov	d1, r2, r3
 8000d06:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000d58 <ftoa+0xb8>
 8000d0a:	f008 f82f 	bl	8008d6c <pow>
 8000d0e:	ec53 2b10 	vmov	r2, r3, d0
 8000d12:	4620      	mov	r0, r4
 8000d14:	4629      	mov	r1, r5
 8000d16:	f7ff fc1b 	bl	8000550 <__aeabi_dmul>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	460c      	mov	r4, r1
 8000d1e:	4618      	mov	r0, r3
 8000d20:	4621      	mov	r1, r4
 8000d22:	f7ff feed 	bl	8000b00 <__aeabi_d2f>
 8000d26:	4603      	mov	r3, r0
 8000d28:	61bb      	str	r3, [r7, #24]
  
        intToStr((int)fpart, res + i + 1, afterpoint); 
 8000d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	4413      	add	r3, r2
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	ee17 0a90 	vmov	r0, s15
 8000d42:	f7ff ff5b 	bl	8000bfc <intToStr>
    }
    return i + afterpoint;
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4413      	add	r3, r2
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bdb0      	pop	{r4, r5, r7, pc}
 8000d54:	f3af 8000 	nop.w
 8000d58:	00000000 	.word	0x00000000
 8000d5c:	40240000 	.word	0x40240000

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d66:	f000 ffc1 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6a:	f000 f861 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6e:	f000 fa1b 	bl	80011a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d72:	f000 f9fb 	bl	800116c <MX_DMA_Init>
  MX_I2C1_Init();
 8000d76:	f000 f8b5 	bl	8000ee4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d7a:	f000 f8f3 	bl	8000f64 <MX_I2C2_Init>
  MX_SDADC1_Init();
 8000d7e:	f000 f931 	bl	8000fe4 <MX_SDADC1_Init>
  MX_TIM2_Init();
 8000d82:	f000 f973 	bl	800106c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  start_pwm(&htim2);
 8000d86:	4821      	ldr	r0, [pc, #132]	; (8000e0c <main+0xac>)
 8000d88:	f000 fcf9 	bl	800177e <start_pwm>
  HAL_SDADC_CalibrationStart(&hsdadc1, SDADC_CALIBRATION_SEQ_3);
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4820      	ldr	r0, [pc, #128]	; (8000e10 <main+0xb0>)
 8000d90:	f003 fc3e 	bl	8004610 <HAL_SDADC_CalibrationStart>
  HAL_SDADC_PollForCalibEvent(&hsdadc1, 5000);
 8000d94:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d98:	481d      	ldr	r0, [pc, #116]	; (8000e10 <main+0xb0>)
 8000d9a:	f003 fc79 	bl	8004690 <HAL_SDADC_PollForCalibEvent>
  HAL_SDADC_Start_DMA(&hsdadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000d9e:	2202      	movs	r2, #2
 8000da0:	491c      	ldr	r1, [pc, #112]	; (8000e14 <main+0xb4>)
 8000da2:	481b      	ldr	r0, [pc, #108]	; (8000e10 <main+0xb0>)
 8000da4:	f003 fcae 	bl	8004704 <HAL_SDADC_Start_DMA>
  //-----OLED display setup----
  u8g2_Setup_ssd1306_128x64_noname_1(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_i2c, u8x8_stm32_gpio_and_delay);
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <main+0xb8>)
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <main+0xbc>)
 8000dac:	491c      	ldr	r1, [pc, #112]	; (8000e20 <main+0xc0>)
 8000dae:	481d      	ldr	r0, [pc, #116]	; (8000e24 <main+0xc4>)
 8000db0:	f004 fe06 	bl	80059c0 <u8g2_Setup_ssd1306_128x64_noname_1>
  u8g2_InitDisplay(&u8g2);
 8000db4:	481b      	ldr	r0, [pc, #108]	; (8000e24 <main+0xc4>)
 8000db6:	f006 f9e3 	bl	8007180 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4819      	ldr	r0, [pc, #100]	; (8000e24 <main+0xc4>)
 8000dbe:	f006 f9ee 	bl	800719e <u8x8_SetPowerSave>
  u8g2_FirstPage(&u8g2);
 8000dc2:	4818      	ldr	r0, [pc, #96]	; (8000e24 <main+0xc4>)
 8000dc4:	f004 fc8d 	bl	80056e2 <u8g2_FirstPage>
     do
     {
       u8g2_SetFont(&u8g2, u8g2_font_luBIS08_tf);
 8000dc8:	4917      	ldr	r1, [pc, #92]	; (8000e28 <main+0xc8>)
 8000dca:	4816      	ldr	r0, [pc, #88]	; (8000e24 <main+0xc4>)
 8000dcc:	f005 fb88 	bl	80064e0 <u8g2_SetFont>
       u8g2_DrawStr(&u8g2, 0, 15, "Hello  °C");
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <main+0xcc>)
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4813      	ldr	r0, [pc, #76]	; (8000e24 <main+0xc4>)
 8000dd8:	f005 fae0 	bl	800639c <u8g2_DrawStr>
       u8g2_DrawCircle(&u8g2, 64, 40, 10, U8G2_DRAW_ALL);
 8000ddc:	230f      	movs	r3, #15
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	230a      	movs	r3, #10
 8000de2:	2228      	movs	r2, #40	; 0x28
 8000de4:	2140      	movs	r1, #64	; 0x40
 8000de6:	480f      	ldr	r0, [pc, #60]	; (8000e24 <main+0xc4>)
 8000de8:	f004 fda2 	bl	8005930 <u8g2_DrawCircle>
     } while (u8g2_NextPage(&u8g2));
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <main+0xc4>)
 8000dee:	f004 fc8c 	bl	800570a <u8g2_NextPage>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1e7      	bne.n	8000dc8 <main+0x68>
	HAL_Delay(2000);
 8000df8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dfc:	f000 ffdc 	bl	8001db8 <HAL_Delay>
  //ssd1306_UpdateScreen();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  blink();
 8000e00:	f000 fcb2 	bl	8001768 <blink>
  while (1)
  {
    /* USER CODE END WHILE */
	  update_pid();
 8000e04:	f000 fccb 	bl	800179e <update_pid>
 8000e08:	e7fc      	b.n	8000e04 <main+0xa4>
 8000e0a:	bf00      	nop
 8000e0c:	200003dc 	.word	0x200003dc
 8000e10:	20000398 	.word	0x20000398
 8000e14:	200002b8 	.word	0x200002b8
 8000e18:	08001b01 	.word	0x08001b01
 8000e1c:	08001bd5 	.word	0x08001bd5
 8000e20:	0800a8b8 	.word	0x0800a8b8
 8000e24:	20000470 	.word	0x20000470
 8000e28:	08009e74 	.word	0x08009e74
 8000e2c:	08009e38 	.word	0x08009e38

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09a      	sub	sp, #104	; 0x68
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e3a:	2228      	movs	r2, #40	; 0x28
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f006 fa66 	bl	8007310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	222c      	movs	r2, #44	; 0x2c
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f006 fa58 	bl	8007310 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	2301      	movs	r3, #1
 8000e66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e68:	2310      	movs	r3, #16
 8000e6a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 f879 	bl	8002f6c <HAL_RCC_OscConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000e80:	f000 fa2a 	bl	80012d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e84:	230f      	movs	r3, #15
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 ff6c 	bl	8003d7c <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000eaa:	f000 fa15 	bl	80012d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8000eae:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8000eb2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV2;
 8000ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ec0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 f93f 	bl	8004148 <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ed0:	f000 fa02 	bl	80012d8 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8000ed4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ed8:	f002 f828 	bl	8002f2c <HAL_PWREx_EnableSDADC>
}
 8000edc:	bf00      	nop
 8000ede:	3768      	adds	r7, #104	; 0x68
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <MX_I2C1_Init+0x78>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <MX_I2C1_Init+0x7c>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000f20:	f001 fbf2 	bl	8002708 <HAL_I2C_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f2a:	f000 f9d5 	bl	80012d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000f32:	f001 ff63 	bl	8002dfc <HAL_I2CEx_ConfigAnalogFilter>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f000 f9cc 	bl	80012d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_I2C1_Init+0x74>)
 8000f44:	f001 ffa5 	bl	8002e92 <HAL_I2CEx_ConfigDigitalFilter>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f000 f9c3 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2000034c 	.word	0x2000034c
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	2000090e 	.word	0x2000090e

08000f64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <MX_I2C2_Init+0x78>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <MX_I2C2_Init+0x7c>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000fa0:	f001 fbb2 	bl	8002708 <HAL_I2C_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000faa:	f000 f995 	bl	80012d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000fb2:	f001 ff23 	bl	8002dfc <HAL_I2CEx_ConfigAnalogFilter>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fbc:	f000 f98c 	bl	80012d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_I2C2_Init+0x74>)
 8000fc4:	f001 ff65 	bl	8002e92 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f000 f983 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000300 	.word	0x20000300
 8000fdc:	40005800 	.word	0x40005800
 8000fe0:	2000090e 	.word	0x2000090e

08000fe4 <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC1_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_SDADC1_Init+0x80>)
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <MX_SDADC1_Init+0x84>)
 8000ffa:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_SDADC1_Init+0x80>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_SDADC1_Init+0x80>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_SDADC1_Init+0x80>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_SDADC1_Init+0x80>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8001014:	4813      	ldr	r0, [pc, #76]	; (8001064 <MX_SDADC1_Init+0x80>)
 8001016:	f003 fa0b 	bl	8004430 <HAL_SDADC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SDADC1_Init+0x40>
  {
    Error_Handler();
 8001020:	f000 f95a 	bl	80012d8 <Error_Handler>
  }
  /** Configure The Regular Mode
  */
  if (HAL_SDADC_SelectRegularTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8001024:	2100      	movs	r1, #0
 8001026:	480f      	ldr	r0, [pc, #60]	; (8001064 <MX_SDADC1_Init+0x80>)
 8001028:	f003 fac2 	bl	80045b0 <HAL_SDADC_SelectRegularTrigger>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_SDADC1_Init+0x52>
  {
    Error_Handler();
 8001032:	f000 f951 	bl	80012d8 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_DIFF;
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	461a      	mov	r2, r3
 800104a:	2100      	movs	r1, #0
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_SDADC1_Init+0x80>)
 800104e:	f003 fa73 	bl	8004538 <HAL_SDADC_PrepareChannelConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_SDADC1_Init+0x78>
  {
    Error_Handler();
 8001058:	f000 f93e 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000398 	.word	0x20000398
 8001068:	40016000 	.word	0x40016000

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <MX_TIM2_Init+0xfc>)
 800109e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a4:	4b30      	ldr	r3, [pc, #192]	; (8001168 <MX_TIM2_Init+0xfc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <MX_TIM2_Init+0xfc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 160;
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <MX_TIM2_Init+0xfc>)
 80010b2:	22a0      	movs	r2, #160	; 0xa0
 80010b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <MX_TIM2_Init+0xfc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <MX_TIM2_Init+0xfc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c2:	4829      	ldr	r0, [pc, #164]	; (8001168 <MX_TIM2_Init+0xfc>)
 80010c4:	f003 fd39 	bl	8004b3a <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80010ce:	f000 f903 	bl	80012d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010dc:	4619      	mov	r1, r3
 80010de:	4822      	ldr	r0, [pc, #136]	; (8001168 <MX_TIM2_Init+0xfc>)
 80010e0:	f003 fe96 	bl	8004e10 <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80010ea:	f000 f8f5 	bl	80012d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_TIM2_Init+0xfc>)
 80010f0:	f003 fd4e 	bl	8004b90 <HAL_TIM_PWM_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80010fa:	f000 f8ed 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4619      	mov	r1, r3
 800110c:	4816      	ldr	r0, [pc, #88]	; (8001168 <MX_TIM2_Init+0xfc>)
 800110e:	f004 f9e9 	bl	80054e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001118:	f000 f8de 	bl	80012d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111c:	2360      	movs	r3, #96	; 0x60
 800111e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001128:	2304      	movs	r3, #4
 800112a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_TIM2_Init+0xfc>)
 8001134:	f003 fda6 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800113e:	f000 f8cb 	bl	80012d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2204      	movs	r2, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM2_Init+0xfc>)
 800114a:	f003 fd9b 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001154:	f000 f8c0 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM2_Init+0xfc>)
 800115a:	f000 fa0d 	bl	8001578 <HAL_TIM_MspPostInit>

}
 800115e:	bf00      	nop
 8001160:	3738      	adds	r7, #56	; 0x38
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200003dc 	.word	0x200003dc

0800116c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_DMA_Init+0x38>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <MX_DMA_Init+0x38>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6153      	str	r3, [r2, #20]
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_DMA_Init+0x38>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	203a      	movs	r0, #58	; 0x3a
 8001190:	f000 ff0f 	bl	8001fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001194:	203a      	movs	r0, #58	; 0x3a
 8001196:	f000 ff28 	bl	8001fea <HAL_NVIC_EnableIRQ>

}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4a41      	ldr	r2, [pc, #260]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011c8:	6153      	str	r3, [r2, #20]
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d6:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a3b      	ldr	r2, [pc, #236]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a35      	ldr	r2, [pc, #212]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <MX_GPIO_Init+0x120>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <MX_GPIO_Init+0x120>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <MX_GPIO_Init+0x120>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <MX_GPIO_Init+0x120>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <MX_GPIO_Init+0x120>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <MX_GPIO_Init+0x120>)
 8001224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <MX_GPIO_Init+0x120>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN2_Pin|GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	212c      	movs	r1, #44	; 0x2c
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f001 fa33 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENCODER_PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENCODER_PUSH_BUTTON_Pin;
 8001242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_GPIO_Init+0x124>)
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	481e      	ldr	r0, [pc, #120]	; (80012d0 <MX_GPIO_Init+0x128>)
 8001258:	f001 f894 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 800125c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_GPIO_Init+0x12c>)
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4817      	ldr	r0, [pc, #92]	; (80012d0 <MX_GPIO_Init+0x128>)
 8001272:	f001 f887 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN2_Pin GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|GREEN_LED_Pin|RED_LED_Pin;
 8001276:	232c      	movs	r3, #44	; 0x2c
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f001 f878 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8001294:	2310      	movs	r3, #16
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_GPIO_Init+0x12c>)
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012aa:	f001 f86b 	bl	8002384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2028      	movs	r0, #40	; 0x28
 80012b4:	f000 fe7d 	bl	8001fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b8:	2028      	movs	r0, #40	; 0x28
 80012ba:	f000 fe96 	bl	8001fea <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	10210000 	.word	0x10210000
 80012d0:	48000800 	.word	0x48000800
 80012d4:	10110000 	.word	0x10110000

080012d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_MspInit+0x44>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_MspInit+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6193      	str	r3, [r2, #24]
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_MspInit+0x44>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x44>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x44>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x44>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2f      	ldr	r2, [pc, #188]	; (800140c <HAL_I2C_MspInit+0xdc>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d129      	bne.n	80013a6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a2e      	ldr	r2, [pc, #184]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800136a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001370:	2312      	movs	r3, #18
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001374:	2301      	movs	r3, #1
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800137c:	2304      	movs	r3, #4
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4823      	ldr	r0, [pc, #140]	; (8001414 <HAL_I2C_MspInit+0xe4>)
 8001388:	f000 fffc 	bl	8002384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 8001392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001396:	61d3      	str	r3, [r2, #28]
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013a4:	e02e      	b.n	8001404 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C2)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_I2C_MspInit+0xe8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d129      	bne.n	8001404 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	4a16      	ldr	r2, [pc, #88]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 80013b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ba:	6153      	str	r3, [r2, #20]
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013da:	2304      	movs	r3, #4
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f000 ffcc 	bl	8002384 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 80013f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f6:	61d3      	str	r3, [r2, #28]
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_I2C_MspInit+0xe0>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	bf00      	nop
 8001406:	3730      	adds	r7, #48	; 0x30
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40005400 	.word	0x40005400
 8001410:	40021000 	.word	0x40021000
 8001414:	48000400 	.word	0x48000400
 8001418:	40005800 	.word	0x40005800

0800141c <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a3a      	ldr	r2, [pc, #232]	; (8001524 <HAL_SDADC_MspInit+0x108>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d16d      	bne.n	800151a <HAL_SDADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <HAL_SDADC_MspInit+0x10c>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a39      	ldr	r2, [pc, #228]	; (8001528 <HAL_SDADC_MspInit+0x10c>)
 8001444:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b37      	ldr	r3, [pc, #220]	; (8001528 <HAL_SDADC_MspInit+0x10c>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	4b34      	ldr	r3, [pc, #208]	; (8001528 <HAL_SDADC_MspInit+0x10c>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	4a33      	ldr	r2, [pc, #204]	; (8001528 <HAL_SDADC_MspInit+0x10c>)
 800145c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001460:	6153      	str	r3, [r2, #20]
 8001462:	4b31      	ldr	r3, [pc, #196]	; (8001528 <HAL_SDADC_MspInit+0x10c>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_SDADC_MspInit+0x10c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <HAL_SDADC_MspInit+0x10c>)
 8001474:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001478:	6153      	str	r3, [r2, #20]
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_SDADC_MspInit+0x10c>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> SDADC1_AIN6P
    PB1     ------> SDADC1_AIN6M
    PE8     ------> SDADC1_AIN8P
    PE9     ------> SDADC1_AIN8M
    */
    GPIO_InitStruct.Pin = ADC_RES__Pin|ADC_RES_B1_Pin;
 8001486:	2303      	movs	r3, #3
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148a:	2303      	movs	r3, #3
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4824      	ldr	r0, [pc, #144]	; (800152c <HAL_SDADC_MspInit+0x110>)
 800149a:	f000 ff73 	bl	8002384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_NTC__Pin|ADC_NTC_E9_Pin;
 800149e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a4:	2303      	movs	r3, #3
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	481f      	ldr	r0, [pc, #124]	; (8001530 <HAL_SDADC_MspInit+0x114>)
 80014b4:	f000 ff66 	bl	8002384 <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_SDADC_MspInit+0x118>)
 80014ba:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <HAL_SDADC_MspInit+0x11c>)
 80014bc:	601a      	str	r2, [r3, #0]
    hdma_sdadc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HAL_SDADC_MspInit+0x118>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
    hdma_sdadc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_SDADC_MspInit+0x118>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
    hdma_sdadc1.Init.MemInc = DMA_MINC_ENABLE;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_SDADC_MspInit+0x118>)
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	60da      	str	r2, [r3, #12]
    hdma_sdadc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_SDADC_MspInit+0x118>)
 80014d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d6:	611a      	str	r2, [r3, #16]
    hdma_sdadc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_SDADC_MspInit+0x118>)
 80014da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014de:	615a      	str	r2, [r3, #20]
    hdma_sdadc1.Init.Mode = DMA_CIRCULAR;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_SDADC_MspInit+0x118>)
 80014e2:	2220      	movs	r2, #32
 80014e4:	619a      	str	r2, [r3, #24]
    hdma_sdadc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_SDADC_MspInit+0x118>)
 80014e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sdadc1) != HAL_OK)
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <HAL_SDADC_MspInit+0x118>)
 80014f0:	f000 fd95 	bl	800201e <HAL_DMA_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_SDADC_MspInit+0xe2>
    {
      Error_Handler();
 80014fa:	f7ff feed 	bl	80012d8 <Error_Handler>
    }

    __HAL_LINKDMA(hsdadc,hdma,hdma_sdadc1);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <HAL_SDADC_MspInit+0x118>)
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <HAL_SDADC_MspInit+0x118>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6253      	str	r3, [r2, #36]	; 0x24

    /* SDADC1 interrupt Init */
    HAL_NVIC_SetPriority(SDADC1_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	203d      	movs	r0, #61	; 0x3d
 8001510:	f000 fd4f 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
 8001514:	203d      	movs	r0, #61	; 0x3d
 8001516:	f000 fd68 	bl	8001fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDADC1_MspInit 1 */

  /* USER CODE END SDADC1_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40016000 	.word	0x40016000
 8001528:	40021000 	.word	0x40021000
 800152c:	48000400 	.word	0x48000400
 8001530:	48001000 	.word	0x48001000
 8001534:	200002bc 	.word	0x200002bc
 8001538:	40020430 	.word	0x40020430

0800153c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800154c:	d10b      	bne.n	8001566 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_TIM_Base_MspInit+0x38>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_TIM_Base_MspInit+0x38>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	61d3      	str	r3, [r2, #28]
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_TIM_Base_MspInit+0x38>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001598:	d11c      	bne.n	80015d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_TIM_MspPostInit+0x64>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_TIM_MspPostInit+0x64>)
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	6153      	str	r3, [r2, #20]
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_TIM_MspPostInit+0x64>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 80015b2:	2303      	movs	r3, #3
 80015b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	4619      	mov	r1, r3
 80015cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d0:	f000 fed8 	bl	8002384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001634:	f000 fba0 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001640:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001644:	f001 f848 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001648:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800164c:	f001 f844 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001650:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001654:	f001 f840 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <DMA2_Channel3_IRQHandler+0x10>)
 8001662:	f000 fd82 	bl	800216a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200002bc 	.word	0x200002bc

08001670 <SDADC1_IRQHandler>:

/**
  * @brief This function handles SDADC1 global interrupt.
  */
void SDADC1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC1_IRQn 0 */

  /* USER CODE END SDADC1_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <SDADC1_IRQHandler+0x10>)
 8001676:	f003 f8c3 	bl	8004800 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC1_IRQn 1 */

  /* USER CODE END SDADC1_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000398 	.word	0x20000398

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f005 fe02 	bl	80072bc <__errno>
 80016b8:	4602      	mov	r2, r0
 80016ba:	230c      	movs	r3, #12
 80016bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20008000 	.word	0x20008000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	20000220 	.word	0x20000220
 80016ec:	20000500 	.word	0x20000500

080016f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <SystemInit+0x28>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a07      	ldr	r2, [pc, #28]	; (8001718 <SystemInit+0x28>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SystemInit+0x28>)
 8001706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800170a:	609a      	str	r2, [r3, #8]
#endif
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <toggle_green_LED>:
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
}
void turn_off_green_LED(){
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
}
void toggle_green_LED(){
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, HAL_GPIO_ReadPin(GREEN_LED_GPIO_Port, GREEN_LED_Pin)^1);
 8001720:	2108      	movs	r1, #8
 8001722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001726:	f000 ffa7 	bl	8002678 <HAL_GPIO_ReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	f083 0301 	eor.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	2108      	movs	r1, #8
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f000 ffb5 	bl	80026a8 <HAL_GPIO_WritePin>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}

08001742 <toggle_red_LED>:
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
}
void turn_off_red_LED(){
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
}
void toggle_red_LED(){
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, HAL_GPIO_ReadPin(RED_LED_GPIO_Port, RED_LED_Pin)^1);
 8001746:	2120      	movs	r1, #32
 8001748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174c:	f000 ff94 	bl	8002678 <HAL_GPIO_ReadPin>
 8001750:	4603      	mov	r3, r0
 8001752:	f083 0301 	eor.w	r3, r3, #1
 8001756:	b2db      	uxtb	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	2120      	movs	r1, #32
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f000 ffa2 	bl	80026a8 <HAL_GPIO_WritePin>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <blink>:

void blink(){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	while(1){
		toggle_red_LED();
 800176c:	f7ff ffe9 	bl	8001742 <toggle_red_LED>
		toggle_green_LED();
 8001770:	f7ff ffd4 	bl	800171c <toggle_green_LED>
		HAL_Delay(1000);
 8001774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001778:	f000 fb1e 	bl	8001db8 <HAL_Delay>
		toggle_red_LED();
 800177c:	e7f6      	b.n	800176c <blink+0x4>

0800177e <start_pwm>:
	}
}

void start_pwm(TIM_HandleTypeDef *htim){
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);		//PWM enable
 8001786:	2100      	movs	r1, #0
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f003 fa37 	bl	8004bfc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);		//PWM enable
 800178e:	2104      	movs	r1, #4
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f003 fa33 	bl	8004bfc <HAL_TIM_PWM_Start>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <update_pid>:
void set_duty_cycle(int dc){
	TIM2->CCR1=dc;
	TIM2->CCR2=dc;
}

void update_pid(){
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	0000      	movs	r0, r0
	...

080017b0 <HAL_GPIO_EXTI_Callback>:
	temp_controller.target_temp = 0;
	write_to_display();
}

//Interrupt function called on button press
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
	//HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
	static int x=0,y=0,set_temp=0;
	if (GPIO_Pin == PUSH_BUTTON_Pin) x++;
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	2b10      	cmp	r3, #16
 80017be:	d104      	bne.n	80017ca <HAL_GPIO_EXTI_Callback+0x1a>
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <HAL_GPIO_EXTI_Callback+0xb8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	4a28      	ldr	r2, [pc, #160]	; (8001868 <HAL_GPIO_EXTI_Callback+0xb8>)
 80017c8:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == ENCODER_PUSH_BUTTON_Pin)	y++;
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d0:	d104      	bne.n	80017dc <HAL_GPIO_EXTI_Callback+0x2c>
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	4a24      	ldr	r2, [pc, #144]	; (800186c <HAL_GPIO_EXTI_Callback+0xbc>)
 80017da:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == ENCODER_A_Pin){
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017e2:	d135      	bne.n	8001850 <HAL_GPIO_EXTI_Callback+0xa0>
		if(HAL_GPIO_ReadPin(ENCODER_A_GPIO_Port,ENCODER_A_Pin)	==	HAL_GPIO_ReadPin(ENCODER_B_GPIO_Port,ENCODER_B_Pin))	{
 80017e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e8:	4821      	ldr	r0, [pc, #132]	; (8001870 <HAL_GPIO_EXTI_Callback+0xc0>)
 80017ea:	f000 ff45 	bl	8002678 <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461c      	mov	r4, r3
 80017f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f6:	481e      	ldr	r0, [pc, #120]	; (8001870 <HAL_GPIO_EXTI_Callback+0xc0>)
 80017f8:	f000 ff3e 	bl	8002678 <HAL_GPIO_ReadPin>
 80017fc:	4603      	mov	r3, r0
 80017fe:	429c      	cmp	r4, r3
 8001800:	d113      	bne.n	800182a <HAL_GPIO_EXTI_Callback+0x7a>
			temp_controller.target_temp-=0.1;
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe4a 	bl	80004a0 <__aeabi_f2d>
 800180c:	a314      	add	r3, pc, #80	; (adr r3, 8001860 <HAL_GPIO_EXTI_Callback+0xb0>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe fce5 	bl	80001e0 <__aeabi_dsub>
 8001816:	4603      	mov	r3, r0
 8001818:	460c      	mov	r4, r1
 800181a:	4618      	mov	r0, r3
 800181c:	4621      	mov	r1, r4
 800181e:	f7ff f96f 	bl	8000b00 <__aeabi_d2f>
 8001822:	4602      	mov	r2, r0
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e012      	b.n	8001850 <HAL_GPIO_EXTI_Callback+0xa0>
		}
		else	{
			temp_controller.target_temp+=0.1;
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_GPIO_EXTI_Callback+0xc4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe36 	bl	80004a0 <__aeabi_f2d>
 8001834:	a30a      	add	r3, pc, #40	; (adr r3, 8001860 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fcd3 	bl	80001e4 <__adddf3>
 800183e:	4603      	mov	r3, r0
 8001840:	460c      	mov	r4, r1
 8001842:	4618      	mov	r0, r3
 8001844:	4621      	mov	r1, r4
 8001846:	f7ff f95b 	bl	8000b00 <__aeabi_d2f>
 800184a:	4602      	mov	r2, r0
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_GPIO_EXTI_Callback+0xc4>)
 800184e:	601a      	str	r2, [r3, #0]
		}
	}
	write_to_display();
 8001850:	f000 f812 	bl	8001878 <write_to_display>
	//HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}
 800185c:	f3af 8000 	nop.w
 8001860:	9999999a 	.word	0x9999999a
 8001864:	3fb99999 	.word	0x3fb99999
 8001868:	20000224 	.word	0x20000224
 800186c:	20000228 	.word	0x20000228
 8001870:	48000800 	.word	0x48000800
 8001874:	20000428 	.word	0x20000428

08001878 <write_to_display>:

void write_to_display(){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
	char str[10],chars;
	chars = ftoa(temp_controller.target_temp, str, 2);
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <write_to_display+0x28>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2102      	movs	r1, #2
 8001888:	4618      	mov	r0, r3
 800188a:	eeb0 0a67 	vmov.f32	s0, s15
 800188e:	f7ff fa07 	bl	8000ca0 <ftoa>
 8001892:	4603      	mov	r3, r0
 8001894:	73fb      	strb	r3, [r7, #15]

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000428 	.word	0x20000428
 80018a4:	00000000 	.word	0x00000000

080018a8 <HAL_SDADC_ConvCpltCallback>:

//Interrupt function called on completed ADC conversion
void HAL_SDADC_ConvCpltCallback(SDADC_HandleTypeDef* hsdadc){
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	ntc.current			=	((Vref/16635.0) *  adc_buf[0])/10000;
 80018b0:	4b37      	ldr	r3, [pc, #220]	; (8001990 <HAL_SDADC_ConvCpltCallback+0xe8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fdf3 	bl	80004a0 <__aeabi_f2d>
 80018ba:	a331      	add	r3, pc, #196	; (adr r3, 8001980 <HAL_SDADC_ConvCpltCallback+0xd8>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe ff70 	bl	80007a4 <__aeabi_ddiv>
 80018c4:	4603      	mov	r3, r0
 80018c6:	460c      	mov	r4, r1
 80018c8:	4625      	mov	r5, r4
 80018ca:	461c      	mov	r4, r3
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_SDADC_ConvCpltCallback+0xec>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fdd3 	bl	800047c <__aeabi_i2d>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fe37 	bl	8000550 <__aeabi_dmul>
 80018e2:	4603      	mov	r3, r0
 80018e4:	460c      	mov	r4, r1
 80018e6:	4618      	mov	r0, r3
 80018e8:	4621      	mov	r1, r4
 80018ea:	a327      	add	r3, pc, #156	; (adr r3, 8001988 <HAL_SDADC_ConvCpltCallback+0xe0>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe ff58 	bl	80007a4 <__aeabi_ddiv>
 80018f4:	4603      	mov	r3, r0
 80018f6:	460c      	mov	r4, r1
 80018f8:	4618      	mov	r0, r3
 80018fa:	4621      	mov	r1, r4
 80018fc:	f7ff f900 	bl	8000b00 <__aeabi_d2f>
 8001900:	4602      	mov	r2, r0
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_SDADC_ConvCpltCallback+0xf0>)
 8001904:	601a      	str	r2, [r3, #0]
	ntc.voltage			=	(Vref/16635.0) *  adc_buf[1];
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_SDADC_ConvCpltCallback+0xe8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fdc8 	bl	80004a0 <__aeabi_f2d>
 8001910:	a31b      	add	r3, pc, #108	; (adr r3, 8001980 <HAL_SDADC_ConvCpltCallback+0xd8>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe ff45 	bl	80007a4 <__aeabi_ddiv>
 800191a:	4603      	mov	r3, r0
 800191c:	460c      	mov	r4, r1
 800191e:	4625      	mov	r5, r4
 8001920:	461c      	mov	r4, r3
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_SDADC_ConvCpltCallback+0xec>)
 8001924:	885b      	ldrh	r3, [r3, #2]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fda8 	bl	800047c <__aeabi_i2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fe0c 	bl	8000550 <__aeabi_dmul>
 8001938:	4603      	mov	r3, r0
 800193a:	460c      	mov	r4, r1
 800193c:	4618      	mov	r0, r3
 800193e:	4621      	mov	r1, r4
 8001940:	f7ff f8de 	bl	8000b00 <__aeabi_d2f>
 8001944:	4602      	mov	r2, r0
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_SDADC_ConvCpltCallback+0xf0>)
 8001948:	605a      	str	r2, [r3, #4]
	ntc.resistance		=	ntc.voltage/ntc.current;
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_SDADC_ConvCpltCallback+0xf0>)
 800194c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_SDADC_ConvCpltCallback+0xf0>)
 8001952:	ed93 7a00 	vldr	s14, [r3]
 8001956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_SDADC_ConvCpltCallback+0xf0>)
 800195c:	edc3 7a02 	vstr	s15, [r3, #8]
	ntc.temperature		=	lookup_temp(ntc.resistance);
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_SDADC_ConvCpltCallback+0xf0>)
 8001962:	edd3 7a02 	vldr	s15, [r3, #8]
 8001966:	eeb0 0a67 	vmov.f32	s0, s15
 800196a:	f000 f817 	bl	800199c <lookup_temp>
 800196e:	eef0 7a40 	vmov.f32	s15, s0
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_SDADC_ConvCpltCallback+0xf0>)
 8001974:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bdb0      	pop	{r4, r5, r7, pc}
 8001980:	00000000 	.word	0x00000000
 8001984:	40d03ec0 	.word	0x40d03ec0
 8001988:	00000000 	.word	0x00000000
 800198c:	40c38800 	.word	0x40c38800
 8001990:	20000004 	.word	0x20000004
 8001994:	200002b8 	.word	0x200002b8
 8001998:	20000460 	.word	0x20000460

0800199c <lookup_temp>:

//gives back the temperature based on NTC resistance value, lookup table needed!
float lookup_temp(float R){
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	ed87 0a01 	vstr	s0, [r7, #4]
    int i = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
    float deltaT,deltaR,T;
    while(R<lookup_temp_table[1][i]){
 80019aa:	e04a      	b.n	8001a42 <lookup_temp+0xa6>
        i++;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	3301      	adds	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
        if((i+1)==sizeof(lookup_temp_table)/sizeof(int)/2) {
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d144      	bne.n	8001a42 <lookup_temp+0xa6>
                deltaT = lookup_temp_table[0][i]-lookup_temp_table[0][i-1];
 80019b8:	4a50      	ldr	r2, [pc, #320]	; (8001afc <lookup_temp+0x160>)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	494d      	ldr	r1, [pc, #308]	; (8001afc <lookup_temp+0x160>)
 80019c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d4:	edc7 7a04 	vstr	s15, [r7, #16]
                deltaR = lookup_temp_table[1][i]-lookup_temp_table[1][i-1];
 80019d8:	4a48      	ldr	r2, [pc, #288]	; (8001afc <lookup_temp+0x160>)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3304      	adds	r3, #4
 80019de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	4945      	ldr	r1, [pc, #276]	; (8001afc <lookup_temp+0x160>)
 80019e8:	3304      	adds	r3, #4
 80019ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f8:	edc7 7a03 	vstr	s15, [r7, #12]
                T=lookup_temp_table[0][i]+(R-lookup_temp_table[1][i])*deltaT/deltaR;
 80019fc:	4a3f      	ldr	r2, [pc, #252]	; (8001afc <lookup_temp+0x160>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a0c:	4a3b      	ldr	r2, [pc, #236]	; (8001afc <lookup_temp+0x160>)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3304      	adds	r3, #4
 8001a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a22:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a26:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a2a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001a2e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a32:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3a:	edc7 7a02 	vstr	s15, [r7, #8]
                return T;
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	e053      	b.n	8001aea <lookup_temp+0x14e>
    while(R<lookup_temp_table[1][i]){
 8001a42:	4a2e      	ldr	r2, [pc, #184]	; (8001afc <lookup_temp+0x160>)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3304      	adds	r3, #4
 8001a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a54:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	d4a4      	bmi.n	80019ac <lookup_temp+0x10>
        }
    }
    deltaT = lookup_temp_table[0][i+1]-lookup_temp_table[0][i];
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3301      	adds	r3, #1
 8001a66:	4a25      	ldr	r2, [pc, #148]	; (8001afc <lookup_temp+0x160>)
 8001a68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a6c:	4923      	ldr	r1, [pc, #140]	; (8001afc <lookup_temp+0x160>)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	edc7 7a04 	vstr	s15, [r7, #16]
    deltaR = lookup_temp_table[1][i+1]-lookup_temp_table[1][i];
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <lookup_temp+0x160>)
 8001a88:	3304      	adds	r3, #4
 8001a8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a8e:	491b      	ldr	r1, [pc, #108]	; (8001afc <lookup_temp+0x160>)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3304      	adds	r3, #4
 8001a94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa2:	edc7 7a03 	vstr	s15, [r7, #12]
    T=lookup_temp_table[0][i]+(R-lookup_temp_table[1][i])*deltaT/deltaR;
 8001aa6:	4a15      	ldr	r2, [pc, #84]	; (8001afc <lookup_temp+0x160>)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <lookup_temp+0x160>)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	3304      	adds	r3, #4
 8001abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac8:	edd7 6a01 	vldr	s13, [r7, #4]
 8001acc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ad0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001ad8:	edd7 6a03 	vldr	s13, [r7, #12]
 8001adc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae4:	edc7 7a02 	vstr	s15, [r7, #8]
    return T;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	ee07 3a90 	vmov	s15, r3
}
 8001aee:	eeb0 0a67 	vmov.f32	s0, s15
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	20000008 	.word	0x20000008

08001b00 <u8x8_stm32_gpio_and_delay>:


uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
    U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
    U8X8_UNUSED void *arg_ptr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	72fb      	strb	r3, [r7, #11]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	3b28      	subs	r3, #40	; 0x28
 8001b16:	2b25      	cmp	r3, #37	; 0x25
 8001b18:	d857      	bhi.n	8001bca <u8x8_stm32_gpio_and_delay+0xca>
 8001b1a:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <u8x8_stm32_gpio_and_delay+0x20>)
 8001b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b20:	08001bb9 	.word	0x08001bb9
 8001b24:	08001bc1 	.word	0x08001bc1
 8001b28:	08001bcb 	.word	0x08001bcb
 8001b2c:	08001bcb 	.word	0x08001bcb
 8001b30:	08001bcb 	.word	0x08001bcb
 8001b34:	08001bcb 	.word	0x08001bcb
 8001b38:	08001bcb 	.word	0x08001bcb
 8001b3c:	08001bcb 	.word	0x08001bcb
 8001b40:	08001bcb 	.word	0x08001bcb
 8001b44:	08001bcb 	.word	0x08001bcb
 8001b48:	08001bcb 	.word	0x08001bcb
 8001b4c:	08001bcb 	.word	0x08001bcb
 8001b50:	08001bcb 	.word	0x08001bcb
 8001b54:	08001bcb 	.word	0x08001bcb
 8001b58:	08001bcb 	.word	0x08001bcb
 8001b5c:	08001bcb 	.word	0x08001bcb
 8001b60:	08001bcb 	.word	0x08001bcb
 8001b64:	08001bcb 	.word	0x08001bcb
 8001b68:	08001bcb 	.word	0x08001bcb
 8001b6c:	08001bcb 	.word	0x08001bcb
 8001b70:	08001bcb 	.word	0x08001bcb
 8001b74:	08001bcb 	.word	0x08001bcb
 8001b78:	08001bcb 	.word	0x08001bcb
 8001b7c:	08001bcb 	.word	0x08001bcb
 8001b80:	08001bcb 	.word	0x08001bcb
 8001b84:	08001bcb 	.word	0x08001bcb
 8001b88:	08001bcb 	.word	0x08001bcb
 8001b8c:	08001bcb 	.word	0x08001bcb
 8001b90:	08001bcb 	.word	0x08001bcb
 8001b94:	08001bcb 	.word	0x08001bcb
 8001b98:	08001bcb 	.word	0x08001bcb
 8001b9c:	08001bcb 	.word	0x08001bcb
 8001ba0:	08001bcb 	.word	0x08001bcb
 8001ba4:	08001bcb 	.word	0x08001bcb
 8001ba8:	08001bcb 	.word	0x08001bcb
 8001bac:	08001bcb 	.word	0x08001bcb
 8001bb0:	08001bcb 	.word	0x08001bcb
 8001bb4:	08001bcb 	.word	0x08001bcb
  {
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    HAL_Delay(1);
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f000 f8fd 	bl	8001db8 <HAL_Delay>
    break;
 8001bbe:	e004      	b.n	8001bca <u8x8_stm32_gpio_and_delay+0xca>
  case U8X8_MSG_DELAY_MILLI:
    HAL_Delay(arg_int);
 8001bc0:	7abb      	ldrb	r3, [r7, #10]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f8f8 	bl	8001db8 <HAL_Delay>
    break;
 8001bc8:	bf00      	nop
	  break;							// arg_int=1: Input dir with pullup high for I2C clock pin
  case U8X8_MSG_GPIO_I2C_DATA:			// arg_int=0: Output low at I2C data pin

	  break;
  }
  return 1;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <u8x8_byte_stm32_hw_i2c>:

uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af04      	add	r7, sp, #16
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	72fb      	strb	r3, [r7, #11]
 8001be2:	4613      	mov	r3, r2
 8001be4:	72bb      	strb	r3, [r7, #10]
	static uint8_t dc = 0;
	switch(msg)  {
 8001be6:	7afb      	ldrb	r3, [r7, #11]
 8001be8:	3b14      	subs	r3, #20
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d847      	bhi.n	8001c7e <u8x8_byte_stm32_hw_i2c+0xaa>
 8001bee:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <u8x8_byte_stm32_hw_i2c+0x20>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c63 	.word	0x08001c63
 8001bf8:	08001c7f 	.word	0x08001c7f
 8001bfc:	08001c7f 	.word	0x08001c7f
 8001c00:	08001c29 	.word	0x08001c29
 8001c04:	08001c83 	.word	0x08001c83
 8001c08:	08001c83 	.word	0x08001c83
 8001c0c:	08001c7f 	.word	0x08001c7f
 8001c10:	08001c7f 	.word	0x08001c7f
 8001c14:	08001c7f 	.word	0x08001c7f
 8001c18:	08001c7f 	.word	0x08001c7f
 8001c1c:	08001c7f 	.word	0x08001c7f
 8001c20:	08001c7f 	.word	0x08001c7f
 8001c24:	08001c77 	.word	0x08001c77
		case U8X8_MSG_BYTE_SEND:
			while (HAL_I2C_STATE_READY != HAL_I2C_GetState(&hi2c1)) { }
 8001c28:	bf00      	nop
 8001c2a:	4819      	ldr	r0, [pc, #100]	; (8001c90 <u8x8_byte_stm32_hw_i2c+0xbc>)
 8001c2c:	f000 ff10 	bl	8002a50 <HAL_I2C_GetState>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d1f9      	bne.n	8001c2a <u8x8_byte_stm32_hw_i2c+0x56>
			HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, (dc == 0)?0:0x40, 1, (uint8_t *)arg_ptr, arg_int, HAL_MAX_DELAY);
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <u8x8_byte_stm32_hw_i2c+0x6e>
 8001c3e:	2100      	movs	r1, #0
 8001c40:	e000      	b.n	8001c44 <u8x8_byte_stm32_hw_i2c+0x70>
 8001c42:	2140      	movs	r1, #64	; 0x40
 8001c44:	7abb      	ldrb	r3, [r7, #10]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	9202      	str	r2, [sp, #8]
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2301      	movs	r3, #1
 8001c56:	460a      	mov	r2, r1
 8001c58:	2178      	movs	r1, #120	; 0x78
 8001c5a:	480d      	ldr	r0, [pc, #52]	; (8001c90 <u8x8_byte_stm32_hw_i2c+0xbc>)
 8001c5c:	f000 fde4 	bl	8002828 <HAL_I2C_Mem_Write>
			break;
 8001c60:	e010      	b.n	8001c84 <u8x8_byte_stm32_hw_i2c+0xb0>
		case U8X8_MSG_BYTE_INIT:
			u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	695c      	ldr	r4, [r3, #20]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	789a      	ldrb	r2, [r3, #2]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	212c      	movs	r1, #44	; 0x2c
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	47a0      	blx	r4
			break;
 8001c74:	e006      	b.n	8001c84 <u8x8_byte_stm32_hw_i2c+0xb0>
		case U8X8_MSG_BYTE_SET_DC:
			dc = arg_int;
 8001c76:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8001c78:	7abb      	ldrb	r3, [r7, #10]
 8001c7a:	7013      	strb	r3, [r2, #0]
			break;
 8001c7c:	e002      	b.n	8001c84 <u8x8_byte_stm32_hw_i2c+0xb0>
		case U8X8_MSG_BYTE_START_TRANSFER:
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			break;
		default:
			return 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e001      	b.n	8001c86 <u8x8_byte_stm32_hw_i2c+0xb2>
			break;
 8001c82:	bf00      	nop
	}
	return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	2000034c 	.word	0x2000034c
 8001c94:	2000022c 	.word	0x2000022c

08001c98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c9e:	e003      	b.n	8001ca8 <LoopCopyDataInit>

08001ca0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ca2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ca4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ca6:	3104      	adds	r1, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ca8:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cb0:	d3f6      	bcc.n	8001ca0 <CopyDataInit>
	ldr	r2, =_sbss
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cb4:	e002      	b.n	8001cbc <LoopFillZerobss>

08001cb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001cb8:	f842 3b04 	str.w	r3, [r2], #4

08001cbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <LoopForever+0x16>)
	cmp	r2, r3
 8001cbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cc0:	d3f9      	bcc.n	8001cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cc2:	f7ff fd15 	bl	80016f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f005 faff 	bl	80072c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cca:	f7ff f849 	bl	8000d60 <main>

08001cce <LoopForever>:

LoopForever:
    b LoopForever
 8001cce:	e7fe      	b.n	8001cce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cd0:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001cd4:	0800ac10 	.word	0x0800ac10
	ldr	r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cdc:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8001ce0:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 8001ce4:	200004fc 	.word	0x200004fc

08001ce8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC1_IRQHandler>
	...

08001cec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_Init+0x28>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <HAL_Init+0x28>)
 8001cf6:	f043 0310 	orr.w	r3, r3, #16
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f000 f94d 	bl	8001f9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f000 f808 	bl	8001d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d08:	f7ff faee 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40022000 	.word	0x40022000

08001d18 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_InitTick+0x54>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_InitTick+0x58>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f965 	bl	8002006 <HAL_SYSTICK_Config>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00e      	b.n	8001d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0f      	cmp	r3, #15
 8001d4a:	d80a      	bhi.n	8001d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f000 f92d 	bl	8001fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d58:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <HAL_InitTick+0x5c>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	2000002c 	.word	0x2000002c
 8001d74:	20000028 	.word	0x20000028

08001d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_IncTick+0x20>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x24>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <HAL_IncTick+0x24>)
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2000002c 	.word	0x2000002c
 8001d9c:	200004f4 	.word	0x200004f4

08001da0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_GetTick+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	200004f4 	.word	0x200004f4

08001db8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc0:	f7ff ffee 	bl	8001da0 <HAL_GetTick>
 8001dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd0:	d005      	beq.n	8001dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_Delay+0x40>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001dde:	bf00      	nop
 8001de0:	f7ff ffde 	bl	8001da0 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d8f7      	bhi.n	8001de0 <HAL_Delay+0x28>
  {
  }
}
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	2000002c 	.word	0x2000002c

08001dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	60d3      	str	r3, [r2, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <__NVIC_GetPriorityGrouping+0x18>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 0307 	and.w	r3, r3, #7
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0b      	blt.n	8001e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4907      	ldr	r1, [pc, #28]	; (8001e98 <__NVIC_EnableIRQ+0x38>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f68:	d301      	bcc.n	8001f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00f      	b.n	8001f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <SysTick_Config+0x40>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f76:	210f      	movs	r1, #15
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f7ff ff8e 	bl	8001e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <SysTick_Config+0x40>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <SysTick_Config+0x40>)
 8001f88:	2207      	movs	r2, #7
 8001f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	e000e010 	.word	0xe000e010

08001f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff29 	bl	8001dfc <__NVIC_SetPriorityGrouping>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc4:	f7ff ff3e 	bl	8001e44 <__NVIC_GetPriorityGrouping>
 8001fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	6978      	ldr	r0, [r7, #20]
 8001fd0:	f7ff ff8e 	bl	8001ef0 <NVIC_EncodePriority>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff5d 	bl	8001e9c <__NVIC_SetPriority>
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff31 	bl	8001e60 <__NVIC_EnableIRQ>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffa2 	bl	8001f58 <SysTick_Config>
 8002014:	4603      	mov	r3, r0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e037      	b.n	80020a4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800204a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800204e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002058:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f940 	bl	800230c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}  
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_DMA_Start_IT+0x20>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e04a      	b.n	8002162 <HAL_DMA_Start_IT+0xb6>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d13a      	bne.n	8002154 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2202      	movs	r2, #2
 80020e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f8d4 	bl	80022b0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 020e 	orr.w	r2, r2, #14
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e00f      	b.n	8002142 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 020a 	orr.w	r2, r2, #10
 8002130:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0204 	bic.w	r2, r2, #4
 8002140:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e005      	b.n	8002160 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800215c:	2302      	movs	r3, #2
 800215e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002160:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2204      	movs	r2, #4
 8002188:	409a      	lsls	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d024      	beq.n	80021dc <HAL_DMA_IRQHandler+0x72>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01f      	beq.n	80021dc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d107      	bne.n	80021ba <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0204 	bic.w	r2, r2, #4
 80021b8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	2104      	movs	r1, #4
 80021c4:	fa01 f202 	lsl.w	r2, r1, r2
 80021c8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d06a      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80021da:	e065      	b.n	80022a8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	2202      	movs	r2, #2
 80021e2:	409a      	lsls	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d02c      	beq.n	8002246 <HAL_DMA_IRQHandler+0xdc>
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d027      	beq.n	8002246 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10b      	bne.n	800221c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 020a 	bic.w	r2, r2, #10
 8002212:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	2102      	movs	r1, #2
 8002226:	fa01 f202 	lsl.w	r2, r1, r2
 800222a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d035      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002244:	e030      	b.n	80022a8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	2208      	movs	r2, #8
 800224c:	409a      	lsls	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d028      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x13e>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d023      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020e 	bic.w	r2, r2, #14
 800226e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
    }
  }
}  
 80022a6:	e7ff      	b.n	80022a8 <HAL_DMA_IRQHandler+0x13e>
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b10      	cmp	r3, #16
 80022dc:	d108      	bne.n	80022f0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022ee:	e007      	b.n	8002300 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	60da      	str	r2, [r3, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <DMA_CalcBaseAndBitshift+0x60>)
 800231c:	429a      	cmp	r2, r3
 800231e:	d80f      	bhi.n	8002340 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <DMA_CalcBaseAndBitshift+0x64>)
 8002328:	4413      	add	r3, r2
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <DMA_CalcBaseAndBitshift+0x68>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	009a      	lsls	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <DMA_CalcBaseAndBitshift+0x6c>)
 800233c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800233e:	e00e      	b.n	800235e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <DMA_CalcBaseAndBitshift+0x70>)
 8002348:	4413      	add	r3, r2
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <DMA_CalcBaseAndBitshift+0x68>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	009a      	lsls	r2, r3, #2
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <DMA_CalcBaseAndBitshift+0x74>)
 800235c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40020407 	.word	0x40020407
 8002370:	bffdfff8 	.word	0xbffdfff8
 8002374:	cccccccd 	.word	0xcccccccd
 8002378:	40020000 	.word	0x40020000
 800237c:	bffdfbf8 	.word	0xbffdfbf8
 8002380:	40020400 	.word	0x40020400

08002384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002392:	e154      	b.n	800263e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8146 	beq.w	8002638 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d00b      	beq.n	80023cc <HAL_GPIO_Init+0x48>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d007      	beq.n	80023cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c0:	2b11      	cmp	r3, #17
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b12      	cmp	r3, #18
 80023ca:	d130      	bne.n	800242e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002402:	2201      	movs	r2, #1
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	f003 0201 	and.w	r2, r3, #1
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0xea>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b12      	cmp	r3, #18
 800246c:	d123      	bne.n	80024b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	220f      	movs	r2, #15
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	6939      	ldr	r1, [r7, #16]
 80024b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0203 	and.w	r2, r3, #3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80a0 	beq.w	8002638 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f8:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_GPIO_Init+0x2d8>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a57      	ldr	r2, [pc, #348]	; (800265c <HAL_GPIO_Init+0x2d8>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b55      	ldr	r3, [pc, #340]	; (800265c <HAL_GPIO_Init+0x2d8>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002510:	4a53      	ldr	r2, [pc, #332]	; (8002660 <HAL_GPIO_Init+0x2dc>)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3302      	adds	r3, #2
 8002518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800253a:	d019      	beq.n	8002570 <HAL_GPIO_Init+0x1ec>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a49      	ldr	r2, [pc, #292]	; (8002664 <HAL_GPIO_Init+0x2e0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_GPIO_Init+0x1e8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a48      	ldr	r2, [pc, #288]	; (8002668 <HAL_GPIO_Init+0x2e4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00d      	beq.n	8002568 <HAL_GPIO_Init+0x1e4>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a47      	ldr	r2, [pc, #284]	; (800266c <HAL_GPIO_Init+0x2e8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <HAL_GPIO_Init+0x1e0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a46      	ldr	r2, [pc, #280]	; (8002670 <HAL_GPIO_Init+0x2ec>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_GPIO_Init+0x1dc>
 800255c:	2304      	movs	r3, #4
 800255e:	e008      	b.n	8002572 <HAL_GPIO_Init+0x1ee>
 8002560:	2305      	movs	r3, #5
 8002562:	e006      	b.n	8002572 <HAL_GPIO_Init+0x1ee>
 8002564:	2303      	movs	r3, #3
 8002566:	e004      	b.n	8002572 <HAL_GPIO_Init+0x1ee>
 8002568:	2302      	movs	r3, #2
 800256a:	e002      	b.n	8002572 <HAL_GPIO_Init+0x1ee>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <HAL_GPIO_Init+0x1ee>
 8002570:	2300      	movs	r3, #0
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	f002 0203 	and.w	r2, r2, #3
 8002578:	0092      	lsls	r2, r2, #2
 800257a:	4093      	lsls	r3, r2
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002582:	4937      	ldr	r1, [pc, #220]	; (8002660 <HAL_GPIO_Init+0x2dc>)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002590:	4b38      	ldr	r3, [pc, #224]	; (8002674 <HAL_GPIO_Init+0x2f0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025b4:	4a2f      	ldr	r2, [pc, #188]	; (8002674 <HAL_GPIO_Init+0x2f0>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025ba:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <HAL_GPIO_Init+0x2f0>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025de:	4a25      	ldr	r2, [pc, #148]	; (8002674 <HAL_GPIO_Init+0x2f0>)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <HAL_GPIO_Init+0x2f0>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002608:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <HAL_GPIO_Init+0x2f0>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800260e:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_GPIO_Init+0x2f0>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <HAL_GPIO_Init+0x2f0>)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f aea3 	bne.w	8002394 <HAL_GPIO_Init+0x10>
  }
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	40010000 	.word	0x40010000
 8002664:	48000400 	.word	0x48000400
 8002668:	48000800 	.word	0x48000800
 800266c:	48000c00 	.word	0x48000c00
 8002670:	48001000 	.word	0x48001000
 8002674:	40010400 	.word	0x40010400

08002678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
 8002694:	e001      	b.n	800269a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f85a 	bl	80017b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40010400 	.word	0x40010400

08002708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e081      	b.n	800281e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fe fdfe 	bl	8001330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2224      	movs	r2, #36	; 0x24
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002758:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002768:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	e006      	b.n	8002790 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800278e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d104      	bne.n	80027a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	ea42 0103 	orr.w	r1, r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	021a      	lsls	r2, r3, #8
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69d9      	ldr	r1, [r3, #28]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1a      	ldr	r2, [r3, #32]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	4608      	mov	r0, r1
 8002832:	4611      	mov	r1, r2
 8002834:	461a      	mov	r2, r3
 8002836:	4603      	mov	r3, r0
 8002838:	817b      	strh	r3, [r7, #10]
 800283a:	460b      	mov	r3, r1
 800283c:	813b      	strh	r3, [r7, #8]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b20      	cmp	r3, #32
 800284c:	f040 80f9 	bne.w	8002a42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_I2C_Mem_Write+0x34>
 8002856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0ed      	b.n	8002a44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_I2C_Mem_Write+0x4e>
 8002872:	2302      	movs	r3, #2
 8002874:	e0e6      	b.n	8002a44 <HAL_I2C_Mem_Write+0x21c>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800287e:	f7ff fa8f 	bl	8001da0 <HAL_GetTick>
 8002882:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2319      	movs	r3, #25
 800288a:	2201      	movs	r2, #1
 800288c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f963 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0d1      	b.n	8002a44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2221      	movs	r2, #33	; 0x21
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a3a      	ldr	r2, [r7, #32]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028c8:	88f8      	ldrh	r0, [r7, #6]
 80028ca:	893a      	ldrh	r2, [r7, #8]
 80028cc:	8979      	ldrh	r1, [r7, #10]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	4603      	mov	r3, r0
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f8c7 	bl	8002a6c <I2C_RequestMemoryWrite>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0a9      	b.n	8002a44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2bff      	cmp	r3, #255	; 0xff
 80028f8:	d90e      	bls.n	8002918 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	22ff      	movs	r2, #255	; 0xff
 80028fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	b2da      	uxtb	r2, r3
 8002906:	8979      	ldrh	r1, [r7, #10]
 8002908:	2300      	movs	r3, #0
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fa45 	bl	8002da0 <I2C_TransferConfig>
 8002916:	e00f      	b.n	8002938 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	b2da      	uxtb	r2, r3
 8002928:	8979      	ldrh	r1, [r7, #10]
 800292a:	2300      	movs	r3, #0
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fa34 	bl	8002da0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f94d 	bl	8002bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e07b      	b.n	8002a44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d034      	beq.n	80029f0 <HAL_I2C_Mem_Write+0x1c8>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	d130      	bne.n	80029f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	2200      	movs	r2, #0
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f8df 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e04d      	b.n	8002a44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2bff      	cmp	r3, #255	; 0xff
 80029b0:	d90e      	bls.n	80029d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	22ff      	movs	r2, #255	; 0xff
 80029b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	8979      	ldrh	r1, [r7, #10]
 80029c0:	2300      	movs	r3, #0
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f9e9 	bl	8002da0 <I2C_TransferConfig>
 80029ce:	e00f      	b.n	80029f0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	8979      	ldrh	r1, [r7, #10]
 80029e2:	2300      	movs	r3, #0
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f9d8 	bl	8002da0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d19e      	bne.n	8002938 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f92c 	bl	8002c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e01a      	b.n	8002a44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2220      	movs	r2, #32
 8002a14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_I2C_Mem_Write+0x224>)
 8002a22:	400b      	ands	r3, r1
 8002a24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e000      	b.n	8002a44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a42:	2302      	movs	r3, #2
  }
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	fe00e800 	.word	0xfe00e800

08002a50 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5e:	b2db      	uxtb	r3, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	4608      	mov	r0, r1
 8002a76:	4611      	mov	r1, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	817b      	strh	r3, [r7, #10]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	813b      	strh	r3, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	8979      	ldrh	r1, [r7, #10]
 8002a8c:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <I2C_RequestMemoryWrite+0xa4>)
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f983 	bl	8002da0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	69b9      	ldr	r1, [r7, #24]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f89c 	bl	8002bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e02c      	b.n	8002b08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d105      	bne.n	8002ac0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab4:	893b      	ldrh	r3, [r7, #8]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	629a      	str	r2, [r3, #40]	; 0x28
 8002abe:	e015      	b.n	8002aec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ac0:	893b      	ldrh	r3, [r7, #8]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	69b9      	ldr	r1, [r7, #24]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f882 	bl	8002bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e012      	b.n	8002b08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae2:	893b      	ldrh	r3, [r7, #8]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f830 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	80002000 	.word	0x80002000

08002b14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d103      	bne.n	8002b32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d007      	beq.n	8002b50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	619a      	str	r2, [r3, #24]
  }
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b6c:	e022      	b.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d01e      	beq.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b76:	f7ff f913 	bl	8001da0 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d113      	bne.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	f043 0220 	orr.w	r2, r3, #32
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e00f      	b.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d0cd      	beq.n	8002b6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002be8:	e02c      	b.n	8002c44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f870 	bl	8002cd4 <I2C_IsAcknowledgeFailed>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e02a      	b.n	8002c54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d01e      	beq.n	8002c44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7ff f8cb 	bl	8001da0 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d113      	bne.n	8002c44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e007      	b.n	8002c54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d1cb      	bne.n	8002bea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c68:	e028      	b.n	8002cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f830 	bl	8002cd4 <I2C_IsAcknowledgeFailed>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e026      	b.n	8002ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7e:	f7ff f88f 	bl	8001da0 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d302      	bcc.n	8002c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d113      	bne.n	8002cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e007      	b.n	8002ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d1cf      	bne.n	8002c6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d151      	bne.n	8002d92 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cee:	e022      	b.n	8002d36 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d01e      	beq.n	8002d36 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf8:	f7ff f852 	bl	8001da0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d302      	bcc.n	8002d0e <I2C_IsAcknowledgeFailed+0x3a>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d113      	bne.n	8002d36 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e02e      	b.n	8002d94 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d1d5      	bne.n	8002cf0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2220      	movs	r2, #32
 8002d52:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff fedd 	bl	8002b14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <I2C_IsAcknowledgeFailed+0xc8>)
 8002d66:	400b      	ands	r3, r1
 8002d68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f043 0204 	orr.w	r2, r3, #4
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	fe00e800 	.word	0xfe00e800

08002da0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	817b      	strh	r3, [r7, #10]
 8002dae:	4613      	mov	r3, r2
 8002db0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	0d5b      	lsrs	r3, r3, #21
 8002dbc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <I2C_TransferConfig+0x58>)
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	ea02 0103 	and.w	r1, r2, r3
 8002dca:	897b      	ldrh	r3, [r7, #10]
 8002dcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dd0:	7a7b      	ldrb	r3, [r7, #9]
 8002dd2:	041b      	lsls	r3, r3, #16
 8002dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	03ff63ff 	.word	0x03ff63ff

08002dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d138      	bne.n	8002e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e032      	b.n	8002e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d139      	bne.n	8002f1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e033      	b.n	8002f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2224      	movs	r2, #36	; 0x24
 8002ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ee4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_PWREx_EnableSDADC+0x38>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_PWREx_EnableSDADC+0x38>)
 8002f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	61d3      	str	r3, [r2, #28]
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_PWREx_EnableSDADC+0x38>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_PWREx_EnableSDADC+0x3c>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4905      	ldr	r1, [pc, #20]	; (8002f68 <HAL_PWREx_EnableSDADC+0x3c>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40007000 	.word	0x40007000

08002f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f000 bef4 	b.w	8003d6e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 816a 	beq.w	800326a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f96:	4bb3      	ldr	r3, [pc, #716]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d00c      	beq.n	8002fbc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fa2:	4bb0      	ldr	r3, [pc, #704]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d159      	bne.n	8003062 <HAL_RCC_OscConfig+0xf6>
 8002fae:	4bad      	ldr	r3, [pc, #692]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fba:	d152      	bne.n	8003062 <HAL_RCC_OscConfig+0xf6>
 8002fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fd0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d102      	bne.n	8002fee <HAL_RCC_OscConfig+0x82>
 8002fe8:	4b9e      	ldr	r3, [pc, #632]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	e015      	b.n	800301a <HAL_RCC_OscConfig+0xae>
 8002fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003006:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800300a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003016:	4b93      	ldr	r3, [pc, #588]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800301e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003022:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003026:	fa92 f2a2 	rbit	r2, r2
 800302a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800302e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003032:	fab2 f282 	clz	r2, r2
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	f042 0220 	orr.w	r2, r2, #32
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	f002 021f 	and.w	r2, r2, #31
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f202 	lsl.w	r2, r1, r2
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 810c 	beq.w	8003268 <HAL_RCC_OscConfig+0x2fc>
 8003050:	1d3b      	adds	r3, r7, #4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f040 8106 	bne.w	8003268 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f000 be86 	b.w	8003d6e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306c:	d106      	bne.n	800307c <HAL_RCC_OscConfig+0x110>
 800306e:	4b7d      	ldr	r3, [pc, #500]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a7c      	ldr	r2, [pc, #496]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e030      	b.n	80030de <HAL_RCC_OscConfig+0x172>
 800307c:	1d3b      	adds	r3, r7, #4
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x134>
 8003086:	4b77      	ldr	r3, [pc, #476]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a76      	ldr	r2, [pc, #472]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 800308c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b74      	ldr	r3, [pc, #464]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a73      	ldr	r2, [pc, #460]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 8003098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e01e      	b.n	80030de <HAL_RCC_OscConfig+0x172>
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030aa:	d10c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x15a>
 80030ac:	4b6d      	ldr	r3, [pc, #436]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a6c      	ldr	r2, [pc, #432]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 80030b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b6a      	ldr	r3, [pc, #424]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a69      	ldr	r2, [pc, #420]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	e00b      	b.n	80030de <HAL_RCC_OscConfig+0x172>
 80030c6:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a66      	ldr	r2, [pc, #408]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 80030cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b64      	ldr	r3, [pc, #400]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a63      	ldr	r2, [pc, #396]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 80030d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030de:	4b61      	ldr	r3, [pc, #388]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	f023 020f 	bic.w	r2, r3, #15
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	495d      	ldr	r1, [pc, #372]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d059      	beq.n	80031b0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe fe50 	bl	8001da0 <HAL_GetTick>
 8003100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003106:	f7fe fe4b 	bl	8001da0 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d902      	bls.n	800311c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	f000 be29 	b.w	8003d6e <HAL_RCC_OscConfig+0xe02>
 800311c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003120:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003130:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d102      	bne.n	800314e <HAL_RCC_OscConfig+0x1e2>
 8003148:	4b46      	ldr	r3, [pc, #280]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	e015      	b.n	800317a <HAL_RCC_OscConfig+0x20e>
 800314e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003152:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003166:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800316a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003176:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800317e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003182:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003186:	fa92 f2a2 	rbit	r2, r2
 800318a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800318e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003192:	fab2 f282 	clz	r2, r2
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	f042 0220 	orr.w	r2, r2, #32
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f002 021f 	and.w	r2, r2, #31
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f202 	lsl.w	r2, r1, r2
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ab      	beq.n	8003106 <HAL_RCC_OscConfig+0x19a>
 80031ae:	e05c      	b.n	800326a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fdf6 	bl	8001da0 <HAL_GetTick>
 80031b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ba:	f7fe fdf1 	bl	8001da0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d902      	bls.n	80031d0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	f000 bdcf 	b.w	8003d6e <HAL_RCC_OscConfig+0xe02>
 80031d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80031e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d102      	bne.n	8003202 <HAL_RCC_OscConfig+0x296>
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x2c2>
 8003202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003206:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800321a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800321e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <HAL_RCC_OscConfig+0x2f8>)
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003232:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003236:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800323a:	fa92 f2a2 	rbit	r2, r2
 800323e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003242:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003246:	fab2 f282 	clz	r2, r2
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f042 0220 	orr.w	r2, r2, #32
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	f002 021f 	and.w	r2, r2, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f202 	lsl.w	r2, r1, r2
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1ab      	bne.n	80031ba <HAL_RCC_OscConfig+0x24e>
 8003262:	e002      	b.n	800326a <HAL_RCC_OscConfig+0x2fe>
 8003264:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	1d3b      	adds	r3, r7, #4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 816f 	beq.w	8003558 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800327a:	4bd0      	ldr	r3, [pc, #832]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003286:	4bcd      	ldr	r3, [pc, #820]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b08      	cmp	r3, #8
 8003290:	d16c      	bne.n	800336c <HAL_RCC_OscConfig+0x400>
 8003292:	4bca      	ldr	r3, [pc, #808]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d166      	bne.n	800336c <HAL_RCC_OscConfig+0x400>
 800329e:	2302      	movs	r3, #2
 80032a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80032b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d102      	bne.n	80032ce <HAL_RCC_OscConfig+0x362>
 80032c8:	4bbc      	ldr	r3, [pc, #752]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	e013      	b.n	80032f6 <HAL_RCC_OscConfig+0x38a>
 80032ce:	2302      	movs	r3, #2
 80032d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80032e0:	2302      	movs	r3, #2
 80032e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80032e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80032f2:	4bb2      	ldr	r3, [pc, #712]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2202      	movs	r2, #2
 80032f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80032fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003300:	fa92 f2a2 	rbit	r2, r2
 8003304:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003308:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800330c:	fab2 f282 	clz	r2, r2
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f042 0220 	orr.w	r2, r2, #32
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	f002 021f 	and.w	r2, r2, #31
 800331c:	2101      	movs	r1, #1
 800331e:	fa01 f202 	lsl.w	r2, r1, r2
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <HAL_RCC_OscConfig+0x3cc>
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d002      	beq.n	8003338 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f000 bd1b 	b.w	8003d6e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4ba0      	ldr	r3, [pc, #640]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	21f8      	movs	r1, #248	; 0xf8
 8003348:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003350:	fa91 f1a1 	rbit	r1, r1
 8003354:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003358:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800335c:	fab1 f181 	clz	r1, r1
 8003360:	b2c9      	uxtb	r1, r1
 8003362:	408b      	lsls	r3, r1
 8003364:	4995      	ldr	r1, [pc, #596]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e0f5      	b.n	8003558 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8085 	beq.w	8003482 <HAL_RCC_OscConfig+0x516>
 8003378:	2301      	movs	r3, #1
 800337a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800338a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003398:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	461a      	mov	r2, r3
 80033a0:	2301      	movs	r3, #1
 80033a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe fcfc 	bl	8001da0 <HAL_GetTick>
 80033a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ae:	f7fe fcf7 	bl	8001da0 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d902      	bls.n	80033c4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	f000 bcd5 	b.w	8003d6e <HAL_RCC_OscConfig+0xe02>
 80033c4:	2302      	movs	r3, #2
 80033c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80033d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d102      	bne.n	80033f4 <HAL_RCC_OscConfig+0x488>
 80033ee:	4b73      	ldr	r3, [pc, #460]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	e013      	b.n	800341c <HAL_RCC_OscConfig+0x4b0>
 80033f4:	2302      	movs	r3, #2
 80033f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003406:	2302      	movs	r3, #2
 8003408:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800340c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003418:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	2202      	movs	r2, #2
 800341e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003422:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003426:	fa92 f2a2 	rbit	r2, r2
 800342a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800342e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003432:	fab2 f282 	clz	r2, r2
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	f042 0220 	orr.w	r2, r2, #32
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	f002 021f 	and.w	r2, r2, #31
 8003442:	2101      	movs	r1, #1
 8003444:	fa01 f202 	lsl.w	r2, r1, r2
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0af      	beq.n	80033ae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b5b      	ldr	r3, [pc, #364]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	21f8      	movs	r1, #248	; 0xf8
 800345e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003466:	fa91 f1a1 	rbit	r1, r1
 800346a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800346e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003472:	fab1 f181 	clz	r1, r1
 8003476:	b2c9      	uxtb	r1, r1
 8003478:	408b      	lsls	r3, r1
 800347a:	4950      	ldr	r1, [pc, #320]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
 8003480:	e06a      	b.n	8003558 <HAL_RCC_OscConfig+0x5ec>
 8003482:	2301      	movs	r3, #1
 8003484:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003494:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	461a      	mov	r2, r3
 80034aa:	2300      	movs	r3, #0
 80034ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fe fc77 	bl	8001da0 <HAL_GetTick>
 80034b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fe fc72 	bl	8001da0 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d902      	bls.n	80034ce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	f000 bc50 	b.w	8003d6e <HAL_RCC_OscConfig+0xe02>
 80034ce:	2302      	movs	r3, #2
 80034d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80034e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d102      	bne.n	80034fe <HAL_RCC_OscConfig+0x592>
 80034f8:	4b30      	ldr	r3, [pc, #192]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	e013      	b.n	8003526 <HAL_RCC_OscConfig+0x5ba>
 80034fe:	2302      	movs	r3, #2
 8003500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003510:	2302      	movs	r3, #2
 8003512:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003516:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003522:	4b26      	ldr	r3, [pc, #152]	; (80035bc <HAL_RCC_OscConfig+0x650>)
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	2202      	movs	r2, #2
 8003528:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800352c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003530:	fa92 f2a2 	rbit	r2, r2
 8003534:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003538:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800353c:	fab2 f282 	clz	r2, r2
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	f042 0220 	orr.w	r2, r2, #32
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f002 021f 	and.w	r2, r2, #31
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1af      	bne.n	80034b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80da 	beq.w	800371c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d069      	beq.n	8003646 <HAL_RCC_OscConfig+0x6da>
 8003572:	2301      	movs	r3, #1
 8003574:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_OscConfig+0x654>)
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	461a      	mov	r2, r3
 8003598:	2301      	movs	r3, #1
 800359a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359c:	f7fe fc00 	bl	8001da0 <HAL_GetTick>
 80035a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a4:	e00e      	b.n	80035c4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a6:	f7fe fbfb 	bl	8001da0 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d906      	bls.n	80035c4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e3d9      	b.n	8003d6e <HAL_RCC_OscConfig+0xe02>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	10908120 	.word	0x10908120
 80035c4:	2302      	movs	r3, #2
 80035c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80035da:	2202      	movs	r2, #2
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	fa93 f2a3 	rbit	r2, r3
 80035e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80035f2:	2202      	movs	r2, #2
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	fa93 f2a3 	rbit	r2, r3
 8003600:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003604:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4ba5      	ldr	r3, [pc, #660]	; (800389c <HAL_RCC_OscConfig+0x930>)
 8003608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800360e:	2102      	movs	r1, #2
 8003610:	6019      	str	r1, [r3, #0]
 8003612:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	fa93 f1a3 	rbit	r1, r3
 800361c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003620:	6019      	str	r1, [r3, #0]
  return result;
 8003622:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2101      	movs	r1, #1
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0b0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x63a>
 8003644:	e06a      	b.n	800371c <HAL_RCC_OscConfig+0x7b0>
 8003646:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	fa93 f2a3 	rbit	r2, r3
 8003658:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800365c:	601a      	str	r2, [r3, #0]
  return result;
 800365e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003662:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	4b8c      	ldr	r3, [pc, #560]	; (80038a0 <HAL_RCC_OscConfig+0x934>)
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	461a      	mov	r2, r3
 8003674:	2300      	movs	r3, #0
 8003676:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003678:	f7fe fb92 	bl	8001da0 <HAL_GetTick>
 800367c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	e009      	b.n	8003696 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003682:	f7fe fb8d 	bl	8001da0 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e36b      	b.n	8003d6e <HAL_RCC_OscConfig+0xe02>
 8003696:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800369a:	2202      	movs	r2, #2
 800369c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	fa93 f2a3 	rbit	r2, r3
 80036a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80036b2:	2202      	movs	r2, #2
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	fa93 f2a3 	rbit	r2, r3
 80036c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80036ca:	2202      	movs	r2, #2
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	fa93 f2a3 	rbit	r2, r3
 80036d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80036dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036de:	4b6f      	ldr	r3, [pc, #444]	; (800389c <HAL_RCC_OscConfig+0x930>)
 80036e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80036e6:	2102      	movs	r1, #2
 80036e8:	6019      	str	r1, [r3, #0]
 80036ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	fa93 f1a3 	rbit	r1, r3
 80036f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80036f8:	6019      	str	r1, [r3, #0]
  return result;
 80036fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1b2      	bne.n	8003682 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8158 	beq.w	80039dc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003732:	4b5a      	ldr	r3, [pc, #360]	; (800389c <HAL_RCC_OscConfig+0x930>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d112      	bne.n	8003764 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373e:	4b57      	ldr	r3, [pc, #348]	; (800389c <HAL_RCC_OscConfig+0x930>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4a56      	ldr	r2, [pc, #344]	; (800389c <HAL_RCC_OscConfig+0x930>)
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003748:	61d3      	str	r3, [r2, #28]
 800374a:	4b54      	ldr	r3, [pc, #336]	; (800389c <HAL_RCC_OscConfig+0x930>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003752:	f107 0308 	add.w	r3, r7, #8
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	f107 0308 	add.w	r3, r7, #8
 800375c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003764:	4b4f      	ldr	r3, [pc, #316]	; (80038a4 <HAL_RCC_OscConfig+0x938>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d11a      	bne.n	80037a6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003770:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <HAL_RCC_OscConfig+0x938>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a4b      	ldr	r2, [pc, #300]	; (80038a4 <HAL_RCC_OscConfig+0x938>)
 8003776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377c:	f7fe fb10 	bl	8001da0 <HAL_GetTick>
 8003780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003784:	e009      	b.n	800379a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7fe fb0b 	bl	8001da0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e2e9      	b.n	8003d6e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379a:	4b42      	ldr	r3, [pc, #264]	; (80038a4 <HAL_RCC_OscConfig+0x938>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0ef      	beq.n	8003786 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a6:	1d3b      	adds	r3, r7, #4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x852>
 80037b0:	4b3a      	ldr	r3, [pc, #232]	; (800389c <HAL_RCC_OscConfig+0x930>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a39      	ldr	r2, [pc, #228]	; (800389c <HAL_RCC_OscConfig+0x930>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6213      	str	r3, [r2, #32]
 80037bc:	e02f      	b.n	800381e <HAL_RCC_OscConfig+0x8b2>
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10c      	bne.n	80037e2 <HAL_RCC_OscConfig+0x876>
 80037c8:	4b34      	ldr	r3, [pc, #208]	; (800389c <HAL_RCC_OscConfig+0x930>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4a33      	ldr	r2, [pc, #204]	; (800389c <HAL_RCC_OscConfig+0x930>)
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	6213      	str	r3, [r2, #32]
 80037d4:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_RCC_OscConfig+0x930>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	4a30      	ldr	r2, [pc, #192]	; (800389c <HAL_RCC_OscConfig+0x930>)
 80037da:	f023 0304 	bic.w	r3, r3, #4
 80037de:	6213      	str	r3, [r2, #32]
 80037e0:	e01d      	b.n	800381e <HAL_RCC_OscConfig+0x8b2>
 80037e2:	1d3b      	adds	r3, r7, #4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b05      	cmp	r3, #5
 80037ea:	d10c      	bne.n	8003806 <HAL_RCC_OscConfig+0x89a>
 80037ec:	4b2b      	ldr	r3, [pc, #172]	; (800389c <HAL_RCC_OscConfig+0x930>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4a2a      	ldr	r2, [pc, #168]	; (800389c <HAL_RCC_OscConfig+0x930>)
 80037f2:	f043 0304 	orr.w	r3, r3, #4
 80037f6:	6213      	str	r3, [r2, #32]
 80037f8:	4b28      	ldr	r3, [pc, #160]	; (800389c <HAL_RCC_OscConfig+0x930>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4a27      	ldr	r2, [pc, #156]	; (800389c <HAL_RCC_OscConfig+0x930>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6213      	str	r3, [r2, #32]
 8003804:	e00b      	b.n	800381e <HAL_RCC_OscConfig+0x8b2>
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_RCC_OscConfig+0x930>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4a24      	ldr	r2, [pc, #144]	; (800389c <HAL_RCC_OscConfig+0x930>)
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	6213      	str	r3, [r2, #32]
 8003812:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_RCC_OscConfig+0x930>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4a21      	ldr	r2, [pc, #132]	; (800389c <HAL_RCC_OscConfig+0x930>)
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d06b      	beq.n	8003900 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003828:	f7fe faba 	bl	8001da0 <HAL_GetTick>
 800382c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	e00b      	b.n	800384a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fe fab5 	bl	8001da0 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e291      	b.n	8003d6e <HAL_RCC_OscConfig+0xe02>
 800384a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800384e:	2202      	movs	r2, #2
 8003850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	fa93 f2a3 	rbit	r2, r3
 800385c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003866:	2202      	movs	r2, #2
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	fa93 f2a3 	rbit	r2, r3
 8003874:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003878:	601a      	str	r2, [r3, #0]
  return result;
 800387a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800387e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f043 0302 	orr.w	r3, r3, #2
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d109      	bne.n	80038a8 <HAL_RCC_OscConfig+0x93c>
 8003894:	4b01      	ldr	r3, [pc, #4]	; (800389c <HAL_RCC_OscConfig+0x930>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	e014      	b.n	80038c4 <HAL_RCC_OscConfig+0x958>
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	10908120 	.word	0x10908120
 80038a4:	40007000 	.word	0x40007000
 80038a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80038ac:	2202      	movs	r2, #2
 80038ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	fa93 f2a3 	rbit	r2, r3
 80038ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	4bbb      	ldr	r3, [pc, #748]	; (8003bb0 <HAL_RCC_OscConfig+0xc44>)
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80038c8:	2102      	movs	r1, #2
 80038ca:	6011      	str	r1, [r2, #0]
 80038cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	fa92 f1a2 	rbit	r1, r2
 80038d6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80038da:	6011      	str	r1, [r2, #0]
  return result;
 80038dc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	fab2 f282 	clz	r2, r2
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	f002 021f 	and.w	r2, r2, #31
 80038f2:	2101      	movs	r1, #1
 80038f4:	fa01 f202 	lsl.w	r2, r1, r2
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d099      	beq.n	8003832 <HAL_RCC_OscConfig+0x8c6>
 80038fe:	e063      	b.n	80039c8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003900:	f7fe fa4e 	bl	8001da0 <HAL_GetTick>
 8003904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003908:	e00b      	b.n	8003922 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fe fa49 	bl	8001da0 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e225      	b.n	8003d6e <HAL_RCC_OscConfig+0xe02>
 8003922:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003926:	2202      	movs	r2, #2
 8003928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	fa93 f2a3 	rbit	r2, r3
 8003934:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800393e:	2202      	movs	r2, #2
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	fa93 f2a3 	rbit	r2, r3
 800394c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003950:	601a      	str	r2, [r3, #0]
  return result;
 8003952:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003956:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f043 0302 	orr.w	r3, r3, #2
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d102      	bne.n	8003972 <HAL_RCC_OscConfig+0xa06>
 800396c:	4b90      	ldr	r3, [pc, #576]	; (8003bb0 <HAL_RCC_OscConfig+0xc44>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	e00d      	b.n	800398e <HAL_RCC_OscConfig+0xa22>
 8003972:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003976:	2202      	movs	r2, #2
 8003978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	fa93 f2a3 	rbit	r2, r3
 8003984:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	4b89      	ldr	r3, [pc, #548]	; (8003bb0 <HAL_RCC_OscConfig+0xc44>)
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003992:	2102      	movs	r1, #2
 8003994:	6011      	str	r1, [r2, #0]
 8003996:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	fa92 f1a2 	rbit	r1, r2
 80039a0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80039a4:	6011      	str	r1, [r2, #0]
  return result;
 80039a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	fab2 f282 	clz	r2, r2
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	f002 021f 	and.w	r2, r2, #31
 80039bc:	2101      	movs	r1, #1
 80039be:	fa01 f202 	lsl.w	r2, r1, r2
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1a0      	bne.n	800390a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d0:	4b77      	ldr	r3, [pc, #476]	; (8003bb0 <HAL_RCC_OscConfig+0xc44>)
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	4a76      	ldr	r2, [pc, #472]	; (8003bb0 <HAL_RCC_OscConfig+0xc44>)
 80039d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 81c2 	beq.w	8003d6c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e8:	4b71      	ldr	r3, [pc, #452]	; (8003bb0 <HAL_RCC_OscConfig+0xc44>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	f000 819c 	beq.w	8003d2e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	f040 8114 	bne.w	8003c2a <HAL_RCC_OscConfig+0xcbe>
 8003a02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003a06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	fa93 f2a3 	rbit	r2, r3
 8003a16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a1a:	601a      	str	r2, [r3, #0]
  return result;
 8003a1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	461a      	mov	r2, r3
 8003a34:	2300      	movs	r3, #0
 8003a36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fe f9b2 	bl	8001da0 <HAL_GetTick>
 8003a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a40:	e009      	b.n	8003a56 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a42:	f7fe f9ad 	bl	8001da0 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e18b      	b.n	8003d6e <HAL_RCC_OscConfig+0xe02>
 8003a56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	fa93 f2a3 	rbit	r2, r3
 8003a6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a6e:	601a      	str	r2, [r3, #0]
  return result;
 8003a70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d102      	bne.n	8003a90 <HAL_RCC_OscConfig+0xb24>
 8003a8a:	4b49      	ldr	r3, [pc, #292]	; (8003bb0 <HAL_RCC_OscConfig+0xc44>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	e01b      	b.n	8003ac8 <HAL_RCC_OscConfig+0xb5c>
 8003a90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	fa93 f2a3 	rbit	r2, r3
 8003aa4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	fa93 f2a3 	rbit	r2, r3
 8003abe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	4b3a      	ldr	r3, [pc, #232]	; (8003bb0 <HAL_RCC_OscConfig+0xc44>)
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003acc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ad0:	6011      	str	r1, [r2, #0]
 8003ad2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	fa92 f1a2 	rbit	r1, r2
 8003adc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003ae0:	6011      	str	r1, [r2, #0]
  return result;
 8003ae2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	fab2 f282 	clz	r2, r2
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	f042 0220 	orr.w	r2, r2, #32
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	f002 021f 	and.w	r2, r2, #31
 8003af8:	2101      	movs	r1, #1
 8003afa:	fa01 f202 	lsl.w	r2, r1, r2
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d19e      	bne.n	8003a42 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b04:	4b2a      	ldr	r3, [pc, #168]	; (8003bb0 <HAL_RCC_OscConfig+0xc44>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b0c:	1d3b      	adds	r3, r7, #4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b12:	1d3b      	adds	r3, r7, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	4925      	ldr	r1, [pc, #148]	; (8003bb0 <HAL_RCC_OscConfig+0xc44>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
 8003b20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	fa93 f2a3 	rbit	r2, r3
 8003b34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b38:	601a      	str	r2, [r3, #0]
  return result;
 8003b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b3e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	461a      	mov	r2, r3
 8003b52:	2301      	movs	r3, #1
 8003b54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fe f923 	bl	8001da0 <HAL_GetTick>
 8003b5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b5e:	e009      	b.n	8003b74 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fe f91e 	bl	8001da0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0fc      	b.n	8003d6e <HAL_RCC_OscConfig+0xe02>
 8003b74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	fa93 f2a3 	rbit	r2, r3
 8003b88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b8c:	601a      	str	r2, [r3, #0]
  return result;
 8003b8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCC_OscConfig+0xc48>
 8003ba8:	4b01      	ldr	r3, [pc, #4]	; (8003bb0 <HAL_RCC_OscConfig+0xc44>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	e01e      	b.n	8003bec <HAL_RCC_OscConfig+0xc80>
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	fa93 f2a3 	rbit	r2, r3
 8003bc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	fa93 f2a3 	rbit	r2, r3
 8003be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	4b63      	ldr	r3, [pc, #396]	; (8003d78 <HAL_RCC_OscConfig+0xe0c>)
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003bf0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bf4:	6011      	str	r1, [r2, #0]
 8003bf6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	fa92 f1a2 	rbit	r1, r2
 8003c00:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c04:	6011      	str	r1, [r2, #0]
  return result;
 8003c06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	fab2 f282 	clz	r2, r2
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	f042 0220 	orr.w	r2, r2, #32
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	f002 021f 	and.w	r2, r2, #31
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d09b      	beq.n	8003b60 <HAL_RCC_OscConfig+0xbf4>
 8003c28:	e0a0      	b.n	8003d6c <HAL_RCC_OscConfig+0xe00>
 8003c2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	fa93 f2a3 	rbit	r2, r3
 8003c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c42:	601a      	str	r2, [r3, #0]
  return result;
 8003c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7fe f89e 	bl	8001da0 <HAL_GetTick>
 8003c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c68:	e009      	b.n	8003c7e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c6a:	f7fe f899 	bl	8001da0 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e077      	b.n	8003d6e <HAL_RCC_OscConfig+0xe02>
 8003c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	fa93 f2a3 	rbit	r2, r3
 8003c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c96:	601a      	str	r2, [r3, #0]
  return result;
 8003c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RCC_OscConfig+0xd4c>
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <HAL_RCC_OscConfig+0xe0c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	e01b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd84>
 8003cb8:	f107 0320 	add.w	r3, r7, #32
 8003cbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	f107 0320 	add.w	r3, r7, #32
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	fa93 f2a3 	rbit	r2, r3
 8003ccc:	f107 031c 	add.w	r3, r7, #28
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f107 0318 	add.w	r3, r7, #24
 8003cd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	f107 0318 	add.w	r3, r7, #24
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	fa93 f2a3 	rbit	r2, r3
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <HAL_RCC_OscConfig+0xe0c>)
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	f107 0210 	add.w	r2, r7, #16
 8003cf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cf8:	6011      	str	r1, [r2, #0]
 8003cfa:	f107 0210 	add.w	r2, r7, #16
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	fa92 f1a2 	rbit	r1, r2
 8003d04:	f107 020c 	add.w	r2, r7, #12
 8003d08:	6011      	str	r1, [r2, #0]
  return result;
 8003d0a:	f107 020c 	add.w	r2, r7, #12
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	fab2 f282 	clz	r2, r2
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	f042 0220 	orr.w	r2, r2, #32
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	f002 021f 	and.w	r2, r2, #31
 8003d20:	2101      	movs	r1, #1
 8003d22:	fa01 f202 	lsl.w	r2, r1, r2
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d19e      	bne.n	8003c6a <HAL_RCC_OscConfig+0xcfe>
 8003d2c:	e01e      	b.n	8003d6c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2e:	1d3b      	adds	r3, r7, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e018      	b.n	8003d6e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_RCC_OscConfig+0xe0c>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d44:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d4c:	1d3b      	adds	r3, r7, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d108      	bne.n	8003d68 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000

08003d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b09e      	sub	sp, #120	; 0x78
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e162      	b.n	800405a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d94:	4b90      	ldr	r3, [pc, #576]	; (8003fd8 <HAL_RCC_ClockConfig+0x25c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d910      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b8d      	ldr	r3, [pc, #564]	; (8003fd8 <HAL_RCC_ClockConfig+0x25c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 0207 	bic.w	r2, r3, #7
 8003daa:	498b      	ldr	r1, [pc, #556]	; (8003fd8 <HAL_RCC_ClockConfig+0x25c>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b89      	ldr	r3, [pc, #548]	; (8003fd8 <HAL_RCC_ClockConfig+0x25c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e14a      	b.n	800405a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd0:	4b82      	ldr	r3, [pc, #520]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	497f      	ldr	r1, [pc, #508]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80dc 	beq.w	8003fa8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d13c      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xf6>
 8003df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d102      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xa6>
 8003e1c:	4b6f      	ldr	r3, [pc, #444]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	e00f      	b.n	8003e42 <HAL_RCC_ClockConfig+0xc6>
 8003e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e34:	663b      	str	r3, [r7, #96]	; 0x60
 8003e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e3e:	4b67      	ldr	r3, [pc, #412]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e46:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e4a:	fa92 f2a2 	rbit	r2, r2
 8003e4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e52:	fab2 f282 	clz	r2, r2
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	f042 0220 	orr.w	r2, r2, #32
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	f002 021f 	and.w	r2, r2, #31
 8003e62:	2101      	movs	r1, #1
 8003e64:	fa01 f202 	lsl.w	r2, r1, r2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d17b      	bne.n	8003f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0f3      	b.n	800405a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d13c      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x178>
 8003e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x128>
 8003e9e:	4b4f      	ldr	r3, [pc, #316]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	e00f      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x148>
 8003ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eba:	fa93 f3a3 	rbit	r3, r3
 8003ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec0:	4b46      	ldr	r3, [pc, #280]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ecc:	fa92 f2a2 	rbit	r2, r2
 8003ed0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed4:	fab2 f282 	clz	r2, r2
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	f042 0220 	orr.w	r2, r2, #32
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	f002 021f 	and.w	r2, r2, #31
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d13a      	bne.n	8003f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0b2      	b.n	800405a <HAL_RCC_ClockConfig+0x2de>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d102      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x1a0>
 8003f16:	4b31      	ldr	r3, [pc, #196]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	e00d      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1bc>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	fa93 f3a3 	rbit	r3, r3
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
 8003f28:	2302      	movs	r3, #2
 8003f2a:	623b      	str	r3, [r7, #32]
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	4b29      	ldr	r3, [pc, #164]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	2202      	movs	r2, #2
 8003f3a:	61ba      	str	r2, [r7, #24]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	fa92 f2a2 	rbit	r2, r2
 8003f42:	617a      	str	r2, [r7, #20]
  return result;
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	fab2 f282 	clz	r2, r2
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	f042 0220 	orr.w	r2, r2, #32
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	f002 021f 	and.w	r2, r2, #31
 8003f56:	2101      	movs	r1, #1
 8003f58:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e079      	b.n	800405a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f66:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f023 0203 	bic.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	491a      	ldr	r1, [pc, #104]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f78:	f7fd ff12 	bl	8001da0 <HAL_GetTick>
 8003f7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f80:	f7fd ff0e 	bl	8001da0 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e061      	b.n	800405a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 020c 	and.w	r2, r3, #12
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d1eb      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_ClockConfig+0x25c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d214      	bcs.n	8003fe0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <HAL_RCC_ClockConfig+0x25c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 0207 	bic.w	r2, r3, #7
 8003fbe:	4906      	ldr	r1, [pc, #24]	; (8003fd8 <HAL_RCC_ClockConfig+0x25c>)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <HAL_RCC_ClockConfig+0x25c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e040      	b.n	800405a <HAL_RCC_ClockConfig+0x2de>
 8003fd8:	40022000 	.word	0x40022000
 8003fdc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fec:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <HAL_RCC_ClockConfig+0x2e8>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	491a      	ldr	r1, [pc, #104]	; (8004064 <HAL_RCC_ClockConfig+0x2e8>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800400a:	4b16      	ldr	r3, [pc, #88]	; (8004064 <HAL_RCC_ClockConfig+0x2e8>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4912      	ldr	r1, [pc, #72]	; (8004064 <HAL_RCC_ClockConfig+0x2e8>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800401e:	f000 f829 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 8004022:	4601      	mov	r1, r0
 8004024:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_RCC_ClockConfig+0x2e8>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800402c:	22f0      	movs	r2, #240	; 0xf0
 800402e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	fa92 f2a2 	rbit	r2, r2
 8004036:	60fa      	str	r2, [r7, #12]
  return result;
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	fab2 f282 	clz	r2, r2
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	40d3      	lsrs	r3, r2
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x2ec>)
 8004044:	5cd3      	ldrb	r3, [r2, r3]
 8004046:	fa21 f303 	lsr.w	r3, r1, r3
 800404a:	4a08      	ldr	r2, [pc, #32]	; (800406c <HAL_RCC_ClockConfig+0x2f0>)
 800404c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <HAL_RCC_ClockConfig+0x2f4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd fe60 	bl	8001d18 <HAL_InitTick>
  
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3778      	adds	r7, #120	; 0x78
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	08009e44 	.word	0x08009e44
 800406c:	20000000 	.word	0x20000000
 8004070:	20000028 	.word	0x20000028

08004074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004074:	b480      	push	{r7}
 8004076:	b08b      	sub	sp, #44	; 0x2c
 8004078:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	2300      	movs	r3, #0
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800408e:	4b29      	ldr	r3, [pc, #164]	; (8004134 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b04      	cmp	r3, #4
 800409c:	d002      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0x30>
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0x36>
 80040a2:	e03c      	b.n	800411e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040a6:	623b      	str	r3, [r7, #32]
      break;
 80040a8:	e03c      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80040b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80040b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	fa92 f2a2 	rbit	r2, r2
 80040bc:	607a      	str	r2, [r7, #4]
  return result;
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	fab2 f282 	clz	r2, r2
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	40d3      	lsrs	r3, r2
 80040c8:	4a1c      	ldr	r2, [pc, #112]	; (800413c <HAL_RCC_GetSysClockFreq+0xc8>)
 80040ca:	5cd3      	ldrb	r3, [r2, r3]
 80040cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040ce:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	220f      	movs	r2, #15
 80040d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	fa92 f2a2 	rbit	r2, r2
 80040e0:	60fa      	str	r2, [r7, #12]
  return result;
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	fab2 f282 	clz	r2, r2
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	40d3      	lsrs	r3, r2
 80040ec:	4a14      	ldr	r2, [pc, #80]	; (8004140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80040ee:	5cd3      	ldrb	r3, [r2, r3]
 80040f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040fc:	4a0e      	ldr	r2, [pc, #56]	; (8004138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	fbb2 f2f3 	udiv	r2, r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
 800410c:	e004      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	623b      	str	r3, [r7, #32]
      break;
 800411c:	e002      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004120:	623b      	str	r3, [r7, #32]
      break;
 8004122:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004124:	6a3b      	ldr	r3, [r7, #32]
}
 8004126:	4618      	mov	r0, r3
 8004128:	372c      	adds	r7, #44	; 0x2c
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
 8004138:	007a1200 	.word	0x007a1200
 800413c:	08009e54 	.word	0x08009e54
 8004140:	08009e64 	.word	0x08009e64
 8004144:	003d0900 	.word	0x003d0900

08004148 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b092      	sub	sp, #72	; 0x48
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80d7 	beq.w	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004166:	2300      	movs	r3, #0
 8004168:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416c:	4b4e      	ldr	r3, [pc, #312]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10e      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004178:	4b4b      	ldr	r3, [pc, #300]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	4a4a      	ldr	r2, [pc, #296]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004182:	61d3      	str	r3, [r2, #28]
 8004184:	4b48      	ldr	r3, [pc, #288]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004190:	2301      	movs	r3, #1
 8004192:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004196:	4b45      	ldr	r3, [pc, #276]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d118      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a2:	4b42      	ldr	r3, [pc, #264]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a41      	ldr	r2, [pc, #260]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ae:	f7fd fdf7 	bl	8001da0 <HAL_GetTick>
 80041b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	e008      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b6:	f7fd fdf3 	bl	8001da0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b64      	cmp	r3, #100	; 0x64
 80041c2:	d901      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e12d      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c8:	4b38      	ldr	r3, [pc, #224]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041d4:	4b34      	ldr	r3, [pc, #208]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8084 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d07c      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041f4:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800420c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	461a      	mov	r2, r3
 800421e:	2301      	movs	r3, #1
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004226:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422a:	fa93 f3a3 	rbit	r3, r3
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	461a      	mov	r2, r3
 8004242:	2300      	movs	r3, #0
 8004244:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004246:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800424c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d04b      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004256:	f7fd fda3 	bl	8001da0 <HAL_GetTick>
 800425a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425c:	e00a      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425e:	f7fd fd9f 	bl	8001da0 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f241 3288 	movw	r2, #5000	; 0x1388
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e0d7      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004274:	2302      	movs	r3, #2
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
 8004280:	2302      	movs	r3, #2
 8004282:	623b      	str	r3, [r7, #32]
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	fa93 f3a3 	rbit	r3, r3
 800428a:	61fb      	str	r3, [r7, #28]
  return result;
 800428c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d108      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042a2:	4b01      	ldr	r3, [pc, #4]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	e00d      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40007000 	.word	0x40007000
 80042b0:	10908100 	.word	0x10908100
 80042b4:	2302      	movs	r3, #2
 80042b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	4b5a      	ldr	r3, [pc, #360]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	2202      	movs	r2, #2
 80042c6:	613a      	str	r2, [r7, #16]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	fa92 f2a2 	rbit	r2, r2
 80042ce:	60fa      	str	r2, [r7, #12]
  return result;
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	fab2 f282 	clz	r2, r2
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	f002 021f 	and.w	r2, r2, #31
 80042e2:	2101      	movs	r1, #1
 80042e4:	fa01 f202 	lsl.w	r2, r1, r2
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0b7      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042ee:	4b4f      	ldr	r3, [pc, #316]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	494c      	ldr	r1, [pc, #304]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004300:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004304:	2b01      	cmp	r3, #1
 8004306:	d105      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004308:	4b48      	ldr	r3, [pc, #288]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	4a47      	ldr	r2, [pc, #284]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800430e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004312:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004320:	4b42      	ldr	r3, [pc, #264]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	f023 0203 	bic.w	r2, r3, #3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	493f      	ldr	r1, [pc, #252]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800433e:	4b3b      	ldr	r3, [pc, #236]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	4938      	ldr	r1, [pc, #224]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800434c:	4313      	orrs	r3, r2
 800434e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800435c:	4b33      	ldr	r3, [pc, #204]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	4930      	ldr	r1, [pc, #192]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800437a:	4b2c      	ldr	r3, [pc, #176]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	f023 0210 	bic.w	r2, r3, #16
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	4929      	ldr	r1, [pc, #164]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004398:	4b24      	ldr	r3, [pc, #144]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	4921      	ldr	r1, [pc, #132]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043b6:	4b1d      	ldr	r3, [pc, #116]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	f023 0220 	bic.w	r2, r3, #32
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	491a      	ldr	r1, [pc, #104]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80043d4:	4b15      	ldr	r3, [pc, #84]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	4912      	ldr	r1, [pc, #72]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d008      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80043f2:	4b0e      	ldr	r3, [pc, #56]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	490b      	ldr	r1, [pc, #44]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	4903      	ldr	r1, [pc, #12]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3748      	adds	r7, #72	; 0x48
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000

08004430 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e073      	b.n	800452a <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fc ffcb 	bl	800141c <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004494:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6819      	ldr	r1, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80044bc:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6859      	ldr	r1, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 80044d0:	4b18      	ldr	r3, [pc, #96]	; (8004534 <HAL_SDADC_Init+0x104>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d00f      	beq.n	8004500 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <HAL_SDADC_Init+0x104>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <HAL_SDADC_Init+0x104>)
 80044e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ea:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <HAL_SDADC_Init+0x104>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	490f      	ldr	r1, [pc, #60]	; (8004534 <HAL_SDADC_Init+0x104>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 80044fa:	2002      	movs	r0, #2
 80044fc:	f7fd fc5c 	bl	8001db8 <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8004510:	bf00      	nop
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f8      	bne.n	8004512 <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40016000 	.word	0x40016000

08004538 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454e:	2b01      	cmp	r3, #1
 8004550:	d002      	beq.n	8004558 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
 8004556:	e025      	b.n	80045a4 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fa7b 	bl	8004a54 <SDADC_EnterInitMode>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d006      	beq.n	8004572 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	22ff      	movs	r2, #255	; 0xff
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	75fb      	strb	r3, [r7, #23]
 8004570:	e018      	b.n	80045a4 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 800457c:	4413      	add	r3, r2
 800457e:	3320      	adds	r3, #32
 8004580:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 800458a:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8004590:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004598:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 800459a:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 800459c:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fa7b 	bl	8004a9a <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <HAL_SDADC_SelectRegularTrigger>:
  *            @arg SDADC_SOFTWARE_TRIGGER : Software trigger.
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectRegularTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a12      	ldr	r2, [pc, #72]	; (800460c <HAL_SDADC_SelectRegularTrigger+0x5c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d105      	bne.n	80045d4 <HAL_SDADC_SelectRegularTrigger+0x24>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d102      	bne.n	80045d4 <HAL_SDADC_SelectRegularTrigger+0x24>
  {
    status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
 80045d2:	e014      	b.n	80045fe <HAL_SDADC_SelectRegularTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d009      	beq.n	80045f2 <HAL_SDADC_SelectRegularTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d004      	beq.n	80045f2 <HAL_SDADC_SelectRegularTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_INJ))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d103      	bne.n	80045fa <HAL_SDADC_SelectRegularTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->RegularTrigger = Trigger;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	629a      	str	r2, [r3, #40]	; 0x28
 80045f8:	e001      	b.n	80045fe <HAL_SDADC_SelectRegularTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;    
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40016000 	.word	0x40016000

08004610 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004624:	2b01      	cmp	r3, #1
 8004626:	d12c      	bne.n	8004682 <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fa13 	bl	8004a54 <SDADC_EnterInitMode>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d006      	beq.n	8004642 <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	22ff      	movs	r2, #255	; 0xff
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	e021      	b.n	8004686 <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0206 	bic.w	r2, r2, #6
 8004650:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6859      	ldr	r1, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fa19 	bl	8004a9a <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0210 	orr.w	r2, r2, #16
 8004676:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004680:	e001      	b.n	8004686 <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d001      	beq.n	80046a8 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e028      	b.n	80046fa <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 80046a8:	f7fd fb7a 	bl	8001da0 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 80046ae:	e010      	b.n	80046d2 <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d00c      	beq.n	80046d2 <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 80046b8:	f7fd fb72 	bl	8001da0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d302      	bcc.n	80046ce <HAL_SDADC_PollForCalibEvent+0x3e>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e013      	b.n	80046fa <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d1e7      	bne.n	80046b0 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 80046f8:	2300      	movs	r3, #0
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_SDADC_Start_DMA>:
  * @param  Length The length of data to be transferred from SDADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start_DMA(SDADC_HandleTypeDef *hsdadc, uint32_t *pData,
                                      uint32_t Length)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(pData != ((void*) 0));
  assert_param(Length != 0UL);

  /* Check that DMA is not enabled for injected conversion */
  if((hsdadc->Instance->CR1 & SDADC_CR1_JDMAEN) == SDADC_CR1_JDMAEN)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471e:	d102      	bne.n	8004726 <HAL_SDADC_Start_DMA+0x22>
  {
    status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]
 8004724:	e061      	b.n	80047ea <HAL_SDADC_Start_DMA+0xe6>
  }
  /* Check parameters compatibility */
  else if((hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10e      	bne.n	800474c <HAL_SDADC_Start_DMA+0x48>
          (hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	699b      	ldr	r3, [r3, #24]
  else if((hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <HAL_SDADC_Start_DMA+0x48>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	699b      	ldr	r3, [r3, #24]
          (hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800473c:	2b00      	cmp	r3, #0
 800473e:	d105      	bne.n	800474c <HAL_SDADC_Start_DMA+0x48>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d002      	beq.n	800474c <HAL_SDADC_Start_DMA+0x48>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
 800474a:	e04e      	b.n	80047ea <HAL_SDADC_Start_DMA+0xe6>
  }
  else if((hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <HAL_SDADC_Start_DMA+0x68>
          (hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	699b      	ldr	r3, [r3, #24]
  else if((hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8004758:	2b00      	cmp	r3, #0
 800475a:	d107      	bne.n	800476c <HAL_SDADC_Start_DMA+0x68>
          (hsdadc->hdma->Init.Mode == DMA_CIRCULAR))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	699b      	ldr	r3, [r3, #24]
          (hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004762:	2b20      	cmp	r3, #32
 8004764:	d102      	bne.n	800476c <HAL_SDADC_Start_DMA+0x68>
  {
    status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
 800476a:	e03e      	b.n	80047ea <HAL_SDADC_Start_DMA+0xe6>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004772:	2b01      	cmp	r3, #1
 8004774:	d004      	beq.n	8004780 <HAL_SDADC_Start_DMA+0x7c>
          (hsdadc->State == HAL_SDADC_STATE_INJ))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800477c:	2b04      	cmp	r3, #4
 800477e:	d132      	bne.n	80047e6 <HAL_SDADC_Start_DMA+0xe2>
  {
    /* Set callbacks on DMA handler */
    hsdadc->hdma->XferCpltCallback = SDADC_DMARegularConvCplt;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	4a1b      	ldr	r2, [pc, #108]	; (80047f4 <HAL_SDADC_Start_DMA+0xf0>)
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
    hsdadc->hdma->XferErrorCallback = SDADC_DMAError;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <HAL_SDADC_Start_DMA+0xf4>)
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
    if(hsdadc->hdma->Init.Mode == DMA_CIRCULAR)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b20      	cmp	r3, #32
 8004798:	d103      	bne.n	80047a2 <HAL_SDADC_Start_DMA+0x9e>
    {
      hsdadc->hdma->XferHalfCpltCallback = SDADC_DMARegularHalfConvCplt;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	4a17      	ldr	r2, [pc, #92]	; (80047fc <HAL_SDADC_Start_DMA+0xf8>)
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Set RDMAEN bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 |= SDADC_CR1_RDMAEN;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80047b0:	601a      	str	r2, [r3, #0]

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->RDATAR, \
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6958      	ldr	r0, [r3, #20]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3364      	adds	r3, #100	; 0x64
 80047bc:	4619      	mov	r1, r3
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f7fd fc73 	bl	80020ac <HAL_DMA_Start_IT>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d006      	beq.n	80047da <HAL_SDADC_Start_DMA+0xd6>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	22ff      	movs	r2, #255	; 0xff
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->RDATAR, \
 80047d8:	e007      	b.n	80047ea <HAL_SDADC_Start_DMA+0xe6>
    }
    else
    {
      /* Start regular conversion */
      status = SDADC_RegConvStart(hsdadc);
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 f96f 	bl	8004abe <SDADC_RegConvStart>
 80047e0:	4603      	mov	r3, r0
 80047e2:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->RDATAR, \
 80047e4:	e001      	b.n	80047ea <HAL_SDADC_Start_DMA+0xe6>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	08004a17 	.word	0x08004a17
 80047f8:	08004a33 	.word	0x08004a33
 80047fc:	080049fb 	.word	0x080049fb

08004800 <HAL_SDADC_IRQHandler>:
  * @brief  This function handles the SDADC interrupts.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
void HAL_SDADC_IRQHandler(SDADC_HandleTypeDef* hsdadc)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hsdadc->Instance->ISR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	60fb      	str	r3, [r7, #12]
    
  /* Check if end of regular conversion */
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b08      	cmp	r3, #8
 800481c:	d125      	bne.n	800486a <HAL_SDADC_IRQHandler+0x6a>
     ((tmp_isr & SDADC_ISR_REOCF) == SDADC_ISR_REOCF))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 0308 	and.w	r3, r3, #8
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8004824:	2b00      	cmp	r3, #0
 8004826:	d020      	beq.n	800486a <HAL_SDADC_IRQHandler+0x6a>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ConvCpltCallback(hsdadc);
#else
    HAL_SDADC_ConvCpltCallback(hsdadc);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fd f83d 	bl	80018a8 <HAL_SDADC_ConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* End of conversion if mode is not continuous and software trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 80b1 	bne.w	800499a <HAL_SDADC_IRQHandler+0x19a>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 80ac 	bne.w	800499a <HAL_SDADC_IRQHandler+0x19a>
    {
      /* Clear REOCIE and ROVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0218 	bic.w	r2, r2, #24
 8004850:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8004858:	2b03      	cmp	r3, #3
 800485a:	d101      	bne.n	8004860 <HAL_SDADC_IRQHandler+0x60>
 800485c:	2201      	movs	r2, #1
 800485e:	e000      	b.n	8004862 <HAL_SDADC_IRQHandler+0x62>
 8004860:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004868:	e097      	b.n	800499a <HAL_SDADC_IRQHandler+0x19a>
    }
  }
  /* Check if end of injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d136      	bne.n	80048e6 <HAL_SDADC_IRQHandler+0xe6>
          ((tmp_isr & SDADC_ISR_JEOCF) == SDADC_ISR_JEOCF))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0302 	and.w	r3, r3, #2
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 800487e:	2b00      	cmp	r3, #0
 8004880:	d031      	beq.n	80048e6 <HAL_SDADC_IRQHandler+0xe6>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->InjectedConvCpltCallback(hsdadc);
#else
    HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8a5 	bl	80049d2 <HAL_SDADC_InjectedConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	1e5a      	subs	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	625a      	str	r2, [r3, #36]	; 0x24
    if(hsdadc->InjConvRemaining ==0UL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <HAL_SDADC_IRQHandler+0xa2>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1a      	ldr	r2, [r3, #32]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* End of conversion if mode is not continuous, software trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d179      	bne.n	800499e <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d175      	bne.n	800499e <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d16f      	bne.n	800499e <HAL_SDADC_IRQHandler+0x19e>
    {
      /* Clear JEOCIE and JOVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0206 	bic.w	r2, r2, #6
 80048cc:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d101      	bne.n	80048dc <HAL_SDADC_IRQHandler+0xdc>
 80048d8:	2201      	movs	r2, #1
 80048da:	e000      	b.n	80048de <HAL_SDADC_IRQHandler+0xde>
 80048dc:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80048e4:	e05b      	b.n	800499e <HAL_SDADC_IRQHandler+0x19e>
    }
  }
  /* Check if end of calibration */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d11c      	bne.n	800492e <HAL_SDADC_IRQHandler+0x12e>
          ((tmp_isr & SDADC_ISR_EOCALF) == SDADC_ISR_EOCALF))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0301 	and.w	r3, r3, #1
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d017      	beq.n	800492e <HAL_SDADC_IRQHandler+0x12e>
  {
    /* Clear EOCALIE bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_EOCALIE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0201 	bic.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]

    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0201 	orr.w	r2, r2, #1
 800491c:	60da      	str	r2, [r3, #12]

    /* Call calibration callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->CalibrationCpltCallback(hsdadc);
#else
    HAL_SDADC_CalibrationCpltCallback(hsdadc);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f843 	bl	80049aa <HAL_SDADC_CalibrationCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update SDADC state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800492c:	e038      	b.n	80049a0 <HAL_SDADC_IRQHandler+0x1a0>
  }
  /* Check if overrun occurs during regular conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b10      	cmp	r3, #16
 800493a:	d113      	bne.n	8004964 <HAL_SDADC_IRQHandler+0x164>
          ((tmp_isr & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0310 	and.w	r3, r3, #16
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00e      	beq.n	8004964 <HAL_SDADC_IRQHandler+0x164>
  {
    /* Set CLRROVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0210 	orr.w	r2, r2, #16
 8004954:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f842 	bl	80049e6 <HAL_SDADC_ErrorCallback>
 8004962:	e01d      	b.n	80049a0 <HAL_SDADC_IRQHandler+0x1a0>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  }
  /* Check if overrun occurs during injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b04      	cmp	r3, #4
 8004970:	d117      	bne.n	80049a2 <HAL_SDADC_IRQHandler+0x1a2>
          ((tmp_isr & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0304 	and.w	r3, r3, #4
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 8004978:	2b00      	cmp	r3, #0
 800497a:	d012      	beq.n	80049a2 <HAL_SDADC_IRQHandler+0x1a2>
  {
    /* Set CLRJOVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0204 	orr.w	r2, r2, #4
 800498a:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f827 	bl	80049e6 <HAL_SDADC_ErrorCallback>
  else
  {
    /* No additional IRQ source */
  }
  
  return;
 8004998:	e002      	b.n	80049a0 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800499e:	bf00      	nop
  return;
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
}
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_SDADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_CalibrationCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_CalibrationCpltCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_SDADC_ConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ConvHalfCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_SDADC_InjectedConvCpltCallback>:
            using HAL_SDADC_InjectedGetValue or HAL_SDADC_InjectedMultiModeGetValue.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_InjectedConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_InjectedConvCpltCallback could be implemented in the user file.
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <SDADC_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void SDADC_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Get SDADC handle */
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
  hsdadc->ConvHalfCpltCallback(hsdadc);
#else
  HAL_SDADC_ConvHalfCpltCallback(hsdadc);
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7ff ffd8 	bl	80049be <HAL_SDADC_ConvHalfCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
}
 8004a0e:	bf00      	nop
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <SDADC_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void SDADC_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Get SDADC handle */
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
  hsdadc->ConvCpltCallback(hsdadc);
#else
  HAL_SDADC_ConvCpltCallback(hsdadc);
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7fc ff3f 	bl	80018a8 <HAL_SDADC_ConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <SDADC_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void SDADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Get SDADC handle */
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hsdadc->ErrorCode = SDADC_ERROR_DMA;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2203      	movs	r2, #3
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
  hsdadc->ErrorCallback(hsdadc);
#else
  HAL_SDADC_ErrorCallback(hsdadc);
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff ffcd 	bl	80049e6 <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8004a6c:	f7fd f998 	bl	8001da0 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8004a72:	e008      	b.n	8004a86 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8004a74:	f7fd f994 	bl	8001da0 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2bc8      	cmp	r3, #200	; 0xc8
 8004a80:	d901      	bls.n	8004a86 <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e005      	b.n	8004a92 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	daf1      	bge.n	8004a74 <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ab0:	601a      	str	r2, [r3, #0]
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d108      	bne.n	8004ae4 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	e017      	b.n	8004b14 <SDADC_RegConvStart+0x56>
  }
  else /* synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ffb5 	bl	8004a54 <SDADC_EnterInitMode>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d006      	beq.n	8004afe <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	22ff      	movs	r2, #255	; 0xff
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	73fb      	strb	r3, [r7, #15]
 8004afc:	e00a      	b.n	8004b14 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b0c:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff ffc3 	bl	8004a9a <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <SDADC_RegConvStart+0x6a>
 8004b24:	2203      	movs	r2, #3
 8004b26:	e000      	b.n	8004b2a <SDADC_RegConvStart+0x6c>
 8004b28:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e01d      	b.n	8004b88 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d106      	bne.n	8004b66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7fc fceb 	bl	800153c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3304      	adds	r3, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f000 fa01 	bl	8004f80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e01d      	b.n	8004bde <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f815 	bl	8004be6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f000 f9d6 	bl	8004f80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
	...

08004bfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	6839      	ldr	r1, [r7, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fc43 	bl	800549a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <HAL_TIM_PWM_Start+0x7c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x36>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <HAL_TIM_PWM_Start+0x80>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x36>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a14      	ldr	r2, [pc, #80]	; (8004c80 <HAL_TIM_PWM_Start+0x84>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d101      	bne.n	8004c36 <HAL_TIM_PWM_Start+0x3a>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <HAL_TIM_PWM_Start+0x3c>
 8004c36:	2300      	movs	r3, #0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c4a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b06      	cmp	r3, #6
 8004c5c:	d007      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x72>
  {
    __HAL_TIM_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800

08004c84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e0b4      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b0c      	cmp	r3, #12
 8004cb2:	f200 809f 	bhi.w	8004df4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004cb6:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004df5 	.word	0x08004df5
 8004cc4:	08004df5 	.word	0x08004df5
 8004cc8:	08004df5 	.word	0x08004df5
 8004ccc:	08004d31 	.word	0x08004d31
 8004cd0:	08004df5 	.word	0x08004df5
 8004cd4:	08004df5 	.word	0x08004df5
 8004cd8:	08004df5 	.word	0x08004df5
 8004cdc:	08004d73 	.word	0x08004d73
 8004ce0:	08004df5 	.word	0x08004df5
 8004ce4:	08004df5 	.word	0x08004df5
 8004ce8:	08004df5 	.word	0x08004df5
 8004cec:	08004db3 	.word	0x08004db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 f9dc 	bl	80050b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0208 	orr.w	r2, r2, #8
 8004d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0204 	bic.w	r2, r2, #4
 8004d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6999      	ldr	r1, [r3, #24]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	619a      	str	r2, [r3, #24]
      break;
 8004d2e:	e062      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fa36 	bl	80051a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6999      	ldr	r1, [r3, #24]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	021a      	lsls	r2, r3, #8
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	619a      	str	r2, [r3, #24]
      break;
 8004d70:	e041      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fa77 	bl	800526c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0208 	orr.w	r2, r2, #8
 8004d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0204 	bic.w	r2, r2, #4
 8004d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69d9      	ldr	r1, [r3, #28]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	61da      	str	r2, [r3, #28]
      break;
 8004db0:	e021      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fa95 	bl	80052e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69d9      	ldr	r1, [r3, #28]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	021a      	lsls	r2, r3, #8
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	61da      	str	r2, [r3, #28]
      break;
 8004df2:	e000      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004df4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_TIM_ConfigClockSource+0x18>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e0a6      	b.n	8004f76 <HAL_TIM_ConfigClockSource+0x166>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d067      	beq.n	8004f30 <HAL_TIM_ConfigClockSource+0x120>
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d80b      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x6c>
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d073      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0x140>
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d802      	bhi.n	8004e72 <HAL_TIM_ConfigClockSource+0x62>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d06f      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e70:	e078      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d06c      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0x140>
 8004e76:	2b30      	cmp	r3, #48	; 0x30
 8004e78:	d06a      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e7a:	e073      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e7c:	2b70      	cmp	r3, #112	; 0x70
 8004e7e:	d00d      	beq.n	8004e9c <HAL_TIM_ConfigClockSource+0x8c>
 8004e80:	2b70      	cmp	r3, #112	; 0x70
 8004e82:	d804      	bhi.n	8004e8e <HAL_TIM_ConfigClockSource+0x7e>
 8004e84:	2b50      	cmp	r3, #80	; 0x50
 8004e86:	d033      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0xe0>
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d041      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e8c:	e06a      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e92:	d066      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x152>
 8004e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e98:	d017      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e9a:	e063      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	6899      	ldr	r1, [r3, #8]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f000 fad5 	bl	800545a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ebe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	609a      	str	r2, [r3, #8]
      break;
 8004ec8:	e04c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6899      	ldr	r1, [r3, #8]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f000 fabe 	bl	800545a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eec:	609a      	str	r2, [r3, #8]
      break;
 8004eee:	e039      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6859      	ldr	r1, [r3, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	461a      	mov	r2, r3
 8004efe:	f000 fa32 	bl	8005366 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2150      	movs	r1, #80	; 0x50
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fa8b 	bl	8005424 <TIM_ITRx_SetConfig>
      break;
 8004f0e:	e029      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6859      	ldr	r1, [r3, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	f000 fa51 	bl	80053c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2160      	movs	r1, #96	; 0x60
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fa7b 	bl	8005424 <TIM_ITRx_SetConfig>
      break;
 8004f2e:	e019      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	6859      	ldr	r1, [r3, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f000 fa12 	bl	8005366 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2140      	movs	r1, #64	; 0x40
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fa6b 	bl	8005424 <TIM_ITRx_SetConfig>
      break;
 8004f4e:	e009      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f000 fa62 	bl	8005424 <TIM_ITRx_SetConfig>
      break;
 8004f60:	e000      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f96:	d00f      	beq.n	8004fb8 <TIM_Base_SetConfig+0x38>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a3c      	ldr	r2, [pc, #240]	; (800508c <TIM_Base_SetConfig+0x10c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <TIM_Base_SetConfig+0x38>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3b      	ldr	r2, [pc, #236]	; (8005090 <TIM_Base_SetConfig+0x110>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d007      	beq.n	8004fb8 <TIM_Base_SetConfig+0x38>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3a      	ldr	r2, [pc, #232]	; (8005094 <TIM_Base_SetConfig+0x114>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_Base_SetConfig+0x38>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a39      	ldr	r2, [pc, #228]	; (8005098 <TIM_Base_SetConfig+0x118>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d108      	bne.n	8004fca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d027      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	; (800508c <TIM_Base_SetConfig+0x10c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d023      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2c      	ldr	r2, [pc, #176]	; (8005090 <TIM_Base_SetConfig+0x110>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01f      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2b      	ldr	r2, [pc, #172]	; (8005094 <TIM_Base_SetConfig+0x114>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d01b      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2b      	ldr	r2, [pc, #172]	; (800509c <TIM_Base_SetConfig+0x11c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d017      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2a      	ldr	r2, [pc, #168]	; (80050a0 <TIM_Base_SetConfig+0x120>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <TIM_Base_SetConfig+0x124>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a28      	ldr	r2, [pc, #160]	; (80050a8 <TIM_Base_SetConfig+0x128>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a27      	ldr	r2, [pc, #156]	; (80050ac <TIM_Base_SetConfig+0x12c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <TIM_Base_SetConfig+0x130>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_Base_SetConfig+0xa2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <TIM_Base_SetConfig+0x118>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d108      	bne.n	8005034 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <TIM_Base_SetConfig+0x128>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_Base_SetConfig+0xf0>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a12      	ldr	r2, [pc, #72]	; (80050ac <TIM_Base_SetConfig+0x12c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_Base_SetConfig+0xf0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a11      	ldr	r2, [pc, #68]	; (80050b0 <TIM_Base_SetConfig+0x130>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d103      	bne.n	8005078 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	615a      	str	r2, [r3, #20]
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40015c00 	.word	0x40015c00
 800509c:	40001800 	.word	0x40001800
 80050a0:	40001c00 	.word	0x40001c00
 80050a4:	40002000 	.word	0x40002000
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800

080050b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 0302 	bic.w	r3, r3, #2
 80050fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a24      	ldr	r2, [pc, #144]	; (800519c <TIM_OC1_SetConfig+0xe8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d007      	beq.n	8005120 <TIM_OC1_SetConfig+0x6c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <TIM_OC1_SetConfig+0xec>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_OC1_SetConfig+0x6c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <TIM_OC1_SetConfig+0xf0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10c      	bne.n	800513a <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0308 	bic.w	r3, r3, #8
 8005126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a17      	ldr	r2, [pc, #92]	; (800519c <TIM_OC1_SetConfig+0xe8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <TIM_OC1_SetConfig+0x9e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a16      	ldr	r2, [pc, #88]	; (80051a0 <TIM_OC1_SetConfig+0xec>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <TIM_OC1_SetConfig+0x9e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <TIM_OC1_SetConfig+0xf0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d111      	bne.n	8005176 <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	621a      	str	r2, [r3, #32]
}
 8005190:	bf00      	nop
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400
 80051a4:	40014800 	.word	0x40014800

080051a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f023 0210 	bic.w	r2, r3, #16
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f023 0320 	bic.w	r3, r3, #32
 80051f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a17      	ldr	r2, [pc, #92]	; (8005260 <TIM_OC2_SetConfig+0xb8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_OC2_SetConfig+0x70>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a16      	ldr	r2, [pc, #88]	; (8005264 <TIM_OC2_SetConfig+0xbc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC2_SetConfig+0x70>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a15      	ldr	r2, [pc, #84]	; (8005268 <TIM_OC2_SetConfig+0xc0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d10f      	bne.n	8005238 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800521e:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	621a      	str	r2, [r3, #32]
}
 80052dc:	bf00      	nop
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	031b      	lsls	r3, r3, #12
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005366:	b480      	push	{r7}
 8005368:	b087      	sub	sp, #28
 800536a:	af00      	add	r7, sp, #0
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f023 0201 	bic.w	r2, r3, #1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f023 030a 	bic.w	r3, r3, #10
 80053a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	621a      	str	r2, [r3, #32]
}
 80053b8:	bf00      	nop
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f023 0210 	bic.w	r2, r3, #16
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	031b      	lsls	r3, r3, #12
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005400:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	621a      	str	r2, [r3, #32]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	f043 0307 	orr.w	r3, r3, #7
 8005446:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	609a      	str	r2, [r3, #8]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800545a:	b480      	push	{r7}
 800545c:	b087      	sub	sp, #28
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	607a      	str	r2, [r7, #4]
 8005466:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005474:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	021a      	lsls	r2, r3, #8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	431a      	orrs	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4313      	orrs	r3, r2
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	609a      	str	r2, [r3, #8]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800549a:	b480      	push	{r7}
 800549c:	b087      	sub	sp, #28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	2201      	movs	r2, #1
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	401a      	ands	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1a      	ldr	r2, [r3, #32]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	431a      	orrs	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	621a      	str	r2, [r3, #32]
}
 80054d8:	bf00      	nop
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e055      	b.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d01d      	beq.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d018      	beq.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1a      	ldr	r2, [pc, #104]	; (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d013      	beq.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00e      	beq.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d009      	beq.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a14      	ldr	r2, [pc, #80]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d10c      	bne.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005582:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	4313      	orrs	r3, r2
 800558c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40001800 	.word	0x40001800
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40015c00 	.word	0x40015c00

080055cc <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	7c1b      	ldrb	r3, [r3, #16]
 80055da:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055e2:	461a      	mov	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 fe88 	bl	8007310 <memset>
}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af02      	add	r7, sp, #8
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
 8005614:	4613      	mov	r3, r2
 8005616:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	7c1b      	ldrb	r3, [r3, #16]
 800561e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005628:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	b29b      	uxth	r3, r3
 800562e:	89ba      	ldrh	r2, [r7, #12]
 8005630:	fb12 f303 	smulbb	r3, r2, r3
 8005634:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8005636:	89bb      	ldrh	r3, [r7, #12]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800563c:	89bb      	ldrh	r3, [r7, #12]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	4413      	add	r3, r2
 8005642:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8005644:	7bf9      	ldrb	r1, [r7, #15]
 8005646:	78ba      	ldrb	r2, [r7, #2]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	460b      	mov	r3, r1
 800564e:	2100      	movs	r1, #0
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 fd64 	bl	800711e <u8x8_DrawTile>
}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005670:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005678:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	7c5b      	ldrb	r3, [r3, #17]
 8005680:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8005682:	7bba      	ldrb	r2, [r7, #14]
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff ffbd 	bl	8005608 <u8g2_send_tile_row>
    src_row++;
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	3301      	adds	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8005694:	7bbb      	ldrb	r3, [r7, #14]
 8005696:	3301      	adds	r3, #1
 8005698:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800569a:	7bfa      	ldrb	r2, [r7, #15]
 800569c:	7b7b      	ldrb	r3, [r7, #13]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d203      	bcs.n	80056aa <u8g2_send_buffer+0x4c>
 80056a2:	7bba      	ldrb	r2, [r7, #14]
 80056a4:	7b3b      	ldrb	r3, [r7, #12]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d3eb      	bcc.n	8005682 <u8g2_send_buffer+0x24>
}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	78fa      	ldrb	r2, [r7, #3]
 80056c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff ff69 	bl	80055cc <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80056fa:	2100      	movs	r1, #0
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff ffd8 	bl	80056b2 <u8g2_SetBufferCurrTileRow>
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff ffa3 	bl	800565e <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800571e:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	4413      	add	r3, r2
 800572a:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	7c5b      	ldrb	r3, [r3, #17]
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	429a      	cmp	r2, r3
 8005736:	d304      	bcc.n	8005742 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f001 fd41 	bl	80071c0 <u8x8_RefreshDisplay>
    return 0;
 800573e:	2300      	movs	r3, #0
 8005740:	e00d      	b.n	800575e <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ff3d 	bl	80055cc <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff ffab 	bl	80056b2 <u8g2_SetBufferCurrTileRow>
  return 1;
 800575c:	2301      	movs	r3, #1
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	4608      	mov	r0, r1
 8005770:	4611      	mov	r1, r2
 8005772:	461a      	mov	r2, r3
 8005774:	4603      	mov	r3, r0
 8005776:	70fb      	strb	r3, [r7, #3]
 8005778:	460b      	mov	r3, r1
 800577a:	70bb      	strb	r3, [r7, #2]
 800577c:	4613      	mov	r3, r2
 800577e:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8005780:	7d3b      	ldrb	r3, [r7, #20]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d017      	beq.n	80057ba <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 800578a:	787a      	ldrb	r2, [r7, #1]
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	4413      	add	r3, r2
 8005790:	b2d9      	uxtb	r1, r3
 8005792:	7c3a      	ldrb	r2, [r7, #16]
 8005794:	78bb      	ldrb	r3, [r7, #2]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 ffab 	bl	80066f8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 80057a2:	787a      	ldrb	r2, [r7, #1]
 80057a4:	78bb      	ldrb	r3, [r7, #2]
 80057a6:	4413      	add	r3, r2
 80057a8:	b2d9      	uxtb	r1, r3
 80057aa:	7c3a      	ldrb	r2, [r7, #16]
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 ff9f 	bl	80066f8 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 80057ba:	7d3b      	ldrb	r3, [r7, #20]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d017      	beq.n	80057f4 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 80057c4:	787a      	ldrb	r2, [r7, #1]
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	b2d9      	uxtb	r1, r3
 80057cc:	7c3a      	ldrb	r2, [r7, #16]
 80057ce:	78bb      	ldrb	r3, [r7, #2]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 ff8e 	bl	80066f8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 80057dc:	787a      	ldrb	r2, [r7, #1]
 80057de:	78bb      	ldrb	r3, [r7, #2]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	b2d9      	uxtb	r1, r3
 80057e4:	7c3a      	ldrb	r2, [r7, #16]
 80057e6:	78fb      	ldrb	r3, [r7, #3]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 ff82 	bl	80066f8 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80057f4:	7d3b      	ldrb	r3, [r7, #20]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d017      	beq.n	800582e <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80057fe:	787a      	ldrb	r2, [r7, #1]
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	4413      	add	r3, r2
 8005804:	b2d9      	uxtb	r1, r3
 8005806:	7c3a      	ldrb	r2, [r7, #16]
 8005808:	78bb      	ldrb	r3, [r7, #2]
 800580a:	4413      	add	r3, r2
 800580c:	b2db      	uxtb	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 ff71 	bl	80066f8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8005816:	787a      	ldrb	r2, [r7, #1]
 8005818:	78bb      	ldrb	r3, [r7, #2]
 800581a:	4413      	add	r3, r2
 800581c:	b2d9      	uxtb	r1, r3
 800581e:	7c3a      	ldrb	r2, [r7, #16]
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	4413      	add	r3, r2
 8005824:	b2db      	uxtb	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 ff65 	bl	80066f8 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 800582e:	7d3b      	ldrb	r3, [r7, #20]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d017      	beq.n	8005868 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8005838:	787a      	ldrb	r2, [r7, #1]
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	b2d9      	uxtb	r1, r3
 8005840:	7c3a      	ldrb	r2, [r7, #16]
 8005842:	78bb      	ldrb	r3, [r7, #2]
 8005844:	4413      	add	r3, r2
 8005846:	b2db      	uxtb	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 ff54 	bl	80066f8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8005850:	787a      	ldrb	r2, [r7, #1]
 8005852:	78bb      	ldrb	r3, [r7, #2]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	b2d9      	uxtb	r1, r3
 8005858:	7c3a      	ldrb	r2, [r7, #16]
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	4413      	add	r3, r2
 800585e:	b2db      	uxtb	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 ff48 	bl	80066f8 <u8g2_DrawPixel>
    }
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af02      	add	r7, sp, #8
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	4608      	mov	r0, r1
 800587a:	4611      	mov	r1, r2
 800587c:	461a      	mov	r2, r3
 800587e:	4603      	mov	r3, r0
 8005880:	70fb      	strb	r3, [r7, #3]
 8005882:	460b      	mov	r3, r1
 8005884:	70bb      	strb	r3, [r7, #2]
 8005886:	4613      	mov	r3, r2
 8005888:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 800588e:	7bfa      	ldrb	r2, [r7, #15]
 8005890:	787b      	ldrb	r3, [r7, #1]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	b2db      	uxtb	r3, r3
 8005896:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 8005898:	2301      	movs	r3, #1
 800589a:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 80058a0:	7b7a      	ldrb	r2, [r7, #13]
 80058a2:	787b      	ldrb	r3, [r7, #1]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 80058aa:	7b7b      	ldrb	r3, [r7, #13]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	737b      	strb	r3, [r7, #13]
    x = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	733b      	strb	r3, [r7, #12]
    y = rad;
 80058b6:	787b      	ldrb	r3, [r7, #1]
 80058b8:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 80058ba:	78f8      	ldrb	r0, [r7, #3]
 80058bc:	7afa      	ldrb	r2, [r7, #11]
 80058be:	7b39      	ldrb	r1, [r7, #12]
 80058c0:	7e3b      	ldrb	r3, [r7, #24]
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	78bb      	ldrb	r3, [r7, #2]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	4603      	mov	r3, r0
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff ff4b 	bl	8005766 <u8g2_draw_circle_section>
    
    while ( x < y )
 80058d0:	e026      	b.n	8005920 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 80058d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	db0b      	blt.n	80058f2 <u8g2_draw_circle+0x82>
      {
        y--;
 80058da:	7afb      	ldrb	r3, [r7, #11]
 80058dc:	3b01      	subs	r3, #1
 80058de:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 80058e0:	7b7b      	ldrb	r3, [r7, #13]
 80058e2:	3302      	adds	r3, #2
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 80058e8:	7bfa      	ldrb	r2, [r7, #15]
 80058ea:	7b7b      	ldrb	r3, [r7, #13]
 80058ec:	4413      	add	r3, r2
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 80058f2:	7b3b      	ldrb	r3, [r7, #12]
 80058f4:	3301      	adds	r3, #1
 80058f6:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	3302      	adds	r3, #2
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 8005900:	7bfa      	ldrb	r2, [r7, #15]
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	4413      	add	r3, r2
 8005906:	b2db      	uxtb	r3, r3
 8005908:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 800590a:	78f8      	ldrb	r0, [r7, #3]
 800590c:	7afa      	ldrb	r2, [r7, #11]
 800590e:	7b39      	ldrb	r1, [r7, #12]
 8005910:	7e3b      	ldrb	r3, [r7, #24]
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	78bb      	ldrb	r3, [r7, #2]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	4603      	mov	r3, r0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff ff23 	bl	8005766 <u8g2_draw_circle_section>
    while ( x < y )
 8005920:	7b3a      	ldrb	r2, [r7, #12]
 8005922:	7afb      	ldrb	r3, [r7, #11]
 8005924:	429a      	cmp	r2, r3
 8005926:	d3d4      	bcc.n	80058d2 <u8g2_draw_circle+0x62>
    }
}
 8005928:	bf00      	nop
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8005930:	b590      	push	{r4, r7, lr}
 8005932:	b085      	sub	sp, #20
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	461a      	mov	r2, r3
 800593e:	4603      	mov	r3, r0
 8005940:	70fb      	strb	r3, [r7, #3]
 8005942:	460b      	mov	r3, r1
 8005944:	70bb      	strb	r3, [r7, #2]
 8005946:	4613      	mov	r3, r2
 8005948:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 800594a:	78fa      	ldrb	r2, [r7, #3]
 800594c:	787b      	ldrb	r3, [r7, #1]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	b2d9      	uxtb	r1, r3
 8005952:	78ba      	ldrb	r2, [r7, #2]
 8005954:	787b      	ldrb	r3, [r7, #1]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	b2d8      	uxtb	r0, r3
 800595a:	78fa      	ldrb	r2, [r7, #3]
 800595c:	787b      	ldrb	r3, [r7, #1]
 800595e:	4413      	add	r3, r2
 8005960:	b2db      	uxtb	r3, r3
 8005962:	3301      	adds	r3, #1
 8005964:	b2dc      	uxtb	r4, r3
 8005966:	78ba      	ldrb	r2, [r7, #2]
 8005968:	787b      	ldrb	r3, [r7, #1]
 800596a:	4413      	add	r3, r2
 800596c:	b2db      	uxtb	r3, r3
 800596e:	3301      	adds	r3, #1
 8005970:	b2db      	uxtb	r3, r3
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	4623      	mov	r3, r4
 8005976:	4602      	mov	r2, r0
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 ff23 	bl	80067c4 <u8g2_IsIntersection>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d009      	beq.n	8005998 <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 8005984:	7878      	ldrb	r0, [r7, #1]
 8005986:	78ba      	ldrb	r2, [r7, #2]
 8005988:	78f9      	ldrb	r1, [r7, #3]
 800598a:	7e3b      	ldrb	r3, [r7, #24]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	4603      	mov	r3, r0
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff ff6d 	bl	8005870 <u8g2_draw_circle>
 8005996:	e000      	b.n	800599a <u8g2_DrawCircle+0x6a>
      return;
 8005998:	bf00      	nop
}
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	bd90      	pop	{r4, r7, pc}

080059a0 <u8g2_m_16_8_1>:
  *page_cnt = 4;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_1(uint8_t *page_cnt)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 1;
  return 0;
  #else
  static uint8_t buf[128];
  *page_cnt = 1;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	701a      	strb	r2, [r3, #0]
  return buf;
 80059ae:	4b03      	ldr	r3, [pc, #12]	; (80059bc <u8g2_m_16_8_1+0x1c>)
  #endif
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	20000230 	.word	0x20000230

080059c0 <u8g2_Setup_ssd1306_128x64_noname_1>:
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 */
/* ssd1306 1 */
void u8g2_Setup_ssd1306_128x64_noname_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a0b      	ldr	r2, [pc, #44]	; (8005a04 <u8g2_Setup_ssd1306_128x64_noname_1+0x44>)
 80059d6:	490c      	ldr	r1, [pc, #48]	; (8005a08 <u8g2_Setup_ssd1306_128x64_noname_1+0x48>)
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f001 fc51 	bl	8007280 <u8x8_Setup>
  buf = u8g2_m_16_8_1(&tile_buf_height);
 80059de:	f107 0313 	add.w	r3, r7, #19
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff ffdc 	bl	80059a0 <u8g2_m_16_8_1>
 80059e8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80059ea:	7cfa      	ldrb	r2, [r7, #19]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <u8g2_Setup_ssd1306_128x64_noname_1+0x4c>)
 80059f2:	6979      	ldr	r1, [r7, #20]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 ffce 	bl	8006996 <u8g2_SetupBuffer>
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	08006e41 	.word	0x08006e41
 8005a08:	08007019 	.word	0x08007019
 8005a0c:	0800681b 	.word	0x0800681b

08005a10 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	4413      	add	r3, r2
 8005a22:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	781b      	ldrb	r3, [r3, #0]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	81fb      	strh	r3, [r7, #14]
    font++;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3301      	adds	r3, #1
 8005a52:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8005a54:	89fb      	ldrh	r3, [r7, #14]
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	89fb      	ldrh	r3, [r7, #14]
 8005a62:	4413      	add	r3, r2
 8005a64:	81fb      	strh	r3, [r7, #14]
    return pos;
 8005a66:	89fb      	ldrh	r3, [r7, #14]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8005a7e:	2100      	movs	r1, #0
 8005a80:	6838      	ldr	r0, [r7, #0]
 8005a82:	f7ff ffc5 	bl	8005a10 <u8g2_font_get_byte>
 8005a86:	4603      	mov	r3, r0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8005a8e:	2101      	movs	r1, #1
 8005a90:	6838      	ldr	r0, [r7, #0]
 8005a92:	f7ff ffbd 	bl	8005a10 <u8g2_font_get_byte>
 8005a96:	4603      	mov	r3, r0
 8005a98:	461a      	mov	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8005a9e:	2102      	movs	r1, #2
 8005aa0:	6838      	ldr	r0, [r7, #0]
 8005aa2:	f7ff ffb5 	bl	8005a10 <u8g2_font_get_byte>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8005aae:	2103      	movs	r1, #3
 8005ab0:	6838      	ldr	r0, [r7, #0]
 8005ab2:	f7ff ffad 	bl	8005a10 <u8g2_font_get_byte>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8005abe:	2104      	movs	r1, #4
 8005ac0:	6838      	ldr	r0, [r7, #0]
 8005ac2:	f7ff ffa5 	bl	8005a10 <u8g2_font_get_byte>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	461a      	mov	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8005ace:	2105      	movs	r1, #5
 8005ad0:	6838      	ldr	r0, [r7, #0]
 8005ad2:	f7ff ff9d 	bl	8005a10 <u8g2_font_get_byte>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	461a      	mov	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8005ade:	2106      	movs	r1, #6
 8005ae0:	6838      	ldr	r0, [r7, #0]
 8005ae2:	f7ff ff95 	bl	8005a10 <u8g2_font_get_byte>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	461a      	mov	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8005aee:	2107      	movs	r1, #7
 8005af0:	6838      	ldr	r0, [r7, #0]
 8005af2:	f7ff ff8d 	bl	8005a10 <u8g2_font_get_byte>
 8005af6:	4603      	mov	r3, r0
 8005af8:	461a      	mov	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8005afe:	2108      	movs	r1, #8
 8005b00:	6838      	ldr	r0, [r7, #0]
 8005b02:	f7ff ff85 	bl	8005a10 <u8g2_font_get_byte>
 8005b06:	4603      	mov	r3, r0
 8005b08:	461a      	mov	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8005b0e:	2109      	movs	r1, #9
 8005b10:	6838      	ldr	r0, [r7, #0]
 8005b12:	f7ff ff7d 	bl	8005a10 <u8g2_font_get_byte>
 8005b16:	4603      	mov	r3, r0
 8005b18:	b25a      	sxtb	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8005b1e:	210a      	movs	r1, #10
 8005b20:	6838      	ldr	r0, [r7, #0]
 8005b22:	f7ff ff75 	bl	8005a10 <u8g2_font_get_byte>
 8005b26:	4603      	mov	r3, r0
 8005b28:	b25a      	sxtb	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8005b2e:	210b      	movs	r1, #11
 8005b30:	6838      	ldr	r0, [r7, #0]
 8005b32:	f7ff ff6d 	bl	8005a10 <u8g2_font_get_byte>
 8005b36:	4603      	mov	r3, r0
 8005b38:	b25a      	sxtb	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8005b3e:	210c      	movs	r1, #12
 8005b40:	6838      	ldr	r0, [r7, #0]
 8005b42:	f7ff ff65 	bl	8005a10 <u8g2_font_get_byte>
 8005b46:	4603      	mov	r3, r0
 8005b48:	b25a      	sxtb	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8005b4e:	210d      	movs	r1, #13
 8005b50:	6838      	ldr	r0, [r7, #0]
 8005b52:	f7ff ff5d 	bl	8005a10 <u8g2_font_get_byte>
 8005b56:	4603      	mov	r3, r0
 8005b58:	b25a      	sxtb	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8005b5e:	210e      	movs	r1, #14
 8005b60:	6838      	ldr	r0, [r7, #0]
 8005b62:	f7ff ff55 	bl	8005a10 <u8g2_font_get_byte>
 8005b66:	4603      	mov	r3, r0
 8005b68:	b25a      	sxtb	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8005b6e:	210f      	movs	r1, #15
 8005b70:	6838      	ldr	r0, [r7, #0]
 8005b72:	f7ff ff4d 	bl	8005a10 <u8g2_font_get_byte>
 8005b76:	4603      	mov	r3, r0
 8005b78:	b25a      	sxtb	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8005b7e:	2110      	movs	r1, #16
 8005b80:	6838      	ldr	r0, [r7, #0]
 8005b82:	f7ff ff45 	bl	8005a10 <u8g2_font_get_byte>
 8005b86:	4603      	mov	r3, r0
 8005b88:	b25a      	sxtb	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8005b8e:	2111      	movs	r1, #17
 8005b90:	6838      	ldr	r0, [r7, #0]
 8005b92:	f7ff ff4f 	bl	8005a34 <u8g2_font_get_word>
 8005b96:	4603      	mov	r3, r0
 8005b98:	461a      	mov	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8005b9e:	2113      	movs	r1, #19
 8005ba0:	6838      	ldr	r0, [r7, #0]
 8005ba2:	f7ff ff47 	bl	8005a34 <u8g2_font_get_word>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8005bae:	2115      	movs	r1, #21
 8005bb0:	6838      	ldr	r0, [r7, #0]
 8005bb2:	f7ff ff3f 	bl	8005a34 <u8g2_font_get_word>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	461a      	mov	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	82da      	strh	r2, [r3, #22]
#endif
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7a9b      	ldrb	r3, [r3, #10]
 8005bd6:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8005be0:	7bfa      	ldrb	r2, [r7, #15]
 8005be2:	7b7b      	ldrb	r3, [r7, #13]
 8005be4:	fa42 f303 	asr.w	r3, r2, r3
 8005be8:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8005bea:	7b7b      	ldrb	r3, [r7, #13]
 8005bec:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8005bee:	7bba      	ldrb	r2, [r7, #14]
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	2b07      	cmp	r3, #7
 8005bfa:	d91a      	bls.n	8005c32 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8005c00:	7b3a      	ldrb	r2, [r7, #12]
 8005c02:	7b7b      	ldrb	r3, [r7, #13]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	7b3b      	ldrb	r3, [r7, #12]
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	b25a      	sxtb	r2, r3
 8005c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	b25b      	sxtb	r3, r3
 8005c2a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8005c2c:	7bbb      	ldrb	r3, [r7, #14]
 8005c2e:	3b08      	subs	r3, #8
 8005c30:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	f04f 32ff 	mov.w	r2, #4294967295
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	4013      	ands	r3, r2
 8005c46:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	7bba      	ldrb	r2, [r7, #14]
 8005c4c:	729a      	strb	r2, [r3, #10]
  return val;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff ffaa 	bl	8005bc6 <u8g2_font_decode_get_unsigned_bits>
 8005c72:	4603      	mov	r3, r0
 8005c74:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8005c76:	2301      	movs	r3, #1
 8005c78:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8005c80:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8005c8c:	7bfa      	ldrb	r2, [r7, #15]
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	73fb      	strb	r3, [r7, #15]
  return v;
 8005c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8005ca2:	b490      	push	{r4, r7}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	4604      	mov	r4, r0
 8005caa:	4608      	mov	r0, r1
 8005cac:	4611      	mov	r1, r2
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4623      	mov	r3, r4
 8005cb2:	71fb      	strb	r3, [r7, #7]
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	71bb      	strb	r3, [r7, #6]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	717b      	strb	r3, [r7, #5]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8005cc0:	793b      	ldrb	r3, [r7, #4]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d008      	beq.n	8005cd8 <u8g2_add_vector_y+0x36>
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d00b      	beq.n	8005ce2 <u8g2_add_vector_y+0x40>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10e      	bne.n	8005cec <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8005cce:	797a      	ldrb	r2, [r7, #5]
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	71fb      	strb	r3, [r7, #7]
      break;
 8005cd6:	e00e      	b.n	8005cf6 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8005cd8:	79ba      	ldrb	r2, [r7, #6]
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	4413      	add	r3, r2
 8005cde:	71fb      	strb	r3, [r7, #7]
      break;
 8005ce0:	e009      	b.n	8005cf6 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8005ce2:	797b      	ldrb	r3, [r7, #5]
 8005ce4:	79fa      	ldrb	r2, [r7, #7]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	71fb      	strb	r3, [r7, #7]
      break;
 8005cea:	e004      	b.n	8005cf6 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 8005cec:	79bb      	ldrb	r3, [r7, #6]
 8005cee:	79fa      	ldrb	r2, [r7, #7]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	71fb      	strb	r3, [r7, #7]
      break;      
 8005cf4:	bf00      	nop
  }
  return dy;
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc90      	pop	{r4, r7}
 8005d00:	4770      	bx	lr

08005d02 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8005d02:	b490      	push	{r4, r7}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	4604      	mov	r4, r0
 8005d0a:	4608      	mov	r0, r1
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	461a      	mov	r2, r3
 8005d10:	4623      	mov	r3, r4
 8005d12:	71fb      	strb	r3, [r7, #7]
 8005d14:	4603      	mov	r3, r0
 8005d16:	71bb      	strb	r3, [r7, #6]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	717b      	strb	r3, [r7, #5]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8005d20:	793b      	ldrb	r3, [r7, #4]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d008      	beq.n	8005d38 <u8g2_add_vector_x+0x36>
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d00b      	beq.n	8005d42 <u8g2_add_vector_x+0x40>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10e      	bne.n	8005d4c <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8005d2e:	79ba      	ldrb	r2, [r7, #6]
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	4413      	add	r3, r2
 8005d34:	71fb      	strb	r3, [r7, #7]
      break;
 8005d36:	e00e      	b.n	8005d56 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 8005d38:	797b      	ldrb	r3, [r7, #5]
 8005d3a:	79fa      	ldrb	r2, [r7, #7]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	71fb      	strb	r3, [r7, #7]
      break;
 8005d40:	e009      	b.n	8005d56 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8005d42:	79bb      	ldrb	r3, [r7, #6]
 8005d44:	79fa      	ldrb	r2, [r7, #7]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	71fb      	strb	r3, [r7, #7]
      break;
 8005d4a:	e004      	b.n	8005d56 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 8005d4c:	797a      	ldrb	r2, [r7, #5]
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	4413      	add	r3, r2
 8005d52:	71fb      	strb	r3, [r7, #7]
      break;      
 8005d54:	bf00      	nop
  }
  return dx;
 8005d56:	79fb      	ldrb	r3, [r7, #7]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc90      	pop	{r4, r7}
 8005d60:	4770      	bx	lr

08005d62 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b088      	sub	sp, #32
 8005d66:	af02      	add	r7, sp, #8
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3354      	adds	r3, #84	; 0x54
 8005d76:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005d82:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8005d8a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d92:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8005d94:	7bfa      	ldrb	r2, [r7, #15]
 8005d96:	7d7b      	ldrb	r3, [r7, #21]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8005da0:	7dfa      	ldrb	r2, [r7, #23]
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d201      	bcs.n	8005dac <u8g2_font_decode_len+0x4a>
      current = cnt;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
 8005daa:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	791b      	ldrb	r3, [r3, #4]
 8005db0:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	795b      	ldrb	r3, [r3, #5]
 8005db6:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8005db8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8005dbc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	7b9b      	ldrb	r3, [r3, #14]
 8005dc4:	7bb8      	ldrb	r0, [r7, #14]
 8005dc6:	f7ff ff9c 	bl	8005d02 <u8g2_add_vector_x>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8005dce:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8005dd2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	7b9b      	ldrb	r3, [r3, #14]
 8005dda:	7b78      	ldrb	r0, [r7, #13]
 8005ddc:	f7ff ff61 	bl	8005ca2 <u8g2_add_vector_y>
 8005de0:	4603      	mov	r3, r0
 8005de2:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8005de4:	78bb      	ldrb	r3, [r7, #2]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00f      	beq.n	8005e0a <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	7b1a      	ldrb	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	7b9b      	ldrb	r3, [r3, #14]
 8005df8:	7db8      	ldrb	r0, [r7, #22]
 8005dfa:	7b7a      	ldrb	r2, [r7, #13]
 8005dfc:	7bb9      	ldrb	r1, [r7, #14]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	4603      	mov	r3, r0
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fbf5 	bl	80065f2 <u8g2_DrawHVLine>
 8005e08:	e012      	b.n	8005e30 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	7adb      	ldrb	r3, [r3, #11]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10e      	bne.n	8005e30 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	7b5a      	ldrb	r2, [r3, #13]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	7b9b      	ldrb	r3, [r3, #14]
 8005e20:	7db8      	ldrb	r0, [r7, #22]
 8005e22:	7b7a      	ldrb	r2, [r7, #13]
 8005e24:	7bb9      	ldrb	r1, [r7, #14]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	4603      	mov	r3, r0
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fbe1 	bl	80065f2 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8005e30:	7dfa      	ldrb	r2, [r7, #23]
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d309      	bcc.n	8005e4c <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8005e38:	7dfa      	ldrb	r2, [r7, #23]
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	757b      	strb	r3, [r7, #21]
    ly++;
 8005e44:	7d3b      	ldrb	r3, [r7, #20]
 8005e46:	3301      	adds	r3, #1
 8005e48:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8005e4a:	e79f      	b.n	8005d8c <u8g2_font_decode_len+0x2a>
      break;
 8005e4c:	bf00      	nop
  }
  lx += cnt;
 8005e4e:	7d7a      	ldrb	r2, [r7, #21]
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	4413      	add	r3, r2
 8005e54:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8005e56:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8005e5e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	71da      	strb	r2, [r3, #7]
  
}
 8005e66:	bf00      	nop
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3354      	adds	r3, #84	; 0x54
 8005e7c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005e90:	4619      	mov	r1, r3
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fe97 	bl	8005bc6 <u8g2_font_decode_get_unsigned_bits>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	b25a      	sxtb	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7ff fe8c 	bl	8005bc6 <u8g2_font_decode_get_unsigned_bits>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	b25a      	sxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	7b1b      	ldrb	r3, [r3, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	735a      	strb	r2, [r3, #13]
}
 8005ed4:	bf00      	nop
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3354      	adds	r3, #84	; 0x54
 8005eea:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff ffbd 	bl	8005e6e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005efa:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8005f02:	4619      	mov	r1, r3
 8005f04:	6938      	ldr	r0, [r7, #16]
 8005f06:	f7ff fea9 	bl	8005c5c <u8g2_font_decode_get_signed_bits>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8005f14:	4619      	mov	r1, r3
 8005f16:	6938      	ldr	r0, [r7, #16]
 8005f18:	f7ff fea0 	bl	8005c5c <u8g2_font_decode_get_signed_bits>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005f26:	4619      	mov	r1, r3
 8005f28:	6938      	ldr	r0, [r7, #16]
 8005f2a:	f7ff fe97 	bl	8005c5c <u8g2_font_decode_get_signed_bits>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f340 80cf 	ble.w	80060dc <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	7918      	ldrb	r0, [r3, #4]
 8005f42:	7bfa      	ldrb	r2, [r7, #15]
 8005f44:	7b7b      	ldrb	r3, [r7, #13]
 8005f46:	4413      	add	r3, r2
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	425b      	negs	r3, r3
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	b25a      	sxtb	r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	7b9b      	ldrb	r3, [r3, #14]
 8005f54:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8005f58:	f7ff fed3 	bl	8005d02 <u8g2_add_vector_x>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	461a      	mov	r2, r3
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	7958      	ldrb	r0, [r3, #5]
 8005f68:	7bfa      	ldrb	r2, [r7, #15]
 8005f6a:	7b7b      	ldrb	r3, [r7, #13]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	425b      	negs	r3, r3
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	b25a      	sxtb	r2, r3
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	7b9b      	ldrb	r3, [r3, #14]
 8005f7a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8005f7e:	f7ff fe90 	bl	8005ca2 <u8g2_add_vector_y>
 8005f82:	4603      	mov	r3, r0
 8005f84:	461a      	mov	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	791b      	ldrb	r3, [r3, #4]
 8005f8e:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	795b      	ldrb	r3, [r3, #5]
 8005f94:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8005f9a:	7d7b      	ldrb	r3, [r7, #21]
 8005f9c:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	7b9b      	ldrb	r3, [r3, #14]
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d852      	bhi.n	800604c <u8g2_font_decode_glyph+0x170>
 8005fa6:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <u8g2_font_decode_glyph+0xd0>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005ff9 	.word	0x08005ff9
 8005fb8:	08006029 	.word	0x08006029
      {
	case 0:
	    x1 += decode->glyph_width;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	7dbb      	ldrb	r3, [r7, #22]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8005fca:	7bfa      	ldrb	r2, [r7, #15]
 8005fcc:	7d3b      	ldrb	r3, [r7, #20]
 8005fce:	4413      	add	r3, r2
 8005fd0:	753b      	strb	r3, [r7, #20]
	    break;
 8005fd2:	e03b      	b.n	800604c <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	7dfa      	ldrb	r2, [r7, #23]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8005fe2:	7dbb      	ldrb	r3, [r7, #22]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	7d3b      	ldrb	r3, [r7, #20]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	753b      	strb	r3, [r7, #20]
	    break;
 8005ff6:	e029      	b.n	800604c <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	7dfa      	ldrb	r2, [r7, #23]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	3301      	adds	r3, #1
 800600a:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800600c:	7dbb      	ldrb	r3, [r7, #22]
 800600e:	3301      	adds	r3, #1
 8006010:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	7d7a      	ldrb	r2, [r7, #21]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800601a:	7d7b      	ldrb	r3, [r7, #21]
 800601c:	3301      	adds	r3, #1
 800601e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8006020:	7d3b      	ldrb	r3, [r7, #20]
 8006022:	3301      	adds	r3, #1
 8006024:	753b      	strb	r3, [r7, #20]
	    break;	  
 8006026:	e011      	b.n	800604c <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8006028:	7bfa      	ldrb	r2, [r7, #15]
 800602a:	7dbb      	ldrb	r3, [r7, #22]
 800602c:	4413      	add	r3, r2
 800602e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	7d7a      	ldrb	r2, [r7, #21]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800603e:	7d7b      	ldrb	r3, [r7, #21]
 8006040:	3301      	adds	r3, #1
 8006042:	757b      	strb	r3, [r7, #21]
	    y1++;
 8006044:	7d3b      	ldrb	r3, [r7, #20]
 8006046:	3301      	adds	r3, #1
 8006048:	753b      	strb	r3, [r7, #20]
	    break;	  
 800604a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800604c:	7db8      	ldrb	r0, [r7, #22]
 800604e:	7d7a      	ldrb	r2, [r7, #21]
 8006050:	7df9      	ldrb	r1, [r7, #23]
 8006052:	7d3b      	ldrb	r3, [r7, #20]
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	4603      	mov	r3, r0
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fbb3 	bl	80067c4 <u8g2_IsIntersection>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d102      	bne.n	800606a <u8g2_font_decode_glyph+0x18e>
	return d;
 8006064:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006068:	e03a      	b.n	80060e0 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2200      	movs	r2, #0
 800606e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2200      	movs	r2, #0
 8006074:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800607c:	4619      	mov	r1, r3
 800607e:	6938      	ldr	r0, [r7, #16]
 8006080:	f7ff fda1 	bl	8005bc6 <u8g2_font_decode_get_unsigned_bits>
 8006084:	4603      	mov	r3, r0
 8006086:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800608e:	4619      	mov	r1, r3
 8006090:	6938      	ldr	r0, [r7, #16]
 8006092:	f7ff fd98 	bl	8005bc6 <u8g2_font_decode_get_unsigned_bits>
 8006096:	4603      	mov	r3, r0
 8006098:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800609a:	7afb      	ldrb	r3, [r7, #11]
 800609c:	2200      	movs	r2, #0
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fe5e 	bl	8005d62 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80060a6:	7abb      	ldrb	r3, [r7, #10]
 80060a8:	2201      	movs	r2, #1
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fe58 	bl	8005d62 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80060b2:	2101      	movs	r1, #1
 80060b4:	6938      	ldr	r0, [r7, #16]
 80060b6:	f7ff fd86 	bl	8005bc6 <u8g2_font_decode_get_unsigned_bits>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1ec      	bne.n	800609a <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80060c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	dd00      	ble.n	80060d0 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80060ce:	e7d2      	b.n	8006076 <u8g2_font_decode_glyph+0x19a>
	break;
 80060d0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	7b1a      	ldrb	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 80060dc:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	3317      	adds	r3, #23
 80060fe:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8006100:	887b      	ldrh	r3, [r7, #2]
 8006102:	2bff      	cmp	r3, #255	; 0xff
 8006104:	d82a      	bhi.n	800615c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8006106:	887b      	ldrh	r3, [r7, #2]
 8006108:	2b60      	cmp	r3, #96	; 0x60
 800610a:	d907      	bls.n	800611c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8006112:	461a      	mov	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4413      	add	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	e009      	b.n	8006130 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800611c:	887b      	ldrh	r3, [r7, #2]
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d906      	bls.n	8006130 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8006128:	461a      	mov	r2, r3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4413      	add	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	3301      	adds	r3, #1
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d04e      	beq.n	80061d8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	887a      	ldrh	r2, [r7, #2]
 8006142:	429a      	cmp	r2, r3
 8006144:	d102      	bne.n	800614c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	3302      	adds	r3, #2
 800614a:	e049      	b.n	80061e0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	3301      	adds	r3, #1
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	4413      	add	r3, r2
 8006158:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800615a:	e7e9      	b.n	8006130 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8006162:	461a      	mov	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	4413      	add	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800616e:	2100      	movs	r1, #0
 8006170:	6938      	ldr	r0, [r7, #16]
 8006172:	f7ff fc5f 	bl	8005a34 <u8g2_font_get_word>
 8006176:	4603      	mov	r3, r0
 8006178:	461a      	mov	r2, r3
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	4413      	add	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8006180:	2102      	movs	r1, #2
 8006182:	6938      	ldr	r0, [r7, #16]
 8006184:	f7ff fc56 	bl	8005a34 <u8g2_font_get_word>
 8006188:	4603      	mov	r3, r0
 800618a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	3304      	adds	r3, #4
 8006190:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8006192:	89fa      	ldrh	r2, [r7, #14]
 8006194:	887b      	ldrh	r3, [r7, #2]
 8006196:	429a      	cmp	r2, r3
 8006198:	d3e9      	bcc.n	800616e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80061a0:	89fb      	ldrh	r3, [r7, #14]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	3301      	adds	r3, #1
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	89fb      	ldrh	r3, [r7, #14]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80061b4:	89fb      	ldrh	r3, [r7, #14]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d010      	beq.n	80061dc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80061ba:	89fa      	ldrh	r2, [r7, #14]
 80061bc:	887b      	ldrh	r3, [r7, #2]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d102      	bne.n	80061c8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	3303      	adds	r3, #3
 80061c6:	e00b      	b.n	80061e0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	3302      	adds	r3, #2
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	4413      	add	r3, r2
 80061d4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80061d6:	e7e0      	b.n	800619a <u8g2_font_get_glyph_data+0xb2>
	break;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <u8g2_font_get_glyph_data+0xf6>
	break;
 80061dc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	4608      	mov	r0, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	461a      	mov	r2, r3
 80061f6:	4603      	mov	r3, r0
 80061f8:	70fb      	strb	r3, [r7, #3]
 80061fa:	460b      	mov	r3, r1
 80061fc:	70bb      	strb	r3, [r7, #2]
 80061fe:	4613      	mov	r3, r2
 8006200:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	78ba      	ldrb	r2, [r7, #2]
 8006212:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8006216:	883b      	ldrh	r3, [r7, #0]
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff ff64 	bl	80060e8 <u8g2_font_get_glyph_data>
 8006220:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fe56 	bl	8005edc <u8g2_font_decode_glyph>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	4608      	mov	r0, r1
 800624a:	4611      	mov	r1, r2
 800624c:	461a      	mov	r2, r3
 800624e:	4603      	mov	r3, r0
 8006250:	70fb      	strb	r3, [r7, #3]
 8006252:	460b      	mov	r3, r1
 8006254:	70bb      	strb	r3, [r7, #2]
 8006256:	4613      	mov	r3, r2
 8006258:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006260:	2b03      	cmp	r3, #3
 8006262:	d833      	bhi.n	80062cc <u8g2_DrawGlyph+0x8c>
 8006264:	a201      	add	r2, pc, #4	; (adr r2, 800626c <u8g2_DrawGlyph+0x2c>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	0800627d 	.word	0x0800627d
 8006270:	08006291 	.word	0x08006291
 8006274:	080062a5 	.word	0x080062a5
 8006278:	080062b9 	.word	0x080062b9
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4798      	blx	r3
 8006284:	4603      	mov	r3, r0
 8006286:	461a      	mov	r2, r3
 8006288:	78bb      	ldrb	r3, [r7, #2]
 800628a:	4413      	add	r3, r2
 800628c:	70bb      	strb	r3, [r7, #2]
      break;
 800628e:	e01d      	b.n	80062cc <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	4798      	blx	r3
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	70fb      	strb	r3, [r7, #3]
      break;
 80062a2:	e013      	b.n	80062cc <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	4798      	blx	r3
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	78bb      	ldrb	r3, [r7, #2]
 80062b2:	1a9b      	subs	r3, r3, r2
 80062b4:	70bb      	strb	r3, [r7, #2]
      break;
 80062b6:	e009      	b.n	80062cc <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	4413      	add	r3, r2
 80062c8:	70fb      	strb	r3, [r7, #3]
      break;
 80062ca:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80062cc:	883b      	ldrh	r3, [r7, #0]
 80062ce:	78ba      	ldrb	r2, [r7, #2]
 80062d0:	78f9      	ldrb	r1, [r7, #3]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff ff88 	bl	80061e8 <u8g2_font_draw_glyph>
 80062d8:	4603      	mov	r3, r0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop

080062e4 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	607b      	str	r3, [r7, #4]
 80062ee:	460b      	mov	r3, r1
 80062f0:	72fb      	strb	r3, [r7, #11]
 80062f2:	4613      	mov	r3, r2
 80062f4:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fca1 	bl	8006c3e <u8x8_utf8_init>
  sum = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	4611      	mov	r1, r2
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	4798      	blx	r3
 800630e:	4603      	mov	r3, r0
 8006310:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8006312:	8abb      	ldrh	r3, [r7, #20]
 8006314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006318:	4293      	cmp	r3, r2
 800631a:	d038      	beq.n	800638e <u8g2_draw_string+0xaa>
      break;
    str++;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3301      	adds	r3, #1
 8006320:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8006322:	8abb      	ldrh	r3, [r7, #20]
 8006324:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006328:	4293      	cmp	r3, r2
 800632a:	d0e9      	beq.n	8006300 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800632c:	8abb      	ldrh	r3, [r7, #20]
 800632e:	7aba      	ldrb	r2, [r7, #10]
 8006330:	7af9      	ldrb	r1, [r7, #11]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff ff84 	bl	8006240 <u8g2_DrawGlyph>
 8006338:	4603      	mov	r3, r0
 800633a:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006342:	2b03      	cmp	r3, #3
 8006344:	d81e      	bhi.n	8006384 <u8g2_draw_string+0xa0>
 8006346:	a201      	add	r2, pc, #4	; (adr r2, 800634c <u8g2_draw_string+0x68>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	0800635d 	.word	0x0800635d
 8006350:	08006367 	.word	0x08006367
 8006354:	08006371 	.word	0x08006371
 8006358:	0800637b 	.word	0x0800637b
      {
	case 0:
	  x += delta;
 800635c:	7afa      	ldrb	r2, [r7, #11]
 800635e:	7cfb      	ldrb	r3, [r7, #19]
 8006360:	4413      	add	r3, r2
 8006362:	72fb      	strb	r3, [r7, #11]
	  break;
 8006364:	e00e      	b.n	8006384 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8006366:	7aba      	ldrb	r2, [r7, #10]
 8006368:	7cfb      	ldrb	r3, [r7, #19]
 800636a:	4413      	add	r3, r2
 800636c:	72bb      	strb	r3, [r7, #10]
	  break;
 800636e:	e009      	b.n	8006384 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8006370:	7afa      	ldrb	r2, [r7, #11]
 8006372:	7cfb      	ldrb	r3, [r7, #19]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	72fb      	strb	r3, [r7, #11]
	  break;
 8006378:	e004      	b.n	8006384 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800637a:	7aba      	ldrb	r2, [r7, #10]
 800637c:	7cfb      	ldrb	r3, [r7, #19]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	72bb      	strb	r3, [r7, #10]
	  break;
 8006382:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8006384:	7dfa      	ldrb	r2, [r7, #23]
 8006386:	7cfb      	ldrb	r3, [r7, #19]
 8006388:	4413      	add	r3, r2
 800638a:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800638c:	e7b8      	b.n	8006300 <u8g2_draw_string+0x1c>
      break;
 800638e:	bf00      	nop
    }
  }
  return sum;
 8006390:	7dfb      	ldrb	r3, [r7, #23]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop

0800639c <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	607b      	str	r3, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	72fb      	strb	r3, [r7, #11]
 80063aa:	4613      	mov	r3, r2
 80063ac:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4a06      	ldr	r2, [pc, #24]	; (80063cc <u8g2_DrawStr+0x30>)
 80063b2:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80063b4:	7aba      	ldrb	r2, [r7, #10]
 80063b6:	7af9      	ldrb	r1, [r7, #11]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7ff ff92 	bl	80062e4 <u8g2_draw_string>
 80063c0:	4603      	mov	r3, r0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	08006c5b 	.word	0x08006c5b

080063d0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d05d      	beq.n	800649c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d04d      	beq.n	800649e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006408:	2b01      	cmp	r3, #1
 800640a:	d11c      	bne.n	8006446 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8006418:	429a      	cmp	r2, r3
 800641a:	da05      	bge.n	8006428 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8006434:	429a      	cmp	r2, r3
 8006436:	dd32      	ble.n	800649e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8006444:	e02b      	b.n	800649e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800644c:	461a      	mov	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8006454:	4619      	mov	r1, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 800645c:	440b      	add	r3, r1
 800645e:	429a      	cmp	r2, r3
 8006460:	da0d      	bge.n	800647e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8006468:	b2da      	uxtb	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8006470:	b2db      	uxtb	r3, r3
 8006472:	4413      	add	r3, r2
 8006474:	b2db      	uxtb	r3, r3
 8006476:	b25a      	sxtb	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 800648a:	429a      	cmp	r2, r3
 800648c:	dd07      	ble.n	800649e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800649a:	e000      	b.n	800649e <u8g2_UpdateRefHeight+0xce>
    return;
 800649c:	bf00      	nop
  }  
}
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  return 0;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a04      	ldr	r2, [pc, #16]	; (80064dc <u8g2_SetFontPosBaseline+0x1c>)
 80064cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	080064a9 	.word	0x080064a9

080064e0 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d00b      	beq.n	800650c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3364      	adds	r3, #100	; 0x64
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fab7 	bl	8005a74 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff ff62 	bl	80063d0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	4611      	mov	r1, r2
 8006520:	461a      	mov	r2, r3
 8006522:	460b      	mov	r3, r1
 8006524:	71fb      	strb	r3, [r7, #7]
 8006526:	4613      	mov	r3, r2
 8006528:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	781a      	ldrb	r2, [r3, #0]
 8006538:	7dbb      	ldrb	r3, [r7, #22]
 800653a:	4413      	add	r3, r2
 800653c:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800653e:	7dfa      	ldrb	r2, [r7, #23]
 8006540:	7dbb      	ldrb	r3, [r7, #22]
 8006542:	429a      	cmp	r2, r3
 8006544:	d90b      	bls.n	800655e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8006546:	7dfa      	ldrb	r2, [r7, #23]
 8006548:	79bb      	ldrb	r3, [r7, #6]
 800654a:	429a      	cmp	r2, r3
 800654c:	d205      	bcs.n	800655a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800654e:	79bb      	ldrb	r3, [r7, #6]
 8006550:	75bb      	strb	r3, [r7, #22]
      b--;
 8006552:	7dbb      	ldrb	r3, [r7, #22]
 8006554:	3b01      	subs	r3, #1
 8006556:	75bb      	strb	r3, [r7, #22]
 8006558:	e001      	b.n	800655e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800655e:	7dfa      	ldrb	r2, [r7, #23]
 8006560:	79bb      	ldrb	r3, [r7, #6]
 8006562:	429a      	cmp	r2, r3
 8006564:	d301      	bcc.n	800656a <u8g2_clip_intersection2+0x56>
    return 0;
 8006566:	2300      	movs	r3, #0
 8006568:	e01c      	b.n	80065a4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800656a:	7dba      	ldrb	r2, [r7, #22]
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	429a      	cmp	r2, r3
 8006570:	d801      	bhi.n	8006576 <u8g2_clip_intersection2+0x62>
    return 0;
 8006572:	2300      	movs	r3, #0
 8006574:	e016      	b.n	80065a4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8006576:	7dfa      	ldrb	r2, [r7, #23]
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	429a      	cmp	r2, r3
 800657c:	d201      	bcs.n	8006582 <u8g2_clip_intersection2+0x6e>
    a = c;
 800657e:	79fb      	ldrb	r3, [r7, #7]
 8006580:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8006582:	7dba      	ldrb	r2, [r7, #22]
 8006584:	79bb      	ldrb	r3, [r7, #6]
 8006586:	429a      	cmp	r2, r3
 8006588:	d901      	bls.n	800658e <u8g2_clip_intersection2+0x7a>
    b = d;
 800658a:	79bb      	ldrb	r3, [r7, #6]
 800658c:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	7dfa      	ldrb	r2, [r7, #23]
 8006592:	701a      	strb	r2, [r3, #0]
  b -= a;
 8006594:	7dba      	ldrb	r2, [r7, #22]
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	7dba      	ldrb	r2, [r7, #22]
 80065a0:	701a      	strb	r2, [r3, #0]
  return 1;
 80065a2:	2301      	movs	r3, #1
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	4608      	mov	r0, r1
 80065ba:	4611      	mov	r1, r2
 80065bc:	461a      	mov	r2, r3
 80065be:	4603      	mov	r3, r0
 80065c0:	70fb      	strb	r3, [r7, #3]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70bb      	strb	r3, [r7, #2]
 80065c6:	4613      	mov	r3, r2
 80065c8:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d0:	78ba      	ldrb	r2, [r7, #2]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80065da:	7878      	ldrb	r0, [r7, #1]
 80065dc:	78ba      	ldrb	r2, [r7, #2]
 80065de:	78f9      	ldrb	r1, [r7, #3]
 80065e0:	7e3b      	ldrb	r3, [r7, #24]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	4603      	mov	r3, r0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	47a0      	blx	r4
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd90      	pop	{r4, r7, pc}

080065f2 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80065f2:	b590      	push	{r4, r7, lr}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af02      	add	r7, sp, #8
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	4608      	mov	r0, r1
 80065fc:	4611      	mov	r1, r2
 80065fe:	461a      	mov	r2, r3
 8006600:	4603      	mov	r3, r0
 8006602:	70fb      	strb	r3, [r7, #3]
 8006604:	460b      	mov	r3, r1
 8006606:	70bb      	strb	r3, [r7, #2]
 8006608:	4613      	mov	r3, r2
 800660a:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d06d      	beq.n	80066f2 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8006616:	787b      	ldrb	r3, [r7, #1]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d06a      	beq.n	80066f2 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800661c:	787b      	ldrb	r3, [r7, #1]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d918      	bls.n	8006654 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8006622:	7e3b      	ldrb	r3, [r7, #24]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d109      	bne.n	800663c <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8006628:	78fa      	ldrb	r2, [r7, #3]
 800662a:	787b      	ldrb	r3, [r7, #1]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	b2db      	uxtb	r3, r3
 8006630:	70fb      	strb	r3, [r7, #3]
	  x++;
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	3301      	adds	r3, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	70fb      	strb	r3, [r7, #3]
 800663a:	e00b      	b.n	8006654 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 800663c:	7e3b      	ldrb	r3, [r7, #24]
 800663e:	2b03      	cmp	r3, #3
 8006640:	d108      	bne.n	8006654 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8006642:	78ba      	ldrb	r2, [r7, #2]
 8006644:	787b      	ldrb	r3, [r7, #1]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	b2db      	uxtb	r3, r3
 800664a:	70bb      	strb	r3, [r7, #2]
	  y++;
 800664c:	78bb      	ldrb	r3, [r7, #2]
 800664e:	3301      	adds	r3, #1
 8006650:	b2db      	uxtb	r3, r3
 8006652:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8006654:	7e3b      	ldrb	r3, [r7, #24]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 800665c:	7e3b      	ldrb	r3, [r7, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d119      	bne.n	8006696 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8006668:	78bb      	ldrb	r3, [r7, #2]
 800666a:	429a      	cmp	r2, r3
 800666c:	d838      	bhi.n	80066e0 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006674:	78bb      	ldrb	r3, [r7, #2]
 8006676:	429a      	cmp	r2, r3
 8006678:	d934      	bls.n	80066e4 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006686:	1c79      	adds	r1, r7, #1
 8006688:	1cf8      	adds	r0, r7, #3
 800668a:	f7ff ff43 	bl	8006514 <u8g2_clip_intersection2>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d119      	bne.n	80066c8 <u8g2_DrawHVLine+0xd6>
	  return;
 8006694:	e02d      	b.n	80066f2 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d822      	bhi.n	80066e8 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d91e      	bls.n	80066ec <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066ba:	1c79      	adds	r1, r7, #1
 80066bc:	1cb8      	adds	r0, r7, #2
 80066be:	f7ff ff29 	bl	8006514 <u8g2_clip_intersection2>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d013      	beq.n	80066f0 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	689c      	ldr	r4, [r3, #8]
 80066ce:	78f9      	ldrb	r1, [r7, #3]
 80066d0:	78ba      	ldrb	r2, [r7, #2]
 80066d2:	7878      	ldrb	r0, [r7, #1]
 80066d4:	7e3b      	ldrb	r3, [r7, #24]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	4603      	mov	r3, r0
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	47a0      	blx	r4
 80066de:	e008      	b.n	80066f2 <u8g2_DrawHVLine+0x100>
	  return;
 80066e0:	bf00      	nop
 80066e2:	e006      	b.n	80066f2 <u8g2_DrawHVLine+0x100>
	  return;
 80066e4:	bf00      	nop
 80066e6:	e004      	b.n	80066f2 <u8g2_DrawHVLine+0x100>
	  return;
 80066e8:	bf00      	nop
 80066ea:	e002      	b.n	80066f2 <u8g2_DrawHVLine+0x100>
	  return;
 80066ec:	bf00      	nop
 80066ee:	e000      	b.n	80066f2 <u8g2_DrawHVLine+0x100>
	  return;
 80066f0:	bf00      	nop
    }
}
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd90      	pop	{r4, r7, pc}

080066f8 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
 8006704:	4613      	mov	r3, r2
 8006706:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800670e:	78ba      	ldrb	r2, [r7, #2]
 8006710:	429a      	cmp	r2, r3
 8006712:	d31a      	bcc.n	800674a <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800671a:	78ba      	ldrb	r2, [r7, #2]
 800671c:	429a      	cmp	r2, r3
 800671e:	d216      	bcs.n	800674e <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006726:	78fa      	ldrb	r2, [r7, #3]
 8006728:	429a      	cmp	r2, r3
 800672a:	d312      	bcc.n	8006752 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	429a      	cmp	r2, r3
 8006736:	d20e      	bcs.n	8006756 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8006738:	78ba      	ldrb	r2, [r7, #2]
 800673a:	78f9      	ldrb	r1, [r7, #3]
 800673c:	2300      	movs	r3, #0
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	2301      	movs	r3, #1
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff ff55 	bl	80065f2 <u8g2_DrawHVLine>
 8006748:	e006      	b.n	8006758 <u8g2_DrawPixel+0x60>
    return;
 800674a:	bf00      	nop
 800674c:	e004      	b.n	8006758 <u8g2_DrawPixel+0x60>
    return;
 800674e:	bf00      	nop
 8006750:	e002      	b.n	8006758 <u8g2_DrawPixel+0x60>
    return;
 8006752:	bf00      	nop
 8006754:	e000      	b.n	8006758 <u8g2_DrawPixel+0x60>
    return;
 8006756:	bf00      	nop
}
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800675e:	b490      	push	{r4, r7}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	4604      	mov	r4, r0
 8006766:	4608      	mov	r0, r1
 8006768:	4611      	mov	r1, r2
 800676a:	461a      	mov	r2, r3
 800676c:	4623      	mov	r3, r4
 800676e:	71fb      	strb	r3, [r7, #7]
 8006770:	4603      	mov	r3, r0
 8006772:	71bb      	strb	r3, [r7, #6]
 8006774:	460b      	mov	r3, r1
 8006776:	717b      	strb	r3, [r7, #5]
 8006778:	4613      	mov	r3, r2
 800677a:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800677c:	797a      	ldrb	r2, [r7, #5]
 800677e:	79bb      	ldrb	r3, [r7, #6]
 8006780:	429a      	cmp	r2, r3
 8006782:	d20d      	bcs.n	80067a0 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8006784:	793a      	ldrb	r2, [r7, #4]
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	429a      	cmp	r2, r3
 800678a:	d901      	bls.n	8006790 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800678c:	2301      	movs	r3, #1
 800678e:	e014      	b.n	80067ba <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8006790:	797a      	ldrb	r2, [r7, #5]
 8006792:	793b      	ldrb	r3, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d901      	bls.n	800679c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8006798:	2301      	movs	r3, #1
 800679a:	e00e      	b.n	80067ba <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800679c:	2300      	movs	r3, #0
 800679e:	e00c      	b.n	80067ba <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80067a0:	793a      	ldrb	r2, [r7, #4]
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d907      	bls.n	80067b8 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80067a8:	797a      	ldrb	r2, [r7, #5]
 80067aa:	793b      	ldrb	r3, [r7, #4]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d901      	bls.n	80067b4 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e002      	b.n	80067ba <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e000      	b.n	80067ba <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80067b8:	2300      	movs	r3, #0
    }
  }
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc90      	pop	{r4, r7}
 80067c2:	4770      	bx	lr

080067c4 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	4608      	mov	r0, r1
 80067ce:	4611      	mov	r1, r2
 80067d0:	461a      	mov	r2, r3
 80067d2:	4603      	mov	r3, r0
 80067d4:	70fb      	strb	r3, [r7, #3]
 80067d6:	460b      	mov	r3, r1
 80067d8:	70bb      	strb	r3, [r7, #2]
 80067da:	4613      	mov	r3, r2
 80067dc:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80067ea:	7c3b      	ldrb	r3, [r7, #16]
 80067ec:	78ba      	ldrb	r2, [r7, #2]
 80067ee:	f7ff ffb6 	bl	800675e <u8g2_is_intersection_decision_tree>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <u8g2_IsIntersection+0x38>
    return 0; 
 80067f8:	2300      	movs	r3, #0
 80067fa:	e00a      	b.n	8006812 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8006808:	787b      	ldrb	r3, [r7, #1]
 800680a:	78fa      	ldrb	r2, [r7, #3]
 800680c:	f7ff ffa7 	bl	800675e <u8g2_is_intersection_decision_tree>
 8006810:	4603      	mov	r3, r0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800681a:	b480      	push	{r7}
 800681c:	b087      	sub	sp, #28
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	4608      	mov	r0, r1
 8006824:	4611      	mov	r1, r2
 8006826:	461a      	mov	r2, r3
 8006828:	4603      	mov	r3, r0
 800682a:	70fb      	strb	r3, [r7, #3]
 800682c:	460b      	mov	r3, r1
 800682e:	70bb      	strb	r3, [r7, #2]
 8006830:	4613      	mov	r3, r2
 8006832:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8006834:	78bb      	ldrb	r3, [r7, #2]
 8006836:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8006838:	7cfb      	ldrb	r3, [r7, #19]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8006840:	2301      	movs	r3, #1
 8006842:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8006844:	7c3a      	ldrb	r2, [r7, #16]
 8006846:	7cfb      	ldrb	r3, [r7, #19]
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
 800684c:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800685c:	2b01      	cmp	r3, #1
 800685e:	d801      	bhi.n	8006864 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8006860:	7c3b      	ldrb	r3, [r7, #16]
 8006862:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800686a:	2b01      	cmp	r3, #1
 800686c:	d001      	beq.n	8006872 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800686e:	7c3b      	ldrb	r3, [r7, #16]
 8006870:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8006872:	78bb      	ldrb	r3, [r7, #2]
 8006874:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8006876:	89fb      	ldrh	r3, [r7, #14]
 8006878:	f023 0307 	bic.w	r3, r3, #7
 800687c:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	7c1b      	ldrb	r3, [r3, #16]
 8006884:	b29b      	uxth	r3, r3
 8006886:	89fa      	ldrh	r2, [r7, #14]
 8006888:	fb12 f303 	smulbb	r3, r2, r3
 800688c:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006892:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8006894:	89fb      	ldrh	r3, [r7, #14]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4413      	add	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
  ptr += x;
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80068a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d117      	bne.n	80068dc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	781a      	ldrb	r2, [r3, #0]
 80068b0:	7cbb      	ldrb	r3, [r7, #18]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	7c7b      	ldrb	r3, [r7, #17]
 80068c0:	4053      	eors	r3, r2
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	701a      	strb	r2, [r3, #0]
	ptr++;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	3301      	adds	r3, #1
 80068cc:	617b      	str	r3, [r7, #20]
	len--;
 80068ce:	787b      	ldrb	r3, [r7, #1]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80068d4:	787b      	ldrb	r3, [r7, #1]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e8      	bne.n	80068ac <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80068da:	e039      	b.n	8006950 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	781a      	ldrb	r2, [r3, #0]
 80068e0:	7cbb      	ldrb	r3, [r7, #18]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	7c7b      	ldrb	r3, [r7, #17]
 80068f0:	4053      	eors	r3, r2
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80068f8:	7cfb      	ldrb	r3, [r7, #19]
 80068fa:	3301      	adds	r3, #1
 80068fc:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80068fe:	7cfb      	ldrb	r3, [r7, #19]
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	74fb      	strb	r3, [r7, #19]
      len--;
 8006906:	787b      	ldrb	r3, [r7, #1]
 8006908:	3b01      	subs	r3, #1
 800690a:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800690c:	7cfb      	ldrb	r3, [r7, #19]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d115      	bne.n	800693e <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006918:	461a      	mov	r2, r3
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	4413      	add	r3, r2
 800691e:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006926:	2b01      	cmp	r3, #1
 8006928:	d801      	bhi.n	800692e <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800692a:	2301      	movs	r3, #1
 800692c:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006934:	2b01      	cmp	r3, #1
 8006936:	d008      	beq.n	800694a <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8006938:	2301      	movs	r3, #1
 800693a:	747b      	strb	r3, [r7, #17]
 800693c:	e005      	b.n	800694a <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800693e:	7cbb      	ldrb	r3, [r7, #18]
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8006944:	7c7b      	ldrb	r3, [r7, #17]
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800694a:	787b      	ldrb	r3, [r7, #1]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1c5      	bne.n	80068dc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8006950:	bf00      	nop
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	22ff      	movs	r2, #255	; 0xff
 8006978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	22ff      	movs	r2, #255	; 0xff
 8006980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
}
 800698e:	bf00      	nop
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	4613      	mov	r3, r2
 80069a4:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	79fa      	ldrb	r2, [r7, #7]
 80069bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff ffaf 	bl	800695c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7ff fd5e 	bl	80064c0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a28:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	7bfa      	ldrb	r2, [r7, #15]
 8006a34:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	7c1b      	ldrb	r3, [r3, #16]
 8006a3c:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b1f      	cmp	r3, #31
 8006a42:	d901      	bls.n	8006a48 <u8g2_update_dimension_common+0x34>
    t = 31;
 8006a44:	231f      	movs	r3, #31
 8006a46:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	7bfa      	ldrb	r2, [r7, #15]
 8006a52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a5c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	7bfa      	ldrb	r2, [r7, #15]
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a72:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8006a7c:	4413      	add	r3, r2
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	7c52      	ldrb	r2, [r2, #17]
 8006a82:	4293      	cmp	r3, r2
 8006a84:	dd06      	ble.n	8006a94 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	7c5a      	ldrb	r2, [r3, #17]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	4413      	add	r3, r2
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	22f0      	movs	r2, #240	; 0xf0
 8006ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	8a9b      	ldrh	r3, [r3, #20]
 8006ad0:	2bf0      	cmp	r3, #240	; 0xf0
 8006ad2:	d805      	bhi.n	8006ae0 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	8a9b      	ldrh	r3, [r3, #20]
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	8adb      	ldrh	r3, [r3, #22]
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8006aec:	bf00      	nop
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff fe51 	bl	80067c4 <u8g2_IsIntersection>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8006b30:	e03b      	b.n	8006baa <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d205      	bcs.n	8006b56 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d905      	bls.n	8006b72 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d205      	bcs.n	8006b8e <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d905      	bls.n	8006baa <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff ff2a 	bl	8006a14 <u8g2_update_dimension_common>
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ff7b 	bl	8006af8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af02      	add	r7, sp, #8
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	4608      	mov	r0, r1
 8006c14:	4611      	mov	r1, r2
 8006c16:	461a      	mov	r2, r3
 8006c18:	4603      	mov	r3, r0
 8006c1a:	70fb      	strb	r3, [r7, #3]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70bb      	strb	r3, [r7, #2]
 8006c20:	4613      	mov	r3, r2
 8006c22:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8006c24:	7878      	ldrb	r0, [r7, #1]
 8006c26:	78ba      	ldrb	r2, [r7, #2]
 8006c28:	78f9      	ldrb	r1, [r7, #3]
 8006c2a:	7c3b      	ldrb	r3, [r7, #16]
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	4603      	mov	r3, r0
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff fcbd 	bl	80065b0 <u8g2_draw_hv_line_2dir>
}
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	460b      	mov	r3, r1
 8006c64:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <u8x8_ascii_next+0x18>
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	2b0a      	cmp	r3, #10
 8006c70:	d102      	bne.n	8006c78 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8006c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c76:	e001      	b.n	8006c7c <u8x8_ascii_next+0x22>
  return b;
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	b29b      	uxth	r3, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8006c88:	b590      	push	{r4, r7, lr}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691c      	ldr	r4, [r3, #16]
 8006c98:	78fa      	ldrb	r2, [r7, #3]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	2120      	movs	r1, #32
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	47a0      	blx	r4
 8006ca2:	4603      	mov	r3, r0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd90      	pop	{r4, r7, pc}

08006cac <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8006cac:	b590      	push	{r4, r7, lr}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	691c      	ldr	r4, [r3, #16]
 8006cbe:	7afa      	ldrb	r2, [r7, #11]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2117      	movs	r1, #23
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	47a0      	blx	r4
 8006cc8:	4603      	mov	r3, r0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd90      	pop	{r4, r7, pc}

08006cd2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8006cde:	1cfb      	adds	r3, r7, #3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff ffe1 	bl	8006cac <u8x8_byte_SendBytes>
 8006cea:	4603      	mov	r3, r0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8006cf4:	b590      	push	{r4, r7, lr}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68dc      	ldr	r4, [r3, #12]
 8006d04:	78fa      	ldrb	r2, [r7, #3]
 8006d06:	2300      	movs	r3, #0
 8006d08:	2115      	movs	r1, #21
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	47a0      	blx	r4
 8006d0e:	4603      	mov	r3, r0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd90      	pop	{r4, r7, pc}

08006d18 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8006d18:	b590      	push	{r4, r7, lr}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68dc      	ldr	r4, [r3, #12]
 8006d28:	78fa      	ldrb	r2, [r7, #3]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	2116      	movs	r1, #22
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	47a0      	blx	r4
 8006d32:	4603      	mov	r3, r0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd90      	pop	{r4, r7, pc}

08006d3c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8006d3c:	b590      	push	{r4, r7, lr}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	460b      	mov	r3, r1
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	68dc      	ldr	r4, [r3, #12]
 8006d4e:	7afa      	ldrb	r2, [r7, #11]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2117      	movs	r1, #23
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	47a0      	blx	r4
 8006d58:	4603      	mov	r3, r0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd90      	pop	{r4, r7, pc}

08006d62 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8006d62:	b590      	push	{r4, r7, lr}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68dc      	ldr	r4, [r3, #12]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2200      	movs	r2, #0
 8006d72:	2118      	movs	r1, #24
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	47a0      	blx	r4
 8006d78:	4603      	mov	r3, r0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd90      	pop	{r4, r7, pc}

08006d82 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8006d82:	b590      	push	{r4, r7, lr}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68dc      	ldr	r4, [r3, #12]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2200      	movs	r2, #0
 8006d92:	2119      	movs	r1, #25
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	47a0      	blx	r4
 8006d98:	4603      	mov	r3, r0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd90      	pop	{r4, r7, pc}

08006da2 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8006da2:	b590      	push	{r4, r7, lr}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	73fb      	strb	r3, [r7, #15]
    data++;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b17      	cmp	r3, #23
 8006dbc:	d017      	beq.n	8006dee <u8x8_cad_SendSequence+0x4c>
 8006dbe:	2b17      	cmp	r3, #23
 8006dc0:	dc02      	bgt.n	8006dc8 <u8x8_cad_SendSequence+0x26>
 8006dc2:	2b15      	cmp	r3, #21
 8006dc4:	db37      	blt.n	8006e36 <u8x8_cad_SendSequence+0x94>
 8006dc6:	e004      	b.n	8006dd2 <u8x8_cad_SendSequence+0x30>
 8006dc8:	2b19      	cmp	r3, #25
 8006dca:	dd1e      	ble.n	8006e0a <u8x8_cad_SendSequence+0x68>
 8006dcc:	2bfe      	cmp	r3, #254	; 0xfe
 8006dce:	d024      	beq.n	8006e1a <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8006dd0:	e031      	b.n	8006e36 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68dc      	ldr	r4, [r3, #12]
 8006ddc:	7bba      	ldrb	r2, [r7, #14]
 8006dde:	7bf9      	ldrb	r1, [r7, #15]
 8006de0:	2300      	movs	r3, #0
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	47a0      	blx	r4
	  data++;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	3301      	adds	r3, #1
 8006dea:	603b      	str	r3, [r7, #0]
	  break;
 8006dec:	e022      	b.n	8006e34 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8006df4:	f107 030e 	add.w	r3, r7, #14
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff ff9d 	bl	8006d3c <u8x8_cad_SendData>
	  data++;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	3301      	adds	r3, #1
 8006e06:	603b      	str	r3, [r7, #0]
	  break;
 8006e08:	e014      	b.n	8006e34 <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68dc      	ldr	r4, [r3, #12]
 8006e0e:	7bf9      	ldrb	r1, [r7, #15]
 8006e10:	2300      	movs	r3, #0
 8006e12:	2200      	movs	r2, #0
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	47a0      	blx	r4
	  break;
 8006e18:	e00c      	b.n	8006e34 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	461a      	mov	r2, r3
 8006e24:	2129      	movs	r1, #41	; 0x29
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f9d9 	bl	80071de <u8x8_gpio_call>
	  data++;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	603b      	str	r3, [r7, #0]
	  break;
 8006e32:	bf00      	nop
    cmd = *data;
 8006e34:	e7ba      	b.n	8006dac <u8x8_cad_SendSequence+0xa>
	return;
 8006e36:	bf00      	nop
    }
  }
}
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd90      	pop	{r4, r7, pc}
	...

08006e40 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	607b      	str	r3, [r7, #4]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	72fb      	strb	r3, [r7, #11]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8006e52:	7afb      	ldrb	r3, [r7, #11]
 8006e54:	3b14      	subs	r3, #20
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	d82f      	bhi.n	8006eba <u8x8_cad_001+0x7a>
 8006e5a:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <u8x8_cad_001+0x20>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006ea9 	.word	0x08006ea9
 8006e64:	08006e79 	.word	0x08006e79
 8006e68:	08006e8d 	.word	0x08006e8d
 8006e6c:	08006ea1 	.word	0x08006ea1
 8006e70:	08006ea9 	.word	0x08006ea9
 8006e74:	08006ea9 	.word	0x08006ea9
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8006e78:	2100      	movs	r1, #0
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7ff ff04 	bl	8006c88 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8006e80:	7abb      	ldrb	r3, [r7, #10]
 8006e82:	4619      	mov	r1, r3
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7ff ff24 	bl	8006cd2 <u8x8_byte_SendByte>
      break;
 8006e8a:	e018      	b.n	8006ebe <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f7ff fefa 	bl	8006c88 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8006e94:	7abb      	ldrb	r3, [r7, #10]
 8006e96:	4619      	mov	r1, r3
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7ff ff1a 	bl	8006cd2 <u8x8_byte_SendByte>
      break;
 8006e9e:	e00e      	b.n	8006ebe <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff fef0 	bl	8006c88 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	691c      	ldr	r4, [r3, #16]
 8006eac:	7aba      	ldrb	r2, [r7, #10]
 8006eae:	7af9      	ldrb	r1, [r7, #11]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	47a0      	blx	r4
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	e002      	b.n	8006ec0 <u8x8_cad_001+0x80>
    default:
      return 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e000      	b.n	8006ec0 <u8x8_cad_001+0x80>
  }
  return 1;
 8006ebe:	2301      	movs	r3, #1
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd90      	pop	{r4, r7, pc}

08006ec8 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	607b      	str	r3, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	72fb      	strb	r3, [r7, #11]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8006eda:	7afb      	ldrb	r3, [r7, #11]
 8006edc:	3b0b      	subs	r3, #11
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	f200 808a 	bhi.w	8006ff8 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8006ee4:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8006ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eea:	bf00      	nop
 8006eec:	08006f01 	.word	0x08006f01
 8006ef0:	08006ff9 	.word	0x08006ff9
 8006ef4:	08006f1b 	.word	0x08006f1b
 8006ef8:	08006f4d 	.word	0x08006f4d
 8006efc:	08006f6d 	.word	0x08006f6d
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8006f00:	7abb      	ldrb	r3, [r7, #10]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d104      	bne.n	8006f10 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8006f06:	4940      	ldr	r1, [pc, #256]	; (8007008 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff ff4a 	bl	8006da2 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8006f0e:	e075      	b.n	8006ffc <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8006f10:	493e      	ldr	r1, [pc, #248]	; (800700c <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7ff ff45 	bl	8006da2 <u8x8_cad_SendSequence>
      break;
 8006f18:	e070      	b.n	8006ffc <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8006f1a:	7abb      	ldrb	r3, [r7, #10]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8006f20:	493b      	ldr	r1, [pc, #236]	; (8007010 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f7ff ff3d 	bl	8006da2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	7c9a      	ldrb	r2, [r3, #18]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8006f34:	e062      	b.n	8006ffc <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8006f36:	4937      	ldr	r1, [pc, #220]	; (8007014 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7ff ff32 	bl	8006da2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	7cda      	ldrb	r2, [r3, #19]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8006f4a:	e057      	b.n	8006ffc <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff ff08 	bl	8006d62 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8006f52:	2181      	movs	r1, #129	; 0x81
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f7ff fecd 	bl	8006cf4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8006f5a:	7abb      	ldrb	r3, [r7, #10]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f7ff feda 	bl	8006d18 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff ff0c 	bl	8006d82 <u8x8_cad_EndTransfer>
      break;
 8006f6a:	e047      	b.n	8006ffc <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7ff fef8 	bl	8006d62 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	795b      	ldrb	r3, [r3, #5]
 8006f76:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	4413      	add	r3, r2
 8006f88:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8006f8a:	2140      	movs	r1, #64	; 0x40
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff feb1 	bl	8006cf4 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	091b      	lsrs	r3, r3, #4
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	f043 0310 	orr.w	r3, r3, #16
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f7ff fea7 	bl	8006cf4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	f003 030f 	and.w	r3, r3, #15
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff feb1 	bl	8006d18 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	799b      	ldrb	r3, [r3, #6]
 8006fba:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff fea8 	bl	8006d18 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	791b      	ldrb	r3, [r3, #4]
 8006fcc:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8006fd4:	7dbb      	ldrb	r3, [r7, #22]
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7ff feac 	bl	8006d3c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8006fe4:	7abb      	ldrb	r3, [r7, #10]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8006fea:	7abb      	ldrb	r3, [r7, #10]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1eb      	bne.n	8006fc8 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff fec6 	bl	8006d82 <u8x8_cad_EndTransfer>
      break;
 8006ff6:	e001      	b.n	8006ffc <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e000      	b.n	8006ffe <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8006ffc:	2301      	movs	r3, #1
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	0800a8fc 	.word	0x0800a8fc
 800700c:	0800a904 	.word	0x0800a904
 8007010:	0800a90c 	.word	0x0800a90c
 8007014:	0800a914 	.word	0x0800a914

08007018 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	607b      	str	r3, [r7, #4]
 8007022:	460b      	mov	r3, r1
 8007024:	72fb      	strb	r3, [r7, #11]
 8007026:	4613      	mov	r3, r2
 8007028:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800702a:	7aba      	ldrb	r2, [r7, #10]
 800702c:	7af9      	ldrb	r1, [r7, #11]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f7ff ff49 	bl	8006ec8 <u8x8_d_ssd1306_sh1106_generic>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800703c:	2301      	movs	r3, #1
 800703e:	e014      	b.n	800706a <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8007040:	7afb      	ldrb	r3, [r7, #11]
 8007042:	2b09      	cmp	r3, #9
 8007044:	d009      	beq.n	800705a <u8x8_d_ssd1306_128x64_noname+0x42>
 8007046:	2b0a      	cmp	r3, #10
 8007048:	d10c      	bne.n	8007064 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f82a 	bl	80070a4 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8007050:	4908      	ldr	r1, [pc, #32]	; (8007074 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f7ff fea5 	bl	8006da2 <u8x8_cad_SendSequence>
      break;
 8007058:	e006      	b.n	8007068 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800705a:	4907      	ldr	r1, [pc, #28]	; (8007078 <u8x8_d_ssd1306_128x64_noname+0x60>)
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f80d 	bl	800707c <u8x8_d_helper_display_setup_memory>
      break;
 8007062:	e001      	b.n	8007068 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8007064:	2300      	movs	r3, #0
 8007066:	e000      	b.n	800706a <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8007068:	2301      	movs	r3, #1
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	0800a8c4 	.word	0x0800a8c4
 8007078:	0800a91c 	.word	0x0800a91c

0800707c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	7c9a      	ldrb	r2, [r3, #18]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	695c      	ldr	r4, [r3, #20]
 80070b0:	2300      	movs	r3, #0
 80070b2:	2200      	movs	r2, #0
 80070b4:	2128      	movs	r1, #40	; 0x28
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68dc      	ldr	r4, [r3, #12]
 80070be:	2300      	movs	r3, #0
 80070c0:	2200      	movs	r2, #0
 80070c2:	2114      	movs	r1, #20
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80070c8:	2201      	movs	r2, #1
 80070ca:	214b      	movs	r1, #75	; 0x4b
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f886 	bl	80071de <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	791b      	ldrb	r3, [r3, #4]
 80070d8:	461a      	mov	r2, r3
 80070da:	2129      	movs	r1, #41	; 0x29
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f87e 	bl	80071de <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80070e2:	2200      	movs	r2, #0
 80070e4:	214b      	movs	r1, #75	; 0x4b
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f879 	bl	80071de <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	791b      	ldrb	r3, [r3, #4]
 80070f2:	461a      	mov	r2, r3
 80070f4:	2129      	movs	r1, #41	; 0x29
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f871 	bl	80071de <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80070fc:	2201      	movs	r2, #1
 80070fe:	214b      	movs	r1, #75	; 0x4b
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f86c 	bl	80071de <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	795b      	ldrb	r3, [r3, #5]
 800710c:	461a      	mov	r2, r3
 800710e:	2129      	movs	r1, #41	; 0x29
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f864 	bl	80071de <u8x8_gpio_call>
}    
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	bd90      	pop	{r4, r7, pc}

0800711e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800711e:	b590      	push	{r4, r7, lr}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	4608      	mov	r0, r1
 8007128:	4611      	mov	r1, r2
 800712a:	461a      	mov	r2, r3
 800712c:	4603      	mov	r3, r0
 800712e:	70fb      	strb	r3, [r7, #3]
 8007130:	460b      	mov	r3, r1
 8007132:	70bb      	strb	r3, [r7, #2]
 8007134:	4613      	mov	r3, r2
 8007136:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800713c:	78bb      	ldrb	r3, [r7, #2]
 800713e:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8007140:	787b      	ldrb	r3, [r7, #1]
 8007142:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689c      	ldr	r4, [r3, #8]
 800714c:	f107 0308 	add.w	r3, r7, #8
 8007150:	2201      	movs	r2, #1
 8007152:	210f      	movs	r1, #15
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	47a0      	blx	r4
 8007158:	4603      	mov	r3, r0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	bd90      	pop	{r4, r7, pc}

08007162 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8007162:	b590      	push	{r4, r7, lr}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689c      	ldr	r4, [r3, #8]
 800716e:	2300      	movs	r3, #0
 8007170:	2200      	movs	r2, #0
 8007172:	2109      	movs	r1, #9
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	47a0      	blx	r4
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	bd90      	pop	{r4, r7, pc}

08007180 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8007180:	b590      	push	{r4, r7, lr}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689c      	ldr	r4, [r3, #8]
 800718c:	2300      	movs	r3, #0
 800718e:	2200      	movs	r2, #0
 8007190:	210a      	movs	r1, #10
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	47a0      	blx	r4
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	bd90      	pop	{r4, r7, pc}

0800719e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800719e:	b590      	push	{r4, r7, lr}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689c      	ldr	r4, [r3, #8]
 80071ae:	78fa      	ldrb	r2, [r7, #3]
 80071b0:	2300      	movs	r3, #0
 80071b2:	210b      	movs	r1, #11
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	47a0      	blx	r4
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd90      	pop	{r4, r7, pc}

080071c0 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689c      	ldr	r4, [r3, #8]
 80071cc:	2300      	movs	r3, #0
 80071ce:	2200      	movs	r2, #0
 80071d0:	2110      	movs	r1, #16
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	47a0      	blx	r4
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd90      	pop	{r4, r7, pc}

080071de <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80071de:	b590      	push	{r4, r7, lr}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	460b      	mov	r3, r1
 80071e8:	70fb      	strb	r3, [r7, #3]
 80071ea:	4613      	mov	r3, r2
 80071ec:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695c      	ldr	r4, [r3, #20]
 80071f2:	78ba      	ldrb	r2, [r7, #2]
 80071f4:	78f9      	ldrb	r1, [r7, #3]
 80071f6:	2300      	movs	r3, #0
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	47a0      	blx	r4
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	bd90      	pop	{r4, r7, pc}

08007204 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	607b      	str	r3, [r7, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	72fb      	strb	r3, [r7, #11]
 8007212:	4613      	mov	r3, r2
 8007214:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a11      	ldr	r2, [pc, #68]	; (800727c <u8x8_SetupDefaults+0x58>)
 8007236:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a10      	ldr	r2, [pc, #64]	; (800727c <u8x8_SetupDefaults+0x58>)
 800723c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a0e      	ldr	r2, [pc, #56]	; (800727c <u8x8_SetupDefaults+0x58>)
 8007242:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a0d      	ldr	r2, [pc, #52]	; (800727c <u8x8_SetupDefaults+0x58>)
 8007248:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	22ff      	movs	r2, #255	; 0xff
 8007264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	22ff      	movs	r2, #255	; 0xff
 800726c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	08007205 	.word	0x08007205

08007280 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff ffc8 	bl	8007224 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7ff ff58 	bl	8007162 <u8x8_SetupMemory>
}
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <__errno>:
 80072bc:	4b01      	ldr	r3, [pc, #4]	; (80072c4 <__errno+0x8>)
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20000030 	.word	0x20000030

080072c8 <__libc_init_array>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	4e0d      	ldr	r6, [pc, #52]	; (8007300 <__libc_init_array+0x38>)
 80072cc:	4c0d      	ldr	r4, [pc, #52]	; (8007304 <__libc_init_array+0x3c>)
 80072ce:	1ba4      	subs	r4, r4, r6
 80072d0:	10a4      	asrs	r4, r4, #2
 80072d2:	2500      	movs	r5, #0
 80072d4:	42a5      	cmp	r5, r4
 80072d6:	d109      	bne.n	80072ec <__libc_init_array+0x24>
 80072d8:	4e0b      	ldr	r6, [pc, #44]	; (8007308 <__libc_init_array+0x40>)
 80072da:	4c0c      	ldr	r4, [pc, #48]	; (800730c <__libc_init_array+0x44>)
 80072dc:	f002 fd9e 	bl	8009e1c <_init>
 80072e0:	1ba4      	subs	r4, r4, r6
 80072e2:	10a4      	asrs	r4, r4, #2
 80072e4:	2500      	movs	r5, #0
 80072e6:	42a5      	cmp	r5, r4
 80072e8:	d105      	bne.n	80072f6 <__libc_init_array+0x2e>
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072f0:	4798      	blx	r3
 80072f2:	3501      	adds	r5, #1
 80072f4:	e7ee      	b.n	80072d4 <__libc_init_array+0xc>
 80072f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072fa:	4798      	blx	r3
 80072fc:	3501      	adds	r5, #1
 80072fe:	e7f2      	b.n	80072e6 <__libc_init_array+0x1e>
 8007300:	0800ac08 	.word	0x0800ac08
 8007304:	0800ac08 	.word	0x0800ac08
 8007308:	0800ac08 	.word	0x0800ac08
 800730c:	0800ac0c 	.word	0x0800ac0c

08007310 <memset>:
 8007310:	4402      	add	r2, r0
 8007312:	4603      	mov	r3, r0
 8007314:	4293      	cmp	r3, r2
 8007316:	d100      	bne.n	800731a <memset+0xa>
 8007318:	4770      	bx	lr
 800731a:	f803 1b01 	strb.w	r1, [r3], #1
 800731e:	e7f9      	b.n	8007314 <memset+0x4>

08007320 <__cvt>:
 8007320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	ec55 4b10 	vmov	r4, r5, d0
 8007328:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800732a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800732e:	2d00      	cmp	r5, #0
 8007330:	460e      	mov	r6, r1
 8007332:	4691      	mov	r9, r2
 8007334:	4619      	mov	r1, r3
 8007336:	bfb8      	it	lt
 8007338:	4622      	movlt	r2, r4
 800733a:	462b      	mov	r3, r5
 800733c:	f027 0720 	bic.w	r7, r7, #32
 8007340:	bfbb      	ittet	lt
 8007342:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007346:	461d      	movlt	r5, r3
 8007348:	2300      	movge	r3, #0
 800734a:	232d      	movlt	r3, #45	; 0x2d
 800734c:	bfb8      	it	lt
 800734e:	4614      	movlt	r4, r2
 8007350:	2f46      	cmp	r7, #70	; 0x46
 8007352:	700b      	strb	r3, [r1, #0]
 8007354:	d004      	beq.n	8007360 <__cvt+0x40>
 8007356:	2f45      	cmp	r7, #69	; 0x45
 8007358:	d100      	bne.n	800735c <__cvt+0x3c>
 800735a:	3601      	adds	r6, #1
 800735c:	2102      	movs	r1, #2
 800735e:	e000      	b.n	8007362 <__cvt+0x42>
 8007360:	2103      	movs	r1, #3
 8007362:	ab03      	add	r3, sp, #12
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	ab02      	add	r3, sp, #8
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	4632      	mov	r2, r6
 800736c:	4653      	mov	r3, sl
 800736e:	ec45 4b10 	vmov	d0, r4, r5
 8007372:	f000 fbad 	bl	8007ad0 <_dtoa_r>
 8007376:	2f47      	cmp	r7, #71	; 0x47
 8007378:	4680      	mov	r8, r0
 800737a:	d102      	bne.n	8007382 <__cvt+0x62>
 800737c:	f019 0f01 	tst.w	r9, #1
 8007380:	d026      	beq.n	80073d0 <__cvt+0xb0>
 8007382:	2f46      	cmp	r7, #70	; 0x46
 8007384:	eb08 0906 	add.w	r9, r8, r6
 8007388:	d111      	bne.n	80073ae <__cvt+0x8e>
 800738a:	f898 3000 	ldrb.w	r3, [r8]
 800738e:	2b30      	cmp	r3, #48	; 0x30
 8007390:	d10a      	bne.n	80073a8 <__cvt+0x88>
 8007392:	2200      	movs	r2, #0
 8007394:	2300      	movs	r3, #0
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f9 fb41 	bl	8000a20 <__aeabi_dcmpeq>
 800739e:	b918      	cbnz	r0, 80073a8 <__cvt+0x88>
 80073a0:	f1c6 0601 	rsb	r6, r6, #1
 80073a4:	f8ca 6000 	str.w	r6, [sl]
 80073a8:	f8da 3000 	ldr.w	r3, [sl]
 80073ac:	4499      	add	r9, r3
 80073ae:	2200      	movs	r2, #0
 80073b0:	2300      	movs	r3, #0
 80073b2:	4620      	mov	r0, r4
 80073b4:	4629      	mov	r1, r5
 80073b6:	f7f9 fb33 	bl	8000a20 <__aeabi_dcmpeq>
 80073ba:	b938      	cbnz	r0, 80073cc <__cvt+0xac>
 80073bc:	2230      	movs	r2, #48	; 0x30
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	454b      	cmp	r3, r9
 80073c2:	d205      	bcs.n	80073d0 <__cvt+0xb0>
 80073c4:	1c59      	adds	r1, r3, #1
 80073c6:	9103      	str	r1, [sp, #12]
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	e7f8      	b.n	80073be <__cvt+0x9e>
 80073cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d4:	eba3 0308 	sub.w	r3, r3, r8
 80073d8:	4640      	mov	r0, r8
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	b004      	add	sp, #16
 80073de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080073e2 <__exponent>:
 80073e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073e4:	2900      	cmp	r1, #0
 80073e6:	4604      	mov	r4, r0
 80073e8:	bfba      	itte	lt
 80073ea:	4249      	neglt	r1, r1
 80073ec:	232d      	movlt	r3, #45	; 0x2d
 80073ee:	232b      	movge	r3, #43	; 0x2b
 80073f0:	2909      	cmp	r1, #9
 80073f2:	f804 2b02 	strb.w	r2, [r4], #2
 80073f6:	7043      	strb	r3, [r0, #1]
 80073f8:	dd20      	ble.n	800743c <__exponent+0x5a>
 80073fa:	f10d 0307 	add.w	r3, sp, #7
 80073fe:	461f      	mov	r7, r3
 8007400:	260a      	movs	r6, #10
 8007402:	fb91 f5f6 	sdiv	r5, r1, r6
 8007406:	fb06 1115 	mls	r1, r6, r5, r1
 800740a:	3130      	adds	r1, #48	; 0x30
 800740c:	2d09      	cmp	r5, #9
 800740e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007412:	f103 32ff 	add.w	r2, r3, #4294967295
 8007416:	4629      	mov	r1, r5
 8007418:	dc09      	bgt.n	800742e <__exponent+0x4c>
 800741a:	3130      	adds	r1, #48	; 0x30
 800741c:	3b02      	subs	r3, #2
 800741e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007422:	42bb      	cmp	r3, r7
 8007424:	4622      	mov	r2, r4
 8007426:	d304      	bcc.n	8007432 <__exponent+0x50>
 8007428:	1a10      	subs	r0, r2, r0
 800742a:	b003      	add	sp, #12
 800742c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800742e:	4613      	mov	r3, r2
 8007430:	e7e7      	b.n	8007402 <__exponent+0x20>
 8007432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007436:	f804 2b01 	strb.w	r2, [r4], #1
 800743a:	e7f2      	b.n	8007422 <__exponent+0x40>
 800743c:	2330      	movs	r3, #48	; 0x30
 800743e:	4419      	add	r1, r3
 8007440:	7083      	strb	r3, [r0, #2]
 8007442:	1d02      	adds	r2, r0, #4
 8007444:	70c1      	strb	r1, [r0, #3]
 8007446:	e7ef      	b.n	8007428 <__exponent+0x46>

08007448 <_printf_float>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	b08d      	sub	sp, #52	; 0x34
 800744e:	460c      	mov	r4, r1
 8007450:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007454:	4616      	mov	r6, r2
 8007456:	461f      	mov	r7, r3
 8007458:	4605      	mov	r5, r0
 800745a:	f001 f8f1 	bl	8008640 <_localeconv_r>
 800745e:	6803      	ldr	r3, [r0, #0]
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	4618      	mov	r0, r3
 8007464:	f7f8 feb0 	bl	80001c8 <strlen>
 8007468:	2300      	movs	r3, #0
 800746a:	930a      	str	r3, [sp, #40]	; 0x28
 800746c:	f8d8 3000 	ldr.w	r3, [r8]
 8007470:	9005      	str	r0, [sp, #20]
 8007472:	3307      	adds	r3, #7
 8007474:	f023 0307 	bic.w	r3, r3, #7
 8007478:	f103 0208 	add.w	r2, r3, #8
 800747c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007480:	f8d4 b000 	ldr.w	fp, [r4]
 8007484:	f8c8 2000 	str.w	r2, [r8]
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007490:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007494:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007498:	9307      	str	r3, [sp, #28]
 800749a:	f8cd 8018 	str.w	r8, [sp, #24]
 800749e:	f04f 32ff 	mov.w	r2, #4294967295
 80074a2:	4ba7      	ldr	r3, [pc, #668]	; (8007740 <_printf_float+0x2f8>)
 80074a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074a8:	f7f9 faec 	bl	8000a84 <__aeabi_dcmpun>
 80074ac:	bb70      	cbnz	r0, 800750c <_printf_float+0xc4>
 80074ae:	f04f 32ff 	mov.w	r2, #4294967295
 80074b2:	4ba3      	ldr	r3, [pc, #652]	; (8007740 <_printf_float+0x2f8>)
 80074b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074b8:	f7f9 fac6 	bl	8000a48 <__aeabi_dcmple>
 80074bc:	bb30      	cbnz	r0, 800750c <_printf_float+0xc4>
 80074be:	2200      	movs	r2, #0
 80074c0:	2300      	movs	r3, #0
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f9 fab5 	bl	8000a34 <__aeabi_dcmplt>
 80074ca:	b110      	cbz	r0, 80074d2 <_printf_float+0x8a>
 80074cc:	232d      	movs	r3, #45	; 0x2d
 80074ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d2:	4a9c      	ldr	r2, [pc, #624]	; (8007744 <_printf_float+0x2fc>)
 80074d4:	4b9c      	ldr	r3, [pc, #624]	; (8007748 <_printf_float+0x300>)
 80074d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80074da:	bf8c      	ite	hi
 80074dc:	4690      	movhi	r8, r2
 80074de:	4698      	movls	r8, r3
 80074e0:	2303      	movs	r3, #3
 80074e2:	f02b 0204 	bic.w	r2, fp, #4
 80074e6:	6123      	str	r3, [r4, #16]
 80074e8:	6022      	str	r2, [r4, #0]
 80074ea:	f04f 0900 	mov.w	r9, #0
 80074ee:	9700      	str	r7, [sp, #0]
 80074f0:	4633      	mov	r3, r6
 80074f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80074f4:	4621      	mov	r1, r4
 80074f6:	4628      	mov	r0, r5
 80074f8:	f000 f9e6 	bl	80078c8 <_printf_common>
 80074fc:	3001      	adds	r0, #1
 80074fe:	f040 808d 	bne.w	800761c <_printf_float+0x1d4>
 8007502:	f04f 30ff 	mov.w	r0, #4294967295
 8007506:	b00d      	add	sp, #52	; 0x34
 8007508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750c:	4642      	mov	r2, r8
 800750e:	464b      	mov	r3, r9
 8007510:	4640      	mov	r0, r8
 8007512:	4649      	mov	r1, r9
 8007514:	f7f9 fab6 	bl	8000a84 <__aeabi_dcmpun>
 8007518:	b110      	cbz	r0, 8007520 <_printf_float+0xd8>
 800751a:	4a8c      	ldr	r2, [pc, #560]	; (800774c <_printf_float+0x304>)
 800751c:	4b8c      	ldr	r3, [pc, #560]	; (8007750 <_printf_float+0x308>)
 800751e:	e7da      	b.n	80074d6 <_printf_float+0x8e>
 8007520:	6861      	ldr	r1, [r4, #4]
 8007522:	1c4b      	adds	r3, r1, #1
 8007524:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007528:	a80a      	add	r0, sp, #40	; 0x28
 800752a:	d13e      	bne.n	80075aa <_printf_float+0x162>
 800752c:	2306      	movs	r3, #6
 800752e:	6063      	str	r3, [r4, #4]
 8007530:	2300      	movs	r3, #0
 8007532:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007536:	ab09      	add	r3, sp, #36	; 0x24
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	ec49 8b10 	vmov	d0, r8, r9
 800753e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007542:	6022      	str	r2, [r4, #0]
 8007544:	f8cd a004 	str.w	sl, [sp, #4]
 8007548:	6861      	ldr	r1, [r4, #4]
 800754a:	4628      	mov	r0, r5
 800754c:	f7ff fee8 	bl	8007320 <__cvt>
 8007550:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007554:	2b47      	cmp	r3, #71	; 0x47
 8007556:	4680      	mov	r8, r0
 8007558:	d109      	bne.n	800756e <_printf_float+0x126>
 800755a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755c:	1cd8      	adds	r0, r3, #3
 800755e:	db02      	blt.n	8007566 <_printf_float+0x11e>
 8007560:	6862      	ldr	r2, [r4, #4]
 8007562:	4293      	cmp	r3, r2
 8007564:	dd47      	ble.n	80075f6 <_printf_float+0x1ae>
 8007566:	f1aa 0a02 	sub.w	sl, sl, #2
 800756a:	fa5f fa8a 	uxtb.w	sl, sl
 800756e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007572:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007574:	d824      	bhi.n	80075c0 <_printf_float+0x178>
 8007576:	3901      	subs	r1, #1
 8007578:	4652      	mov	r2, sl
 800757a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800757e:	9109      	str	r1, [sp, #36]	; 0x24
 8007580:	f7ff ff2f 	bl	80073e2 <__exponent>
 8007584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007586:	1813      	adds	r3, r2, r0
 8007588:	2a01      	cmp	r2, #1
 800758a:	4681      	mov	r9, r0
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	dc02      	bgt.n	8007596 <_printf_float+0x14e>
 8007590:	6822      	ldr	r2, [r4, #0]
 8007592:	07d1      	lsls	r1, r2, #31
 8007594:	d501      	bpl.n	800759a <_printf_float+0x152>
 8007596:	3301      	adds	r3, #1
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0a5      	beq.n	80074ee <_printf_float+0xa6>
 80075a2:	232d      	movs	r3, #45	; 0x2d
 80075a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a8:	e7a1      	b.n	80074ee <_printf_float+0xa6>
 80075aa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80075ae:	f000 8177 	beq.w	80078a0 <_printf_float+0x458>
 80075b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80075b6:	d1bb      	bne.n	8007530 <_printf_float+0xe8>
 80075b8:	2900      	cmp	r1, #0
 80075ba:	d1b9      	bne.n	8007530 <_printf_float+0xe8>
 80075bc:	2301      	movs	r3, #1
 80075be:	e7b6      	b.n	800752e <_printf_float+0xe6>
 80075c0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80075c4:	d119      	bne.n	80075fa <_printf_float+0x1b2>
 80075c6:	2900      	cmp	r1, #0
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	dd0c      	ble.n	80075e6 <_printf_float+0x19e>
 80075cc:	6121      	str	r1, [r4, #16]
 80075ce:	b913      	cbnz	r3, 80075d6 <_printf_float+0x18e>
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	07d2      	lsls	r2, r2, #31
 80075d4:	d502      	bpl.n	80075dc <_printf_float+0x194>
 80075d6:	3301      	adds	r3, #1
 80075d8:	440b      	add	r3, r1
 80075da:	6123      	str	r3, [r4, #16]
 80075dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075de:	65a3      	str	r3, [r4, #88]	; 0x58
 80075e0:	f04f 0900 	mov.w	r9, #0
 80075e4:	e7d9      	b.n	800759a <_printf_float+0x152>
 80075e6:	b913      	cbnz	r3, 80075ee <_printf_float+0x1a6>
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	07d0      	lsls	r0, r2, #31
 80075ec:	d501      	bpl.n	80075f2 <_printf_float+0x1aa>
 80075ee:	3302      	adds	r3, #2
 80075f0:	e7f3      	b.n	80075da <_printf_float+0x192>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e7f1      	b.n	80075da <_printf_float+0x192>
 80075f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80075fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80075fe:	4293      	cmp	r3, r2
 8007600:	db05      	blt.n	800760e <_printf_float+0x1c6>
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	6123      	str	r3, [r4, #16]
 8007606:	07d1      	lsls	r1, r2, #31
 8007608:	d5e8      	bpl.n	80075dc <_printf_float+0x194>
 800760a:	3301      	adds	r3, #1
 800760c:	e7e5      	b.n	80075da <_printf_float+0x192>
 800760e:	2b00      	cmp	r3, #0
 8007610:	bfd4      	ite	le
 8007612:	f1c3 0302 	rsble	r3, r3, #2
 8007616:	2301      	movgt	r3, #1
 8007618:	4413      	add	r3, r2
 800761a:	e7de      	b.n	80075da <_printf_float+0x192>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	055a      	lsls	r2, r3, #21
 8007620:	d407      	bmi.n	8007632 <_printf_float+0x1ea>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	4642      	mov	r2, r8
 8007626:	4631      	mov	r1, r6
 8007628:	4628      	mov	r0, r5
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	d12b      	bne.n	8007688 <_printf_float+0x240>
 8007630:	e767      	b.n	8007502 <_printf_float+0xba>
 8007632:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007636:	f240 80dc 	bls.w	80077f2 <_printf_float+0x3aa>
 800763a:	2200      	movs	r2, #0
 800763c:	2300      	movs	r3, #0
 800763e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007642:	f7f9 f9ed 	bl	8000a20 <__aeabi_dcmpeq>
 8007646:	2800      	cmp	r0, #0
 8007648:	d033      	beq.n	80076b2 <_printf_float+0x26a>
 800764a:	2301      	movs	r3, #1
 800764c:	4a41      	ldr	r2, [pc, #260]	; (8007754 <_printf_float+0x30c>)
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f af54 	beq.w	8007502 <_printf_float+0xba>
 800765a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800765e:	429a      	cmp	r2, r3
 8007660:	db02      	blt.n	8007668 <_printf_float+0x220>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	07d8      	lsls	r0, r3, #31
 8007666:	d50f      	bpl.n	8007688 <_printf_float+0x240>
 8007668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800766c:	4631      	mov	r1, r6
 800766e:	4628      	mov	r0, r5
 8007670:	47b8      	blx	r7
 8007672:	3001      	adds	r0, #1
 8007674:	f43f af45 	beq.w	8007502 <_printf_float+0xba>
 8007678:	f04f 0800 	mov.w	r8, #0
 800767c:	f104 091a 	add.w	r9, r4, #26
 8007680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007682:	3b01      	subs	r3, #1
 8007684:	4543      	cmp	r3, r8
 8007686:	dc09      	bgt.n	800769c <_printf_float+0x254>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	079b      	lsls	r3, r3, #30
 800768c:	f100 8103 	bmi.w	8007896 <_printf_float+0x44e>
 8007690:	68e0      	ldr	r0, [r4, #12]
 8007692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007694:	4298      	cmp	r0, r3
 8007696:	bfb8      	it	lt
 8007698:	4618      	movlt	r0, r3
 800769a:	e734      	b.n	8007506 <_printf_float+0xbe>
 800769c:	2301      	movs	r3, #1
 800769e:	464a      	mov	r2, r9
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	47b8      	blx	r7
 80076a6:	3001      	adds	r0, #1
 80076a8:	f43f af2b 	beq.w	8007502 <_printf_float+0xba>
 80076ac:	f108 0801 	add.w	r8, r8, #1
 80076b0:	e7e6      	b.n	8007680 <_printf_float+0x238>
 80076b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dc2b      	bgt.n	8007710 <_printf_float+0x2c8>
 80076b8:	2301      	movs	r3, #1
 80076ba:	4a26      	ldr	r2, [pc, #152]	; (8007754 <_printf_float+0x30c>)
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f af1d 	beq.w	8007502 <_printf_float+0xba>
 80076c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ca:	b923      	cbnz	r3, 80076d6 <_printf_float+0x28e>
 80076cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ce:	b913      	cbnz	r3, 80076d6 <_printf_float+0x28e>
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	07d9      	lsls	r1, r3, #31
 80076d4:	d5d8      	bpl.n	8007688 <_printf_float+0x240>
 80076d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f af0e 	beq.w	8007502 <_printf_float+0xba>
 80076e6:	f04f 0900 	mov.w	r9, #0
 80076ea:	f104 0a1a 	add.w	sl, r4, #26
 80076ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f0:	425b      	negs	r3, r3
 80076f2:	454b      	cmp	r3, r9
 80076f4:	dc01      	bgt.n	80076fa <_printf_float+0x2b2>
 80076f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f8:	e794      	b.n	8007624 <_printf_float+0x1dc>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4652      	mov	r2, sl
 80076fe:	4631      	mov	r1, r6
 8007700:	4628      	mov	r0, r5
 8007702:	47b8      	blx	r7
 8007704:	3001      	adds	r0, #1
 8007706:	f43f aefc 	beq.w	8007502 <_printf_float+0xba>
 800770a:	f109 0901 	add.w	r9, r9, #1
 800770e:	e7ee      	b.n	80076ee <_printf_float+0x2a6>
 8007710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007714:	429a      	cmp	r2, r3
 8007716:	bfa8      	it	ge
 8007718:	461a      	movge	r2, r3
 800771a:	2a00      	cmp	r2, #0
 800771c:	4691      	mov	r9, r2
 800771e:	dd07      	ble.n	8007730 <_printf_float+0x2e8>
 8007720:	4613      	mov	r3, r2
 8007722:	4631      	mov	r1, r6
 8007724:	4642      	mov	r2, r8
 8007726:	4628      	mov	r0, r5
 8007728:	47b8      	blx	r7
 800772a:	3001      	adds	r0, #1
 800772c:	f43f aee9 	beq.w	8007502 <_printf_float+0xba>
 8007730:	f104 031a 	add.w	r3, r4, #26
 8007734:	f04f 0b00 	mov.w	fp, #0
 8007738:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800773c:	9306      	str	r3, [sp, #24]
 800773e:	e015      	b.n	800776c <_printf_float+0x324>
 8007740:	7fefffff 	.word	0x7fefffff
 8007744:	0800a938 	.word	0x0800a938
 8007748:	0800a934 	.word	0x0800a934
 800774c:	0800a940 	.word	0x0800a940
 8007750:	0800a93c 	.word	0x0800a93c
 8007754:	0800a944 	.word	0x0800a944
 8007758:	2301      	movs	r3, #1
 800775a:	9a06      	ldr	r2, [sp, #24]
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	f43f aecd 	beq.w	8007502 <_printf_float+0xba>
 8007768:	f10b 0b01 	add.w	fp, fp, #1
 800776c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007770:	ebaa 0309 	sub.w	r3, sl, r9
 8007774:	455b      	cmp	r3, fp
 8007776:	dcef      	bgt.n	8007758 <_printf_float+0x310>
 8007778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800777c:	429a      	cmp	r2, r3
 800777e:	44d0      	add	r8, sl
 8007780:	db15      	blt.n	80077ae <_printf_float+0x366>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	07da      	lsls	r2, r3, #31
 8007786:	d412      	bmi.n	80077ae <_printf_float+0x366>
 8007788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800778a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800778c:	eba3 020a 	sub.w	r2, r3, sl
 8007790:	eba3 0a01 	sub.w	sl, r3, r1
 8007794:	4592      	cmp	sl, r2
 8007796:	bfa8      	it	ge
 8007798:	4692      	movge	sl, r2
 800779a:	f1ba 0f00 	cmp.w	sl, #0
 800779e:	dc0e      	bgt.n	80077be <_printf_float+0x376>
 80077a0:	f04f 0800 	mov.w	r8, #0
 80077a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077a8:	f104 091a 	add.w	r9, r4, #26
 80077ac:	e019      	b.n	80077e2 <_printf_float+0x39a>
 80077ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	d1e5      	bne.n	8007788 <_printf_float+0x340>
 80077bc:	e6a1      	b.n	8007502 <_printf_float+0xba>
 80077be:	4653      	mov	r3, sl
 80077c0:	4642      	mov	r2, r8
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	d1e9      	bne.n	80077a0 <_printf_float+0x358>
 80077cc:	e699      	b.n	8007502 <_printf_float+0xba>
 80077ce:	2301      	movs	r3, #1
 80077d0:	464a      	mov	r2, r9
 80077d2:	4631      	mov	r1, r6
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b8      	blx	r7
 80077d8:	3001      	adds	r0, #1
 80077da:	f43f ae92 	beq.w	8007502 <_printf_float+0xba>
 80077de:	f108 0801 	add.w	r8, r8, #1
 80077e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077e6:	1a9b      	subs	r3, r3, r2
 80077e8:	eba3 030a 	sub.w	r3, r3, sl
 80077ec:	4543      	cmp	r3, r8
 80077ee:	dcee      	bgt.n	80077ce <_printf_float+0x386>
 80077f0:	e74a      	b.n	8007688 <_printf_float+0x240>
 80077f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077f4:	2a01      	cmp	r2, #1
 80077f6:	dc01      	bgt.n	80077fc <_printf_float+0x3b4>
 80077f8:	07db      	lsls	r3, r3, #31
 80077fa:	d53a      	bpl.n	8007872 <_printf_float+0x42a>
 80077fc:	2301      	movs	r3, #1
 80077fe:	4642      	mov	r2, r8
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	f43f ae7b 	beq.w	8007502 <_printf_float+0xba>
 800780c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007810:	4631      	mov	r1, r6
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	f108 0801 	add.w	r8, r8, #1
 800781c:	f43f ae71 	beq.w	8007502 <_printf_float+0xba>
 8007820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007822:	2200      	movs	r2, #0
 8007824:	f103 3aff 	add.w	sl, r3, #4294967295
 8007828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800782c:	2300      	movs	r3, #0
 800782e:	f7f9 f8f7 	bl	8000a20 <__aeabi_dcmpeq>
 8007832:	b9c8      	cbnz	r0, 8007868 <_printf_float+0x420>
 8007834:	4653      	mov	r3, sl
 8007836:	4642      	mov	r2, r8
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	d10e      	bne.n	8007860 <_printf_float+0x418>
 8007842:	e65e      	b.n	8007502 <_printf_float+0xba>
 8007844:	2301      	movs	r3, #1
 8007846:	4652      	mov	r2, sl
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	f43f ae57 	beq.w	8007502 <_printf_float+0xba>
 8007854:	f108 0801 	add.w	r8, r8, #1
 8007858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785a:	3b01      	subs	r3, #1
 800785c:	4543      	cmp	r3, r8
 800785e:	dcf1      	bgt.n	8007844 <_printf_float+0x3fc>
 8007860:	464b      	mov	r3, r9
 8007862:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007866:	e6de      	b.n	8007626 <_printf_float+0x1de>
 8007868:	f04f 0800 	mov.w	r8, #0
 800786c:	f104 0a1a 	add.w	sl, r4, #26
 8007870:	e7f2      	b.n	8007858 <_printf_float+0x410>
 8007872:	2301      	movs	r3, #1
 8007874:	e7df      	b.n	8007836 <_printf_float+0x3ee>
 8007876:	2301      	movs	r3, #1
 8007878:	464a      	mov	r2, r9
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	f43f ae3e 	beq.w	8007502 <_printf_float+0xba>
 8007886:	f108 0801 	add.w	r8, r8, #1
 800788a:	68e3      	ldr	r3, [r4, #12]
 800788c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800788e:	1a9b      	subs	r3, r3, r2
 8007890:	4543      	cmp	r3, r8
 8007892:	dcf0      	bgt.n	8007876 <_printf_float+0x42e>
 8007894:	e6fc      	b.n	8007690 <_printf_float+0x248>
 8007896:	f04f 0800 	mov.w	r8, #0
 800789a:	f104 0919 	add.w	r9, r4, #25
 800789e:	e7f4      	b.n	800788a <_printf_float+0x442>
 80078a0:	2900      	cmp	r1, #0
 80078a2:	f43f ae8b 	beq.w	80075bc <_printf_float+0x174>
 80078a6:	2300      	movs	r3, #0
 80078a8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80078ac:	ab09      	add	r3, sp, #36	; 0x24
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	ec49 8b10 	vmov	d0, r8, r9
 80078b4:	6022      	str	r2, [r4, #0]
 80078b6:	f8cd a004 	str.w	sl, [sp, #4]
 80078ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078be:	4628      	mov	r0, r5
 80078c0:	f7ff fd2e 	bl	8007320 <__cvt>
 80078c4:	4680      	mov	r8, r0
 80078c6:	e648      	b.n	800755a <_printf_float+0x112>

080078c8 <_printf_common>:
 80078c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078cc:	4691      	mov	r9, r2
 80078ce:	461f      	mov	r7, r3
 80078d0:	688a      	ldr	r2, [r1, #8]
 80078d2:	690b      	ldr	r3, [r1, #16]
 80078d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078d8:	4293      	cmp	r3, r2
 80078da:	bfb8      	it	lt
 80078dc:	4613      	movlt	r3, r2
 80078de:	f8c9 3000 	str.w	r3, [r9]
 80078e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078e6:	4606      	mov	r6, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	b112      	cbz	r2, 80078f2 <_printf_common+0x2a>
 80078ec:	3301      	adds	r3, #1
 80078ee:	f8c9 3000 	str.w	r3, [r9]
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	0699      	lsls	r1, r3, #26
 80078f6:	bf42      	ittt	mi
 80078f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80078fc:	3302      	addmi	r3, #2
 80078fe:	f8c9 3000 	strmi.w	r3, [r9]
 8007902:	6825      	ldr	r5, [r4, #0]
 8007904:	f015 0506 	ands.w	r5, r5, #6
 8007908:	d107      	bne.n	800791a <_printf_common+0x52>
 800790a:	f104 0a19 	add.w	sl, r4, #25
 800790e:	68e3      	ldr	r3, [r4, #12]
 8007910:	f8d9 2000 	ldr.w	r2, [r9]
 8007914:	1a9b      	subs	r3, r3, r2
 8007916:	42ab      	cmp	r3, r5
 8007918:	dc28      	bgt.n	800796c <_printf_common+0xa4>
 800791a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800791e:	6822      	ldr	r2, [r4, #0]
 8007920:	3300      	adds	r3, #0
 8007922:	bf18      	it	ne
 8007924:	2301      	movne	r3, #1
 8007926:	0692      	lsls	r2, r2, #26
 8007928:	d42d      	bmi.n	8007986 <_printf_common+0xbe>
 800792a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800792e:	4639      	mov	r1, r7
 8007930:	4630      	mov	r0, r6
 8007932:	47c0      	blx	r8
 8007934:	3001      	adds	r0, #1
 8007936:	d020      	beq.n	800797a <_printf_common+0xb2>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	68e5      	ldr	r5, [r4, #12]
 800793c:	f8d9 2000 	ldr.w	r2, [r9]
 8007940:	f003 0306 	and.w	r3, r3, #6
 8007944:	2b04      	cmp	r3, #4
 8007946:	bf08      	it	eq
 8007948:	1aad      	subeq	r5, r5, r2
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	6922      	ldr	r2, [r4, #16]
 800794e:	bf0c      	ite	eq
 8007950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007954:	2500      	movne	r5, #0
 8007956:	4293      	cmp	r3, r2
 8007958:	bfc4      	itt	gt
 800795a:	1a9b      	subgt	r3, r3, r2
 800795c:	18ed      	addgt	r5, r5, r3
 800795e:	f04f 0900 	mov.w	r9, #0
 8007962:	341a      	adds	r4, #26
 8007964:	454d      	cmp	r5, r9
 8007966:	d11a      	bne.n	800799e <_printf_common+0xd6>
 8007968:	2000      	movs	r0, #0
 800796a:	e008      	b.n	800797e <_printf_common+0xb6>
 800796c:	2301      	movs	r3, #1
 800796e:	4652      	mov	r2, sl
 8007970:	4639      	mov	r1, r7
 8007972:	4630      	mov	r0, r6
 8007974:	47c0      	blx	r8
 8007976:	3001      	adds	r0, #1
 8007978:	d103      	bne.n	8007982 <_printf_common+0xba>
 800797a:	f04f 30ff 	mov.w	r0, #4294967295
 800797e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007982:	3501      	adds	r5, #1
 8007984:	e7c3      	b.n	800790e <_printf_common+0x46>
 8007986:	18e1      	adds	r1, r4, r3
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	2030      	movs	r0, #48	; 0x30
 800798c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007990:	4422      	add	r2, r4
 8007992:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007996:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800799a:	3302      	adds	r3, #2
 800799c:	e7c5      	b.n	800792a <_printf_common+0x62>
 800799e:	2301      	movs	r3, #1
 80079a0:	4622      	mov	r2, r4
 80079a2:	4639      	mov	r1, r7
 80079a4:	4630      	mov	r0, r6
 80079a6:	47c0      	blx	r8
 80079a8:	3001      	adds	r0, #1
 80079aa:	d0e6      	beq.n	800797a <_printf_common+0xb2>
 80079ac:	f109 0901 	add.w	r9, r9, #1
 80079b0:	e7d8      	b.n	8007964 <_printf_common+0x9c>

080079b2 <quorem>:
 80079b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b6:	6903      	ldr	r3, [r0, #16]
 80079b8:	690c      	ldr	r4, [r1, #16]
 80079ba:	42a3      	cmp	r3, r4
 80079bc:	4680      	mov	r8, r0
 80079be:	f2c0 8082 	blt.w	8007ac6 <quorem+0x114>
 80079c2:	3c01      	subs	r4, #1
 80079c4:	f101 0714 	add.w	r7, r1, #20
 80079c8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80079cc:	f100 0614 	add.w	r6, r0, #20
 80079d0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80079d4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80079d8:	eb06 030c 	add.w	r3, r6, ip
 80079dc:	3501      	adds	r5, #1
 80079de:	eb07 090c 	add.w	r9, r7, ip
 80079e2:	9301      	str	r3, [sp, #4]
 80079e4:	fbb0 f5f5 	udiv	r5, r0, r5
 80079e8:	b395      	cbz	r5, 8007a50 <quorem+0x9e>
 80079ea:	f04f 0a00 	mov.w	sl, #0
 80079ee:	4638      	mov	r0, r7
 80079f0:	46b6      	mov	lr, r6
 80079f2:	46d3      	mov	fp, sl
 80079f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80079f8:	b293      	uxth	r3, r2
 80079fa:	fb05 a303 	mla	r3, r5, r3, sl
 80079fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ebab 0303 	sub.w	r3, fp, r3
 8007a08:	0c12      	lsrs	r2, r2, #16
 8007a0a:	f8de b000 	ldr.w	fp, [lr]
 8007a0e:	fb05 a202 	mla	r2, r5, r2, sl
 8007a12:	fa13 f38b 	uxtah	r3, r3, fp
 8007a16:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007a1a:	fa1f fb82 	uxth.w	fp, r2
 8007a1e:	f8de 2000 	ldr.w	r2, [lr]
 8007a22:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007a26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a30:	4581      	cmp	r9, r0
 8007a32:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007a36:	f84e 3b04 	str.w	r3, [lr], #4
 8007a3a:	d2db      	bcs.n	80079f4 <quorem+0x42>
 8007a3c:	f856 300c 	ldr.w	r3, [r6, ip]
 8007a40:	b933      	cbnz	r3, 8007a50 <quorem+0x9e>
 8007a42:	9b01      	ldr	r3, [sp, #4]
 8007a44:	3b04      	subs	r3, #4
 8007a46:	429e      	cmp	r6, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	d330      	bcc.n	8007aae <quorem+0xfc>
 8007a4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a50:	4640      	mov	r0, r8
 8007a52:	f001 f82b 	bl	8008aac <__mcmp>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	db25      	blt.n	8007aa6 <quorem+0xf4>
 8007a5a:	3501      	adds	r5, #1
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f04f 0c00 	mov.w	ip, #0
 8007a62:	f857 2b04 	ldr.w	r2, [r7], #4
 8007a66:	f8d0 e000 	ldr.w	lr, [r0]
 8007a6a:	b293      	uxth	r3, r2
 8007a6c:	ebac 0303 	sub.w	r3, ip, r3
 8007a70:	0c12      	lsrs	r2, r2, #16
 8007a72:	fa13 f38e 	uxtah	r3, r3, lr
 8007a76:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a84:	45b9      	cmp	r9, r7
 8007a86:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a8a:	f840 3b04 	str.w	r3, [r0], #4
 8007a8e:	d2e8      	bcs.n	8007a62 <quorem+0xb0>
 8007a90:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007a94:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007a98:	b92a      	cbnz	r2, 8007aa6 <quorem+0xf4>
 8007a9a:	3b04      	subs	r3, #4
 8007a9c:	429e      	cmp	r6, r3
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	d30b      	bcc.n	8007aba <quorem+0x108>
 8007aa2:	f8c8 4010 	str.w	r4, [r8, #16]
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	b003      	add	sp, #12
 8007aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aae:	6812      	ldr	r2, [r2, #0]
 8007ab0:	3b04      	subs	r3, #4
 8007ab2:	2a00      	cmp	r2, #0
 8007ab4:	d1ca      	bne.n	8007a4c <quorem+0x9a>
 8007ab6:	3c01      	subs	r4, #1
 8007ab8:	e7c5      	b.n	8007a46 <quorem+0x94>
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	3b04      	subs	r3, #4
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	d1ef      	bne.n	8007aa2 <quorem+0xf0>
 8007ac2:	3c01      	subs	r4, #1
 8007ac4:	e7ea      	b.n	8007a9c <quorem+0xea>
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	e7ee      	b.n	8007aa8 <quorem+0xf6>
 8007aca:	0000      	movs	r0, r0
 8007acc:	0000      	movs	r0, r0
	...

08007ad0 <_dtoa_r>:
 8007ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad4:	ec57 6b10 	vmov	r6, r7, d0
 8007ad8:	b097      	sub	sp, #92	; 0x5c
 8007ada:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007adc:	9106      	str	r1, [sp, #24]
 8007ade:	4604      	mov	r4, r0
 8007ae0:	920b      	str	r2, [sp, #44]	; 0x2c
 8007ae2:	9312      	str	r3, [sp, #72]	; 0x48
 8007ae4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ae8:	e9cd 6700 	strd	r6, r7, [sp]
 8007aec:	b93d      	cbnz	r5, 8007afe <_dtoa_r+0x2e>
 8007aee:	2010      	movs	r0, #16
 8007af0:	f000 fdb4 	bl	800865c <malloc>
 8007af4:	6260      	str	r0, [r4, #36]	; 0x24
 8007af6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007afa:	6005      	str	r5, [r0, #0]
 8007afc:	60c5      	str	r5, [r0, #12]
 8007afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b00:	6819      	ldr	r1, [r3, #0]
 8007b02:	b151      	cbz	r1, 8007b1a <_dtoa_r+0x4a>
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	604a      	str	r2, [r1, #4]
 8007b08:	2301      	movs	r3, #1
 8007b0a:	4093      	lsls	r3, r2
 8007b0c:	608b      	str	r3, [r1, #8]
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f000 fdeb 	bl	80086ea <_Bfree>
 8007b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b16:	2200      	movs	r2, #0
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	1e3b      	subs	r3, r7, #0
 8007b1c:	bfbb      	ittet	lt
 8007b1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b22:	9301      	strlt	r3, [sp, #4]
 8007b24:	2300      	movge	r3, #0
 8007b26:	2201      	movlt	r2, #1
 8007b28:	bfac      	ite	ge
 8007b2a:	f8c8 3000 	strge.w	r3, [r8]
 8007b2e:	f8c8 2000 	strlt.w	r2, [r8]
 8007b32:	4baf      	ldr	r3, [pc, #700]	; (8007df0 <_dtoa_r+0x320>)
 8007b34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b38:	ea33 0308 	bics.w	r3, r3, r8
 8007b3c:	d114      	bne.n	8007b68 <_dtoa_r+0x98>
 8007b3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b40:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	9b00      	ldr	r3, [sp, #0]
 8007b48:	b923      	cbnz	r3, 8007b54 <_dtoa_r+0x84>
 8007b4a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f000 8542 	beq.w	80085d8 <_dtoa_r+0xb08>
 8007b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b56:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007e04 <_dtoa_r+0x334>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 8544 	beq.w	80085e8 <_dtoa_r+0xb18>
 8007b60:	f10b 0303 	add.w	r3, fp, #3
 8007b64:	f000 bd3e 	b.w	80085e4 <_dtoa_r+0xb14>
 8007b68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2300      	movs	r3, #0
 8007b70:	4630      	mov	r0, r6
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f8 ff54 	bl	8000a20 <__aeabi_dcmpeq>
 8007b78:	4681      	mov	r9, r0
 8007b7a:	b168      	cbz	r0, 8007b98 <_dtoa_r+0xc8>
 8007b7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b7e:	2301      	movs	r3, #1
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 8524 	beq.w	80085d2 <_dtoa_r+0xb02>
 8007b8a:	4b9a      	ldr	r3, [pc, #616]	; (8007df4 <_dtoa_r+0x324>)
 8007b8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b8e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	f000 bd28 	b.w	80085e8 <_dtoa_r+0xb18>
 8007b98:	aa14      	add	r2, sp, #80	; 0x50
 8007b9a:	a915      	add	r1, sp, #84	; 0x54
 8007b9c:	ec47 6b10 	vmov	d0, r6, r7
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 fffa 	bl	8008b9a <__d2b>
 8007ba6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007baa:	9004      	str	r0, [sp, #16]
 8007bac:	2d00      	cmp	r5, #0
 8007bae:	d07c      	beq.n	8007caa <_dtoa_r+0x1da>
 8007bb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bb4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007bb8:	46b2      	mov	sl, r6
 8007bba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007bbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bc2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	4b8b      	ldr	r3, [pc, #556]	; (8007df8 <_dtoa_r+0x328>)
 8007bca:	4650      	mov	r0, sl
 8007bcc:	4659      	mov	r1, fp
 8007bce:	f7f8 fb07 	bl	80001e0 <__aeabi_dsub>
 8007bd2:	a381      	add	r3, pc, #516	; (adr r3, 8007dd8 <_dtoa_r+0x308>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f7f8 fcba 	bl	8000550 <__aeabi_dmul>
 8007bdc:	a380      	add	r3, pc, #512	; (adr r3, 8007de0 <_dtoa_r+0x310>)
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f7f8 faff 	bl	80001e4 <__adddf3>
 8007be6:	4606      	mov	r6, r0
 8007be8:	4628      	mov	r0, r5
 8007bea:	460f      	mov	r7, r1
 8007bec:	f7f8 fc46 	bl	800047c <__aeabi_i2d>
 8007bf0:	a37d      	add	r3, pc, #500	; (adr r3, 8007de8 <_dtoa_r+0x318>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	f7f8 fcab 	bl	8000550 <__aeabi_dmul>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4630      	mov	r0, r6
 8007c00:	4639      	mov	r1, r7
 8007c02:	f7f8 faef 	bl	80001e4 <__adddf3>
 8007c06:	4606      	mov	r6, r0
 8007c08:	460f      	mov	r7, r1
 8007c0a:	f7f8 ff51 	bl	8000ab0 <__aeabi_d2iz>
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4682      	mov	sl, r0
 8007c12:	2300      	movs	r3, #0
 8007c14:	4630      	mov	r0, r6
 8007c16:	4639      	mov	r1, r7
 8007c18:	f7f8 ff0c 	bl	8000a34 <__aeabi_dcmplt>
 8007c1c:	b148      	cbz	r0, 8007c32 <_dtoa_r+0x162>
 8007c1e:	4650      	mov	r0, sl
 8007c20:	f7f8 fc2c 	bl	800047c <__aeabi_i2d>
 8007c24:	4632      	mov	r2, r6
 8007c26:	463b      	mov	r3, r7
 8007c28:	f7f8 fefa 	bl	8000a20 <__aeabi_dcmpeq>
 8007c2c:	b908      	cbnz	r0, 8007c32 <_dtoa_r+0x162>
 8007c2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c32:	f1ba 0f16 	cmp.w	sl, #22
 8007c36:	d859      	bhi.n	8007cec <_dtoa_r+0x21c>
 8007c38:	4970      	ldr	r1, [pc, #448]	; (8007dfc <_dtoa_r+0x32c>)
 8007c3a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007c3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c46:	f7f8 ff13 	bl	8000a70 <__aeabi_dcmpgt>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d050      	beq.n	8007cf0 <_dtoa_r+0x220>
 8007c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c52:	2300      	movs	r3, #0
 8007c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c58:	1b5d      	subs	r5, r3, r5
 8007c5a:	f1b5 0801 	subs.w	r8, r5, #1
 8007c5e:	bf49      	itett	mi
 8007c60:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c64:	2300      	movpl	r3, #0
 8007c66:	9305      	strmi	r3, [sp, #20]
 8007c68:	f04f 0800 	movmi.w	r8, #0
 8007c6c:	bf58      	it	pl
 8007c6e:	9305      	strpl	r3, [sp, #20]
 8007c70:	f1ba 0f00 	cmp.w	sl, #0
 8007c74:	db3e      	blt.n	8007cf4 <_dtoa_r+0x224>
 8007c76:	2300      	movs	r3, #0
 8007c78:	44d0      	add	r8, sl
 8007c7a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007c7e:	9307      	str	r3, [sp, #28]
 8007c80:	9b06      	ldr	r3, [sp, #24]
 8007c82:	2b09      	cmp	r3, #9
 8007c84:	f200 8090 	bhi.w	8007da8 <_dtoa_r+0x2d8>
 8007c88:	2b05      	cmp	r3, #5
 8007c8a:	bfc4      	itt	gt
 8007c8c:	3b04      	subgt	r3, #4
 8007c8e:	9306      	strgt	r3, [sp, #24]
 8007c90:	9b06      	ldr	r3, [sp, #24]
 8007c92:	f1a3 0302 	sub.w	r3, r3, #2
 8007c96:	bfcc      	ite	gt
 8007c98:	2500      	movgt	r5, #0
 8007c9a:	2501      	movle	r5, #1
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	f200 808f 	bhi.w	8007dc0 <_dtoa_r+0x2f0>
 8007ca2:	e8df f003 	tbb	[pc, r3]
 8007ca6:	7f7d      	.short	0x7f7d
 8007ca8:	7131      	.short	0x7131
 8007caa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007cae:	441d      	add	r5, r3
 8007cb0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007cb4:	2820      	cmp	r0, #32
 8007cb6:	dd13      	ble.n	8007ce0 <_dtoa_r+0x210>
 8007cb8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	fa08 f800 	lsl.w	r8, r8, r0
 8007cc2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007cc6:	fa23 f000 	lsr.w	r0, r3, r0
 8007cca:	ea48 0000 	orr.w	r0, r8, r0
 8007cce:	f7f8 fbc5 	bl	800045c <__aeabi_ui2d>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007cda:	3d01      	subs	r5, #1
 8007cdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cde:	e772      	b.n	8007bc6 <_dtoa_r+0xf6>
 8007ce0:	9b00      	ldr	r3, [sp, #0]
 8007ce2:	f1c0 0020 	rsb	r0, r0, #32
 8007ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cea:	e7f0      	b.n	8007cce <_dtoa_r+0x1fe>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e7b1      	b.n	8007c54 <_dtoa_r+0x184>
 8007cf0:	900f      	str	r0, [sp, #60]	; 0x3c
 8007cf2:	e7b0      	b.n	8007c56 <_dtoa_r+0x186>
 8007cf4:	9b05      	ldr	r3, [sp, #20]
 8007cf6:	eba3 030a 	sub.w	r3, r3, sl
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	f1ca 0300 	rsb	r3, sl, #0
 8007d00:	9307      	str	r3, [sp, #28]
 8007d02:	2300      	movs	r3, #0
 8007d04:	930e      	str	r3, [sp, #56]	; 0x38
 8007d06:	e7bb      	b.n	8007c80 <_dtoa_r+0x1b0>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	dd59      	ble.n	8007dc6 <_dtoa_r+0x2f6>
 8007d12:	9302      	str	r3, [sp, #8]
 8007d14:	4699      	mov	r9, r3
 8007d16:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d18:	2200      	movs	r2, #0
 8007d1a:	6072      	str	r2, [r6, #4]
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	f102 0014 	add.w	r0, r2, #20
 8007d22:	4298      	cmp	r0, r3
 8007d24:	6871      	ldr	r1, [r6, #4]
 8007d26:	d953      	bls.n	8007dd0 <_dtoa_r+0x300>
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 fcaa 	bl	8008682 <_Balloc>
 8007d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d30:	6030      	str	r0, [r6, #0]
 8007d32:	f1b9 0f0e 	cmp.w	r9, #14
 8007d36:	f8d3 b000 	ldr.w	fp, [r3]
 8007d3a:	f200 80e6 	bhi.w	8007f0a <_dtoa_r+0x43a>
 8007d3e:	2d00      	cmp	r5, #0
 8007d40:	f000 80e3 	beq.w	8007f0a <_dtoa_r+0x43a>
 8007d44:	ed9d 7b00 	vldr	d7, [sp]
 8007d48:	f1ba 0f00 	cmp.w	sl, #0
 8007d4c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007d50:	dd74      	ble.n	8007e3c <_dtoa_r+0x36c>
 8007d52:	4a2a      	ldr	r2, [pc, #168]	; (8007dfc <_dtoa_r+0x32c>)
 8007d54:	f00a 030f 	and.w	r3, sl, #15
 8007d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d5c:	ed93 7b00 	vldr	d7, [r3]
 8007d60:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007d64:	06f0      	lsls	r0, r6, #27
 8007d66:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007d6a:	d565      	bpl.n	8007e38 <_dtoa_r+0x368>
 8007d6c:	4b24      	ldr	r3, [pc, #144]	; (8007e00 <_dtoa_r+0x330>)
 8007d6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d76:	f7f8 fd15 	bl	80007a4 <__aeabi_ddiv>
 8007d7a:	e9cd 0100 	strd	r0, r1, [sp]
 8007d7e:	f006 060f 	and.w	r6, r6, #15
 8007d82:	2503      	movs	r5, #3
 8007d84:	4f1e      	ldr	r7, [pc, #120]	; (8007e00 <_dtoa_r+0x330>)
 8007d86:	e04c      	b.n	8007e22 <_dtoa_r+0x352>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d8e:	4453      	add	r3, sl
 8007d90:	f103 0901 	add.w	r9, r3, #1
 8007d94:	9302      	str	r3, [sp, #8]
 8007d96:	464b      	mov	r3, r9
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	bfb8      	it	lt
 8007d9c:	2301      	movlt	r3, #1
 8007d9e:	e7ba      	b.n	8007d16 <_dtoa_r+0x246>
 8007da0:	2300      	movs	r3, #0
 8007da2:	e7b2      	b.n	8007d0a <_dtoa_r+0x23a>
 8007da4:	2300      	movs	r3, #0
 8007da6:	e7f0      	b.n	8007d8a <_dtoa_r+0x2ba>
 8007da8:	2501      	movs	r5, #1
 8007daa:	2300      	movs	r3, #0
 8007dac:	9306      	str	r3, [sp, #24]
 8007dae:	950a      	str	r5, [sp, #40]	; 0x28
 8007db0:	f04f 33ff 	mov.w	r3, #4294967295
 8007db4:	9302      	str	r3, [sp, #8]
 8007db6:	4699      	mov	r9, r3
 8007db8:	2200      	movs	r2, #0
 8007dba:	2312      	movs	r3, #18
 8007dbc:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dbe:	e7aa      	b.n	8007d16 <_dtoa_r+0x246>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8007dc4:	e7f4      	b.n	8007db0 <_dtoa_r+0x2e0>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	9302      	str	r3, [sp, #8]
 8007dca:	4699      	mov	r9, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	e7f5      	b.n	8007dbc <_dtoa_r+0x2ec>
 8007dd0:	3101      	adds	r1, #1
 8007dd2:	6071      	str	r1, [r6, #4]
 8007dd4:	0052      	lsls	r2, r2, #1
 8007dd6:	e7a2      	b.n	8007d1e <_dtoa_r+0x24e>
 8007dd8:	636f4361 	.word	0x636f4361
 8007ddc:	3fd287a7 	.word	0x3fd287a7
 8007de0:	8b60c8b3 	.word	0x8b60c8b3
 8007de4:	3fc68a28 	.word	0x3fc68a28
 8007de8:	509f79fb 	.word	0x509f79fb
 8007dec:	3fd34413 	.word	0x3fd34413
 8007df0:	7ff00000 	.word	0x7ff00000
 8007df4:	0800a945 	.word	0x0800a945
 8007df8:	3ff80000 	.word	0x3ff80000
 8007dfc:	0800a9e0 	.word	0x0800a9e0
 8007e00:	0800a9b8 	.word	0x0800a9b8
 8007e04:	0800a94f 	.word	0x0800a94f
 8007e08:	07f1      	lsls	r1, r6, #31
 8007e0a:	d508      	bpl.n	8007e1e <_dtoa_r+0x34e>
 8007e0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e14:	f7f8 fb9c 	bl	8000550 <__aeabi_dmul>
 8007e18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e1c:	3501      	adds	r5, #1
 8007e1e:	1076      	asrs	r6, r6, #1
 8007e20:	3708      	adds	r7, #8
 8007e22:	2e00      	cmp	r6, #0
 8007e24:	d1f0      	bne.n	8007e08 <_dtoa_r+0x338>
 8007e26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e2e:	f7f8 fcb9 	bl	80007a4 <__aeabi_ddiv>
 8007e32:	e9cd 0100 	strd	r0, r1, [sp]
 8007e36:	e01a      	b.n	8007e6e <_dtoa_r+0x39e>
 8007e38:	2502      	movs	r5, #2
 8007e3a:	e7a3      	b.n	8007d84 <_dtoa_r+0x2b4>
 8007e3c:	f000 80a0 	beq.w	8007f80 <_dtoa_r+0x4b0>
 8007e40:	f1ca 0600 	rsb	r6, sl, #0
 8007e44:	4b9f      	ldr	r3, [pc, #636]	; (80080c4 <_dtoa_r+0x5f4>)
 8007e46:	4fa0      	ldr	r7, [pc, #640]	; (80080c8 <_dtoa_r+0x5f8>)
 8007e48:	f006 020f 	and.w	r2, r6, #15
 8007e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e58:	f7f8 fb7a 	bl	8000550 <__aeabi_dmul>
 8007e5c:	e9cd 0100 	strd	r0, r1, [sp]
 8007e60:	1136      	asrs	r6, r6, #4
 8007e62:	2300      	movs	r3, #0
 8007e64:	2502      	movs	r5, #2
 8007e66:	2e00      	cmp	r6, #0
 8007e68:	d17f      	bne.n	8007f6a <_dtoa_r+0x49a>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e1      	bne.n	8007e32 <_dtoa_r+0x362>
 8007e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8087 	beq.w	8007f84 <_dtoa_r+0x4b4>
 8007e76:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	4b93      	ldr	r3, [pc, #588]	; (80080cc <_dtoa_r+0x5fc>)
 8007e7e:	4630      	mov	r0, r6
 8007e80:	4639      	mov	r1, r7
 8007e82:	f7f8 fdd7 	bl	8000a34 <__aeabi_dcmplt>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d07c      	beq.n	8007f84 <_dtoa_r+0x4b4>
 8007e8a:	f1b9 0f00 	cmp.w	r9, #0
 8007e8e:	d079      	beq.n	8007f84 <_dtoa_r+0x4b4>
 8007e90:	9b02      	ldr	r3, [sp, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dd35      	ble.n	8007f02 <_dtoa_r+0x432>
 8007e96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e9a:	9308      	str	r3, [sp, #32]
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4b8b      	ldr	r3, [pc, #556]	; (80080d0 <_dtoa_r+0x600>)
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f7f8 fb54 	bl	8000550 <__aeabi_dmul>
 8007ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8007eac:	9f02      	ldr	r7, [sp, #8]
 8007eae:	3501      	adds	r5, #1
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f7f8 fae3 	bl	800047c <__aeabi_i2d>
 8007eb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eba:	f7f8 fb49 	bl	8000550 <__aeabi_dmul>
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	4b84      	ldr	r3, [pc, #528]	; (80080d4 <_dtoa_r+0x604>)
 8007ec2:	f7f8 f98f 	bl	80001e4 <__adddf3>
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007ecc:	2f00      	cmp	r7, #0
 8007ece:	d15d      	bne.n	8007f8c <_dtoa_r+0x4bc>
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	4b81      	ldr	r3, [pc, #516]	; (80080d8 <_dtoa_r+0x608>)
 8007ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ed8:	f7f8 f982 	bl	80001e0 <__aeabi_dsub>
 8007edc:	462a      	mov	r2, r5
 8007ede:	4633      	mov	r3, r6
 8007ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8007ee4:	f7f8 fdc4 	bl	8000a70 <__aeabi_dcmpgt>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	f040 8288 	bne.w	80083fe <_dtoa_r+0x92e>
 8007eee:	462a      	mov	r2, r5
 8007ef0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ef8:	f7f8 fd9c 	bl	8000a34 <__aeabi_dcmplt>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	f040 827c 	bne.w	80083fa <_dtoa_r+0x92a>
 8007f02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f06:	e9cd 2300 	strd	r2, r3, [sp]
 8007f0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f2c0 8150 	blt.w	80081b2 <_dtoa_r+0x6e2>
 8007f12:	f1ba 0f0e 	cmp.w	sl, #14
 8007f16:	f300 814c 	bgt.w	80081b2 <_dtoa_r+0x6e2>
 8007f1a:	4b6a      	ldr	r3, [pc, #424]	; (80080c4 <_dtoa_r+0x5f4>)
 8007f1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f20:	ed93 7b00 	vldr	d7, [r3]
 8007f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f2c:	f280 80d8 	bge.w	80080e0 <_dtoa_r+0x610>
 8007f30:	f1b9 0f00 	cmp.w	r9, #0
 8007f34:	f300 80d4 	bgt.w	80080e0 <_dtoa_r+0x610>
 8007f38:	f040 825e 	bne.w	80083f8 <_dtoa_r+0x928>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4b66      	ldr	r3, [pc, #408]	; (80080d8 <_dtoa_r+0x608>)
 8007f40:	ec51 0b17 	vmov	r0, r1, d7
 8007f44:	f7f8 fb04 	bl	8000550 <__aeabi_dmul>
 8007f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f4c:	f7f8 fd86 	bl	8000a5c <__aeabi_dcmpge>
 8007f50:	464f      	mov	r7, r9
 8007f52:	464e      	mov	r6, r9
 8007f54:	2800      	cmp	r0, #0
 8007f56:	f040 8234 	bne.w	80083c2 <_dtoa_r+0x8f2>
 8007f5a:	2331      	movs	r3, #49	; 0x31
 8007f5c:	f10b 0501 	add.w	r5, fp, #1
 8007f60:	f88b 3000 	strb.w	r3, [fp]
 8007f64:	f10a 0a01 	add.w	sl, sl, #1
 8007f68:	e22f      	b.n	80083ca <_dtoa_r+0x8fa>
 8007f6a:	07f2      	lsls	r2, r6, #31
 8007f6c:	d505      	bpl.n	8007f7a <_dtoa_r+0x4aa>
 8007f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f72:	f7f8 faed 	bl	8000550 <__aeabi_dmul>
 8007f76:	3501      	adds	r5, #1
 8007f78:	2301      	movs	r3, #1
 8007f7a:	1076      	asrs	r6, r6, #1
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	e772      	b.n	8007e66 <_dtoa_r+0x396>
 8007f80:	2502      	movs	r5, #2
 8007f82:	e774      	b.n	8007e6e <_dtoa_r+0x39e>
 8007f84:	f8cd a020 	str.w	sl, [sp, #32]
 8007f88:	464f      	mov	r7, r9
 8007f8a:	e791      	b.n	8007eb0 <_dtoa_r+0x3e0>
 8007f8c:	4b4d      	ldr	r3, [pc, #308]	; (80080c4 <_dtoa_r+0x5f4>)
 8007f8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d047      	beq.n	800802c <_dtoa_r+0x55c>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	494e      	ldr	r1, [pc, #312]	; (80080dc <_dtoa_r+0x60c>)
 8007fa4:	f7f8 fbfe 	bl	80007a4 <__aeabi_ddiv>
 8007fa8:	462a      	mov	r2, r5
 8007faa:	4633      	mov	r3, r6
 8007fac:	f7f8 f918 	bl	80001e0 <__aeabi_dsub>
 8007fb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007fb4:	465d      	mov	r5, fp
 8007fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fba:	f7f8 fd79 	bl	8000ab0 <__aeabi_d2iz>
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	f7f8 fa5c 	bl	800047c <__aeabi_i2d>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fcc:	f7f8 f908 	bl	80001e0 <__aeabi_dsub>
 8007fd0:	3630      	adds	r6, #48	; 0x30
 8007fd2:	f805 6b01 	strb.w	r6, [r5], #1
 8007fd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007fda:	e9cd 0100 	strd	r0, r1, [sp]
 8007fde:	f7f8 fd29 	bl	8000a34 <__aeabi_dcmplt>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d163      	bne.n	80080ae <_dtoa_r+0x5de>
 8007fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fea:	2000      	movs	r0, #0
 8007fec:	4937      	ldr	r1, [pc, #220]	; (80080cc <_dtoa_r+0x5fc>)
 8007fee:	f7f8 f8f7 	bl	80001e0 <__aeabi_dsub>
 8007ff2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ff6:	f7f8 fd1d 	bl	8000a34 <__aeabi_dcmplt>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	f040 80b7 	bne.w	800816e <_dtoa_r+0x69e>
 8008000:	eba5 030b 	sub.w	r3, r5, fp
 8008004:	429f      	cmp	r7, r3
 8008006:	f77f af7c 	ble.w	8007f02 <_dtoa_r+0x432>
 800800a:	2200      	movs	r2, #0
 800800c:	4b30      	ldr	r3, [pc, #192]	; (80080d0 <_dtoa_r+0x600>)
 800800e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008012:	f7f8 fa9d 	bl	8000550 <__aeabi_dmul>
 8008016:	2200      	movs	r2, #0
 8008018:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800801c:	4b2c      	ldr	r3, [pc, #176]	; (80080d0 <_dtoa_r+0x600>)
 800801e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008022:	f7f8 fa95 	bl	8000550 <__aeabi_dmul>
 8008026:	e9cd 0100 	strd	r0, r1, [sp]
 800802a:	e7c4      	b.n	8007fb6 <_dtoa_r+0x4e6>
 800802c:	462a      	mov	r2, r5
 800802e:	4633      	mov	r3, r6
 8008030:	f7f8 fa8e 	bl	8000550 <__aeabi_dmul>
 8008034:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008038:	eb0b 0507 	add.w	r5, fp, r7
 800803c:	465e      	mov	r6, fp
 800803e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008042:	f7f8 fd35 	bl	8000ab0 <__aeabi_d2iz>
 8008046:	4607      	mov	r7, r0
 8008048:	f7f8 fa18 	bl	800047c <__aeabi_i2d>
 800804c:	3730      	adds	r7, #48	; 0x30
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008056:	f7f8 f8c3 	bl	80001e0 <__aeabi_dsub>
 800805a:	f806 7b01 	strb.w	r7, [r6], #1
 800805e:	42ae      	cmp	r6, r5
 8008060:	e9cd 0100 	strd	r0, r1, [sp]
 8008064:	f04f 0200 	mov.w	r2, #0
 8008068:	d126      	bne.n	80080b8 <_dtoa_r+0x5e8>
 800806a:	4b1c      	ldr	r3, [pc, #112]	; (80080dc <_dtoa_r+0x60c>)
 800806c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008070:	f7f8 f8b8 	bl	80001e4 <__adddf3>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	e9dd 0100 	ldrd	r0, r1, [sp]
 800807c:	f7f8 fcf8 	bl	8000a70 <__aeabi_dcmpgt>
 8008080:	2800      	cmp	r0, #0
 8008082:	d174      	bne.n	800816e <_dtoa_r+0x69e>
 8008084:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008088:	2000      	movs	r0, #0
 800808a:	4914      	ldr	r1, [pc, #80]	; (80080dc <_dtoa_r+0x60c>)
 800808c:	f7f8 f8a8 	bl	80001e0 <__aeabi_dsub>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008098:	f7f8 fccc 	bl	8000a34 <__aeabi_dcmplt>
 800809c:	2800      	cmp	r0, #0
 800809e:	f43f af30 	beq.w	8007f02 <_dtoa_r+0x432>
 80080a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080a6:	2b30      	cmp	r3, #48	; 0x30
 80080a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80080ac:	d002      	beq.n	80080b4 <_dtoa_r+0x5e4>
 80080ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80080b2:	e04a      	b.n	800814a <_dtoa_r+0x67a>
 80080b4:	4615      	mov	r5, r2
 80080b6:	e7f4      	b.n	80080a2 <_dtoa_r+0x5d2>
 80080b8:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <_dtoa_r+0x600>)
 80080ba:	f7f8 fa49 	bl	8000550 <__aeabi_dmul>
 80080be:	e9cd 0100 	strd	r0, r1, [sp]
 80080c2:	e7bc      	b.n	800803e <_dtoa_r+0x56e>
 80080c4:	0800a9e0 	.word	0x0800a9e0
 80080c8:	0800a9b8 	.word	0x0800a9b8
 80080cc:	3ff00000 	.word	0x3ff00000
 80080d0:	40240000 	.word	0x40240000
 80080d4:	401c0000 	.word	0x401c0000
 80080d8:	40140000 	.word	0x40140000
 80080dc:	3fe00000 	.word	0x3fe00000
 80080e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080e4:	465d      	mov	r5, fp
 80080e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080ea:	4630      	mov	r0, r6
 80080ec:	4639      	mov	r1, r7
 80080ee:	f7f8 fb59 	bl	80007a4 <__aeabi_ddiv>
 80080f2:	f7f8 fcdd 	bl	8000ab0 <__aeabi_d2iz>
 80080f6:	4680      	mov	r8, r0
 80080f8:	f7f8 f9c0 	bl	800047c <__aeabi_i2d>
 80080fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008100:	f7f8 fa26 	bl	8000550 <__aeabi_dmul>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4630      	mov	r0, r6
 800810a:	4639      	mov	r1, r7
 800810c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008110:	f7f8 f866 	bl	80001e0 <__aeabi_dsub>
 8008114:	f805 6b01 	strb.w	r6, [r5], #1
 8008118:	eba5 060b 	sub.w	r6, r5, fp
 800811c:	45b1      	cmp	r9, r6
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	d139      	bne.n	8008198 <_dtoa_r+0x6c8>
 8008124:	f7f8 f85e 	bl	80001e4 <__adddf3>
 8008128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800812c:	4606      	mov	r6, r0
 800812e:	460f      	mov	r7, r1
 8008130:	f7f8 fc9e 	bl	8000a70 <__aeabi_dcmpgt>
 8008134:	b9c8      	cbnz	r0, 800816a <_dtoa_r+0x69a>
 8008136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800813a:	4630      	mov	r0, r6
 800813c:	4639      	mov	r1, r7
 800813e:	f7f8 fc6f 	bl	8000a20 <__aeabi_dcmpeq>
 8008142:	b110      	cbz	r0, 800814a <_dtoa_r+0x67a>
 8008144:	f018 0f01 	tst.w	r8, #1
 8008148:	d10f      	bne.n	800816a <_dtoa_r+0x69a>
 800814a:	9904      	ldr	r1, [sp, #16]
 800814c:	4620      	mov	r0, r4
 800814e:	f000 facc 	bl	80086ea <_Bfree>
 8008152:	2300      	movs	r3, #0
 8008154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008156:	702b      	strb	r3, [r5, #0]
 8008158:	f10a 0301 	add.w	r3, sl, #1
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 8241 	beq.w	80085e8 <_dtoa_r+0xb18>
 8008166:	601d      	str	r5, [r3, #0]
 8008168:	e23e      	b.n	80085e8 <_dtoa_r+0xb18>
 800816a:	f8cd a020 	str.w	sl, [sp, #32]
 800816e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008172:	2a39      	cmp	r2, #57	; 0x39
 8008174:	f105 33ff 	add.w	r3, r5, #4294967295
 8008178:	d108      	bne.n	800818c <_dtoa_r+0x6bc>
 800817a:	459b      	cmp	fp, r3
 800817c:	d10a      	bne.n	8008194 <_dtoa_r+0x6c4>
 800817e:	9b08      	ldr	r3, [sp, #32]
 8008180:	3301      	adds	r3, #1
 8008182:	9308      	str	r3, [sp, #32]
 8008184:	2330      	movs	r3, #48	; 0x30
 8008186:	f88b 3000 	strb.w	r3, [fp]
 800818a:	465b      	mov	r3, fp
 800818c:	781a      	ldrb	r2, [r3, #0]
 800818e:	3201      	adds	r2, #1
 8008190:	701a      	strb	r2, [r3, #0]
 8008192:	e78c      	b.n	80080ae <_dtoa_r+0x5de>
 8008194:	461d      	mov	r5, r3
 8008196:	e7ea      	b.n	800816e <_dtoa_r+0x69e>
 8008198:	2200      	movs	r2, #0
 800819a:	4b9b      	ldr	r3, [pc, #620]	; (8008408 <_dtoa_r+0x938>)
 800819c:	f7f8 f9d8 	bl	8000550 <__aeabi_dmul>
 80081a0:	2200      	movs	r2, #0
 80081a2:	2300      	movs	r3, #0
 80081a4:	4606      	mov	r6, r0
 80081a6:	460f      	mov	r7, r1
 80081a8:	f7f8 fc3a 	bl	8000a20 <__aeabi_dcmpeq>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d09a      	beq.n	80080e6 <_dtoa_r+0x616>
 80081b0:	e7cb      	b.n	800814a <_dtoa_r+0x67a>
 80081b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081b4:	2a00      	cmp	r2, #0
 80081b6:	f000 808b 	beq.w	80082d0 <_dtoa_r+0x800>
 80081ba:	9a06      	ldr	r2, [sp, #24]
 80081bc:	2a01      	cmp	r2, #1
 80081be:	dc6e      	bgt.n	800829e <_dtoa_r+0x7ce>
 80081c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	d067      	beq.n	8008296 <_dtoa_r+0x7c6>
 80081c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081ca:	9f07      	ldr	r7, [sp, #28]
 80081cc:	9d05      	ldr	r5, [sp, #20]
 80081ce:	9a05      	ldr	r2, [sp, #20]
 80081d0:	2101      	movs	r1, #1
 80081d2:	441a      	add	r2, r3
 80081d4:	4620      	mov	r0, r4
 80081d6:	9205      	str	r2, [sp, #20]
 80081d8:	4498      	add	r8, r3
 80081da:	f000 fb26 	bl	800882a <__i2b>
 80081de:	4606      	mov	r6, r0
 80081e0:	2d00      	cmp	r5, #0
 80081e2:	dd0c      	ble.n	80081fe <_dtoa_r+0x72e>
 80081e4:	f1b8 0f00 	cmp.w	r8, #0
 80081e8:	dd09      	ble.n	80081fe <_dtoa_r+0x72e>
 80081ea:	4545      	cmp	r5, r8
 80081ec:	9a05      	ldr	r2, [sp, #20]
 80081ee:	462b      	mov	r3, r5
 80081f0:	bfa8      	it	ge
 80081f2:	4643      	movge	r3, r8
 80081f4:	1ad2      	subs	r2, r2, r3
 80081f6:	9205      	str	r2, [sp, #20]
 80081f8:	1aed      	subs	r5, r5, r3
 80081fa:	eba8 0803 	sub.w	r8, r8, r3
 80081fe:	9b07      	ldr	r3, [sp, #28]
 8008200:	b1eb      	cbz	r3, 800823e <_dtoa_r+0x76e>
 8008202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008204:	2b00      	cmp	r3, #0
 8008206:	d067      	beq.n	80082d8 <_dtoa_r+0x808>
 8008208:	b18f      	cbz	r7, 800822e <_dtoa_r+0x75e>
 800820a:	4631      	mov	r1, r6
 800820c:	463a      	mov	r2, r7
 800820e:	4620      	mov	r0, r4
 8008210:	f000 fbaa 	bl	8008968 <__pow5mult>
 8008214:	9a04      	ldr	r2, [sp, #16]
 8008216:	4601      	mov	r1, r0
 8008218:	4606      	mov	r6, r0
 800821a:	4620      	mov	r0, r4
 800821c:	f000 fb0e 	bl	800883c <__multiply>
 8008220:	9904      	ldr	r1, [sp, #16]
 8008222:	9008      	str	r0, [sp, #32]
 8008224:	4620      	mov	r0, r4
 8008226:	f000 fa60 	bl	80086ea <_Bfree>
 800822a:	9b08      	ldr	r3, [sp, #32]
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	9b07      	ldr	r3, [sp, #28]
 8008230:	1bda      	subs	r2, r3, r7
 8008232:	d004      	beq.n	800823e <_dtoa_r+0x76e>
 8008234:	9904      	ldr	r1, [sp, #16]
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fb96 	bl	8008968 <__pow5mult>
 800823c:	9004      	str	r0, [sp, #16]
 800823e:	2101      	movs	r1, #1
 8008240:	4620      	mov	r0, r4
 8008242:	f000 faf2 	bl	800882a <__i2b>
 8008246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008248:	4607      	mov	r7, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 81d0 	beq.w	80085f0 <_dtoa_r+0xb20>
 8008250:	461a      	mov	r2, r3
 8008252:	4601      	mov	r1, r0
 8008254:	4620      	mov	r0, r4
 8008256:	f000 fb87 	bl	8008968 <__pow5mult>
 800825a:	9b06      	ldr	r3, [sp, #24]
 800825c:	2b01      	cmp	r3, #1
 800825e:	4607      	mov	r7, r0
 8008260:	dc40      	bgt.n	80082e4 <_dtoa_r+0x814>
 8008262:	9b00      	ldr	r3, [sp, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d139      	bne.n	80082dc <_dtoa_r+0x80c>
 8008268:	9b01      	ldr	r3, [sp, #4]
 800826a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800826e:	2b00      	cmp	r3, #0
 8008270:	d136      	bne.n	80082e0 <_dtoa_r+0x810>
 8008272:	9b01      	ldr	r3, [sp, #4]
 8008274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008278:	0d1b      	lsrs	r3, r3, #20
 800827a:	051b      	lsls	r3, r3, #20
 800827c:	b12b      	cbz	r3, 800828a <_dtoa_r+0x7ba>
 800827e:	9b05      	ldr	r3, [sp, #20]
 8008280:	3301      	adds	r3, #1
 8008282:	9305      	str	r3, [sp, #20]
 8008284:	f108 0801 	add.w	r8, r8, #1
 8008288:	2301      	movs	r3, #1
 800828a:	9307      	str	r3, [sp, #28]
 800828c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800828e:	2b00      	cmp	r3, #0
 8008290:	d12a      	bne.n	80082e8 <_dtoa_r+0x818>
 8008292:	2001      	movs	r0, #1
 8008294:	e030      	b.n	80082f8 <_dtoa_r+0x828>
 8008296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008298:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800829c:	e795      	b.n	80081ca <_dtoa_r+0x6fa>
 800829e:	9b07      	ldr	r3, [sp, #28]
 80082a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80082a4:	42bb      	cmp	r3, r7
 80082a6:	bfbf      	itttt	lt
 80082a8:	9b07      	ldrlt	r3, [sp, #28]
 80082aa:	9707      	strlt	r7, [sp, #28]
 80082ac:	1afa      	sublt	r2, r7, r3
 80082ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80082b0:	bfbb      	ittet	lt
 80082b2:	189b      	addlt	r3, r3, r2
 80082b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80082b6:	1bdf      	subge	r7, r3, r7
 80082b8:	2700      	movlt	r7, #0
 80082ba:	f1b9 0f00 	cmp.w	r9, #0
 80082be:	bfb5      	itete	lt
 80082c0:	9b05      	ldrlt	r3, [sp, #20]
 80082c2:	9d05      	ldrge	r5, [sp, #20]
 80082c4:	eba3 0509 	sublt.w	r5, r3, r9
 80082c8:	464b      	movge	r3, r9
 80082ca:	bfb8      	it	lt
 80082cc:	2300      	movlt	r3, #0
 80082ce:	e77e      	b.n	80081ce <_dtoa_r+0x6fe>
 80082d0:	9f07      	ldr	r7, [sp, #28]
 80082d2:	9d05      	ldr	r5, [sp, #20]
 80082d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80082d6:	e783      	b.n	80081e0 <_dtoa_r+0x710>
 80082d8:	9a07      	ldr	r2, [sp, #28]
 80082da:	e7ab      	b.n	8008234 <_dtoa_r+0x764>
 80082dc:	2300      	movs	r3, #0
 80082de:	e7d4      	b.n	800828a <_dtoa_r+0x7ba>
 80082e0:	9b00      	ldr	r3, [sp, #0]
 80082e2:	e7d2      	b.n	800828a <_dtoa_r+0x7ba>
 80082e4:	2300      	movs	r3, #0
 80082e6:	9307      	str	r3, [sp, #28]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80082ee:	6918      	ldr	r0, [r3, #16]
 80082f0:	f000 fa4d 	bl	800878e <__hi0bits>
 80082f4:	f1c0 0020 	rsb	r0, r0, #32
 80082f8:	4440      	add	r0, r8
 80082fa:	f010 001f 	ands.w	r0, r0, #31
 80082fe:	d047      	beq.n	8008390 <_dtoa_r+0x8c0>
 8008300:	f1c0 0320 	rsb	r3, r0, #32
 8008304:	2b04      	cmp	r3, #4
 8008306:	dd3b      	ble.n	8008380 <_dtoa_r+0x8b0>
 8008308:	9b05      	ldr	r3, [sp, #20]
 800830a:	f1c0 001c 	rsb	r0, r0, #28
 800830e:	4403      	add	r3, r0
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	4405      	add	r5, r0
 8008314:	4480      	add	r8, r0
 8008316:	9b05      	ldr	r3, [sp, #20]
 8008318:	2b00      	cmp	r3, #0
 800831a:	dd05      	ble.n	8008328 <_dtoa_r+0x858>
 800831c:	461a      	mov	r2, r3
 800831e:	9904      	ldr	r1, [sp, #16]
 8008320:	4620      	mov	r0, r4
 8008322:	f000 fb6f 	bl	8008a04 <__lshift>
 8008326:	9004      	str	r0, [sp, #16]
 8008328:	f1b8 0f00 	cmp.w	r8, #0
 800832c:	dd05      	ble.n	800833a <_dtoa_r+0x86a>
 800832e:	4639      	mov	r1, r7
 8008330:	4642      	mov	r2, r8
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fb66 	bl	8008a04 <__lshift>
 8008338:	4607      	mov	r7, r0
 800833a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800833c:	b353      	cbz	r3, 8008394 <_dtoa_r+0x8c4>
 800833e:	4639      	mov	r1, r7
 8008340:	9804      	ldr	r0, [sp, #16]
 8008342:	f000 fbb3 	bl	8008aac <__mcmp>
 8008346:	2800      	cmp	r0, #0
 8008348:	da24      	bge.n	8008394 <_dtoa_r+0x8c4>
 800834a:	2300      	movs	r3, #0
 800834c:	220a      	movs	r2, #10
 800834e:	9904      	ldr	r1, [sp, #16]
 8008350:	4620      	mov	r0, r4
 8008352:	f000 f9e1 	bl	8008718 <__multadd>
 8008356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008358:	9004      	str	r0, [sp, #16]
 800835a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 814d 	beq.w	80085fe <_dtoa_r+0xb2e>
 8008364:	2300      	movs	r3, #0
 8008366:	4631      	mov	r1, r6
 8008368:	220a      	movs	r2, #10
 800836a:	4620      	mov	r0, r4
 800836c:	f000 f9d4 	bl	8008718 <__multadd>
 8008370:	9b02      	ldr	r3, [sp, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	4606      	mov	r6, r0
 8008376:	dc4f      	bgt.n	8008418 <_dtoa_r+0x948>
 8008378:	9b06      	ldr	r3, [sp, #24]
 800837a:	2b02      	cmp	r3, #2
 800837c:	dd4c      	ble.n	8008418 <_dtoa_r+0x948>
 800837e:	e011      	b.n	80083a4 <_dtoa_r+0x8d4>
 8008380:	d0c9      	beq.n	8008316 <_dtoa_r+0x846>
 8008382:	9a05      	ldr	r2, [sp, #20]
 8008384:	331c      	adds	r3, #28
 8008386:	441a      	add	r2, r3
 8008388:	9205      	str	r2, [sp, #20]
 800838a:	441d      	add	r5, r3
 800838c:	4498      	add	r8, r3
 800838e:	e7c2      	b.n	8008316 <_dtoa_r+0x846>
 8008390:	4603      	mov	r3, r0
 8008392:	e7f6      	b.n	8008382 <_dtoa_r+0x8b2>
 8008394:	f1b9 0f00 	cmp.w	r9, #0
 8008398:	dc38      	bgt.n	800840c <_dtoa_r+0x93c>
 800839a:	9b06      	ldr	r3, [sp, #24]
 800839c:	2b02      	cmp	r3, #2
 800839e:	dd35      	ble.n	800840c <_dtoa_r+0x93c>
 80083a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80083a4:	9b02      	ldr	r3, [sp, #8]
 80083a6:	b963      	cbnz	r3, 80083c2 <_dtoa_r+0x8f2>
 80083a8:	4639      	mov	r1, r7
 80083aa:	2205      	movs	r2, #5
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 f9b3 	bl	8008718 <__multadd>
 80083b2:	4601      	mov	r1, r0
 80083b4:	4607      	mov	r7, r0
 80083b6:	9804      	ldr	r0, [sp, #16]
 80083b8:	f000 fb78 	bl	8008aac <__mcmp>
 80083bc:	2800      	cmp	r0, #0
 80083be:	f73f adcc 	bgt.w	8007f5a <_dtoa_r+0x48a>
 80083c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083c4:	465d      	mov	r5, fp
 80083c6:	ea6f 0a03 	mvn.w	sl, r3
 80083ca:	f04f 0900 	mov.w	r9, #0
 80083ce:	4639      	mov	r1, r7
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 f98a 	bl	80086ea <_Bfree>
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	f43f aeb7 	beq.w	800814a <_dtoa_r+0x67a>
 80083dc:	f1b9 0f00 	cmp.w	r9, #0
 80083e0:	d005      	beq.n	80083ee <_dtoa_r+0x91e>
 80083e2:	45b1      	cmp	r9, r6
 80083e4:	d003      	beq.n	80083ee <_dtoa_r+0x91e>
 80083e6:	4649      	mov	r1, r9
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 f97e 	bl	80086ea <_Bfree>
 80083ee:	4631      	mov	r1, r6
 80083f0:	4620      	mov	r0, r4
 80083f2:	f000 f97a 	bl	80086ea <_Bfree>
 80083f6:	e6a8      	b.n	800814a <_dtoa_r+0x67a>
 80083f8:	2700      	movs	r7, #0
 80083fa:	463e      	mov	r6, r7
 80083fc:	e7e1      	b.n	80083c2 <_dtoa_r+0x8f2>
 80083fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008402:	463e      	mov	r6, r7
 8008404:	e5a9      	b.n	8007f5a <_dtoa_r+0x48a>
 8008406:	bf00      	nop
 8008408:	40240000 	.word	0x40240000
 800840c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800840e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 80fa 	beq.w	800860c <_dtoa_r+0xb3c>
 8008418:	2d00      	cmp	r5, #0
 800841a:	dd05      	ble.n	8008428 <_dtoa_r+0x958>
 800841c:	4631      	mov	r1, r6
 800841e:	462a      	mov	r2, r5
 8008420:	4620      	mov	r0, r4
 8008422:	f000 faef 	bl	8008a04 <__lshift>
 8008426:	4606      	mov	r6, r0
 8008428:	9b07      	ldr	r3, [sp, #28]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d04c      	beq.n	80084c8 <_dtoa_r+0x9f8>
 800842e:	6871      	ldr	r1, [r6, #4]
 8008430:	4620      	mov	r0, r4
 8008432:	f000 f926 	bl	8008682 <_Balloc>
 8008436:	6932      	ldr	r2, [r6, #16]
 8008438:	3202      	adds	r2, #2
 800843a:	4605      	mov	r5, r0
 800843c:	0092      	lsls	r2, r2, #2
 800843e:	f106 010c 	add.w	r1, r6, #12
 8008442:	300c      	adds	r0, #12
 8008444:	f000 f912 	bl	800866c <memcpy>
 8008448:	2201      	movs	r2, #1
 800844a:	4629      	mov	r1, r5
 800844c:	4620      	mov	r0, r4
 800844e:	f000 fad9 	bl	8008a04 <__lshift>
 8008452:	9b00      	ldr	r3, [sp, #0]
 8008454:	f8cd b014 	str.w	fp, [sp, #20]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	46b1      	mov	r9, r6
 800845e:	9307      	str	r3, [sp, #28]
 8008460:	4606      	mov	r6, r0
 8008462:	4639      	mov	r1, r7
 8008464:	9804      	ldr	r0, [sp, #16]
 8008466:	f7ff faa4 	bl	80079b2 <quorem>
 800846a:	4649      	mov	r1, r9
 800846c:	4605      	mov	r5, r0
 800846e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008472:	9804      	ldr	r0, [sp, #16]
 8008474:	f000 fb1a 	bl	8008aac <__mcmp>
 8008478:	4632      	mov	r2, r6
 800847a:	9000      	str	r0, [sp, #0]
 800847c:	4639      	mov	r1, r7
 800847e:	4620      	mov	r0, r4
 8008480:	f000 fb2e 	bl	8008ae0 <__mdiff>
 8008484:	68c3      	ldr	r3, [r0, #12]
 8008486:	4602      	mov	r2, r0
 8008488:	bb03      	cbnz	r3, 80084cc <_dtoa_r+0x9fc>
 800848a:	4601      	mov	r1, r0
 800848c:	9008      	str	r0, [sp, #32]
 800848e:	9804      	ldr	r0, [sp, #16]
 8008490:	f000 fb0c 	bl	8008aac <__mcmp>
 8008494:	9a08      	ldr	r2, [sp, #32]
 8008496:	4603      	mov	r3, r0
 8008498:	4611      	mov	r1, r2
 800849a:	4620      	mov	r0, r4
 800849c:	9308      	str	r3, [sp, #32]
 800849e:	f000 f924 	bl	80086ea <_Bfree>
 80084a2:	9b08      	ldr	r3, [sp, #32]
 80084a4:	b9a3      	cbnz	r3, 80084d0 <_dtoa_r+0xa00>
 80084a6:	9a06      	ldr	r2, [sp, #24]
 80084a8:	b992      	cbnz	r2, 80084d0 <_dtoa_r+0xa00>
 80084aa:	9a07      	ldr	r2, [sp, #28]
 80084ac:	b982      	cbnz	r2, 80084d0 <_dtoa_r+0xa00>
 80084ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80084b2:	d029      	beq.n	8008508 <_dtoa_r+0xa38>
 80084b4:	9b00      	ldr	r3, [sp, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	dd01      	ble.n	80084be <_dtoa_r+0x9ee>
 80084ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80084be:	9b05      	ldr	r3, [sp, #20]
 80084c0:	1c5d      	adds	r5, r3, #1
 80084c2:	f883 8000 	strb.w	r8, [r3]
 80084c6:	e782      	b.n	80083ce <_dtoa_r+0x8fe>
 80084c8:	4630      	mov	r0, r6
 80084ca:	e7c2      	b.n	8008452 <_dtoa_r+0x982>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e7e3      	b.n	8008498 <_dtoa_r+0x9c8>
 80084d0:	9a00      	ldr	r2, [sp, #0]
 80084d2:	2a00      	cmp	r2, #0
 80084d4:	db04      	blt.n	80084e0 <_dtoa_r+0xa10>
 80084d6:	d125      	bne.n	8008524 <_dtoa_r+0xa54>
 80084d8:	9a06      	ldr	r2, [sp, #24]
 80084da:	bb1a      	cbnz	r2, 8008524 <_dtoa_r+0xa54>
 80084dc:	9a07      	ldr	r2, [sp, #28]
 80084de:	bb0a      	cbnz	r2, 8008524 <_dtoa_r+0xa54>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	ddec      	ble.n	80084be <_dtoa_r+0x9ee>
 80084e4:	2201      	movs	r2, #1
 80084e6:	9904      	ldr	r1, [sp, #16]
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 fa8b 	bl	8008a04 <__lshift>
 80084ee:	4639      	mov	r1, r7
 80084f0:	9004      	str	r0, [sp, #16]
 80084f2:	f000 fadb 	bl	8008aac <__mcmp>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	dc03      	bgt.n	8008502 <_dtoa_r+0xa32>
 80084fa:	d1e0      	bne.n	80084be <_dtoa_r+0x9ee>
 80084fc:	f018 0f01 	tst.w	r8, #1
 8008500:	d0dd      	beq.n	80084be <_dtoa_r+0x9ee>
 8008502:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008506:	d1d8      	bne.n	80084ba <_dtoa_r+0x9ea>
 8008508:	9b05      	ldr	r3, [sp, #20]
 800850a:	9a05      	ldr	r2, [sp, #20]
 800850c:	1c5d      	adds	r5, r3, #1
 800850e:	2339      	movs	r3, #57	; 0x39
 8008510:	7013      	strb	r3, [r2, #0]
 8008512:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008516:	2b39      	cmp	r3, #57	; 0x39
 8008518:	f105 32ff 	add.w	r2, r5, #4294967295
 800851c:	d04f      	beq.n	80085be <_dtoa_r+0xaee>
 800851e:	3301      	adds	r3, #1
 8008520:	7013      	strb	r3, [r2, #0]
 8008522:	e754      	b.n	80083ce <_dtoa_r+0x8fe>
 8008524:	9a05      	ldr	r2, [sp, #20]
 8008526:	2b00      	cmp	r3, #0
 8008528:	f102 0501 	add.w	r5, r2, #1
 800852c:	dd06      	ble.n	800853c <_dtoa_r+0xa6c>
 800852e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008532:	d0e9      	beq.n	8008508 <_dtoa_r+0xa38>
 8008534:	f108 0801 	add.w	r8, r8, #1
 8008538:	9b05      	ldr	r3, [sp, #20]
 800853a:	e7c2      	b.n	80084c2 <_dtoa_r+0x9f2>
 800853c:	9a02      	ldr	r2, [sp, #8]
 800853e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008542:	eba5 030b 	sub.w	r3, r5, fp
 8008546:	4293      	cmp	r3, r2
 8008548:	d021      	beq.n	800858e <_dtoa_r+0xabe>
 800854a:	2300      	movs	r3, #0
 800854c:	220a      	movs	r2, #10
 800854e:	9904      	ldr	r1, [sp, #16]
 8008550:	4620      	mov	r0, r4
 8008552:	f000 f8e1 	bl	8008718 <__multadd>
 8008556:	45b1      	cmp	r9, r6
 8008558:	9004      	str	r0, [sp, #16]
 800855a:	f04f 0300 	mov.w	r3, #0
 800855e:	f04f 020a 	mov.w	r2, #10
 8008562:	4649      	mov	r1, r9
 8008564:	4620      	mov	r0, r4
 8008566:	d105      	bne.n	8008574 <_dtoa_r+0xaa4>
 8008568:	f000 f8d6 	bl	8008718 <__multadd>
 800856c:	4681      	mov	r9, r0
 800856e:	4606      	mov	r6, r0
 8008570:	9505      	str	r5, [sp, #20]
 8008572:	e776      	b.n	8008462 <_dtoa_r+0x992>
 8008574:	f000 f8d0 	bl	8008718 <__multadd>
 8008578:	4631      	mov	r1, r6
 800857a:	4681      	mov	r9, r0
 800857c:	2300      	movs	r3, #0
 800857e:	220a      	movs	r2, #10
 8008580:	4620      	mov	r0, r4
 8008582:	f000 f8c9 	bl	8008718 <__multadd>
 8008586:	4606      	mov	r6, r0
 8008588:	e7f2      	b.n	8008570 <_dtoa_r+0xaa0>
 800858a:	f04f 0900 	mov.w	r9, #0
 800858e:	2201      	movs	r2, #1
 8008590:	9904      	ldr	r1, [sp, #16]
 8008592:	4620      	mov	r0, r4
 8008594:	f000 fa36 	bl	8008a04 <__lshift>
 8008598:	4639      	mov	r1, r7
 800859a:	9004      	str	r0, [sp, #16]
 800859c:	f000 fa86 	bl	8008aac <__mcmp>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	dcb6      	bgt.n	8008512 <_dtoa_r+0xa42>
 80085a4:	d102      	bne.n	80085ac <_dtoa_r+0xadc>
 80085a6:	f018 0f01 	tst.w	r8, #1
 80085aa:	d1b2      	bne.n	8008512 <_dtoa_r+0xa42>
 80085ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085b0:	2b30      	cmp	r3, #48	; 0x30
 80085b2:	f105 32ff 	add.w	r2, r5, #4294967295
 80085b6:	f47f af0a 	bne.w	80083ce <_dtoa_r+0x8fe>
 80085ba:	4615      	mov	r5, r2
 80085bc:	e7f6      	b.n	80085ac <_dtoa_r+0xadc>
 80085be:	4593      	cmp	fp, r2
 80085c0:	d105      	bne.n	80085ce <_dtoa_r+0xafe>
 80085c2:	2331      	movs	r3, #49	; 0x31
 80085c4:	f10a 0a01 	add.w	sl, sl, #1
 80085c8:	f88b 3000 	strb.w	r3, [fp]
 80085cc:	e6ff      	b.n	80083ce <_dtoa_r+0x8fe>
 80085ce:	4615      	mov	r5, r2
 80085d0:	e79f      	b.n	8008512 <_dtoa_r+0xa42>
 80085d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008638 <_dtoa_r+0xb68>
 80085d6:	e007      	b.n	80085e8 <_dtoa_r+0xb18>
 80085d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085da:	f8df b060 	ldr.w	fp, [pc, #96]	; 800863c <_dtoa_r+0xb6c>
 80085de:	b11b      	cbz	r3, 80085e8 <_dtoa_r+0xb18>
 80085e0:	f10b 0308 	add.w	r3, fp, #8
 80085e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	4658      	mov	r0, fp
 80085ea:	b017      	add	sp, #92	; 0x5c
 80085ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f0:	9b06      	ldr	r3, [sp, #24]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	f77f ae35 	ble.w	8008262 <_dtoa_r+0x792>
 80085f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085fa:	9307      	str	r3, [sp, #28]
 80085fc:	e649      	b.n	8008292 <_dtoa_r+0x7c2>
 80085fe:	9b02      	ldr	r3, [sp, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	dc03      	bgt.n	800860c <_dtoa_r+0xb3c>
 8008604:	9b06      	ldr	r3, [sp, #24]
 8008606:	2b02      	cmp	r3, #2
 8008608:	f73f aecc 	bgt.w	80083a4 <_dtoa_r+0x8d4>
 800860c:	465d      	mov	r5, fp
 800860e:	4639      	mov	r1, r7
 8008610:	9804      	ldr	r0, [sp, #16]
 8008612:	f7ff f9ce 	bl	80079b2 <quorem>
 8008616:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800861a:	f805 8b01 	strb.w	r8, [r5], #1
 800861e:	9a02      	ldr	r2, [sp, #8]
 8008620:	eba5 030b 	sub.w	r3, r5, fp
 8008624:	429a      	cmp	r2, r3
 8008626:	ddb0      	ble.n	800858a <_dtoa_r+0xaba>
 8008628:	2300      	movs	r3, #0
 800862a:	220a      	movs	r2, #10
 800862c:	9904      	ldr	r1, [sp, #16]
 800862e:	4620      	mov	r0, r4
 8008630:	f000 f872 	bl	8008718 <__multadd>
 8008634:	9004      	str	r0, [sp, #16]
 8008636:	e7ea      	b.n	800860e <_dtoa_r+0xb3e>
 8008638:	0800a944 	.word	0x0800a944
 800863c:	0800a946 	.word	0x0800a946

08008640 <_localeconv_r>:
 8008640:	4b04      	ldr	r3, [pc, #16]	; (8008654 <_localeconv_r+0x14>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6a18      	ldr	r0, [r3, #32]
 8008646:	4b04      	ldr	r3, [pc, #16]	; (8008658 <_localeconv_r+0x18>)
 8008648:	2800      	cmp	r0, #0
 800864a:	bf08      	it	eq
 800864c:	4618      	moveq	r0, r3
 800864e:	30f0      	adds	r0, #240	; 0xf0
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	20000030 	.word	0x20000030
 8008658:	20000094 	.word	0x20000094

0800865c <malloc>:
 800865c:	4b02      	ldr	r3, [pc, #8]	; (8008668 <malloc+0xc>)
 800865e:	4601      	mov	r1, r0
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f000 baf7 	b.w	8008c54 <_malloc_r>
 8008666:	bf00      	nop
 8008668:	20000030 	.word	0x20000030

0800866c <memcpy>:
 800866c:	b510      	push	{r4, lr}
 800866e:	1e43      	subs	r3, r0, #1
 8008670:	440a      	add	r2, r1
 8008672:	4291      	cmp	r1, r2
 8008674:	d100      	bne.n	8008678 <memcpy+0xc>
 8008676:	bd10      	pop	{r4, pc}
 8008678:	f811 4b01 	ldrb.w	r4, [r1], #1
 800867c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008680:	e7f7      	b.n	8008672 <memcpy+0x6>

08008682 <_Balloc>:
 8008682:	b570      	push	{r4, r5, r6, lr}
 8008684:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008686:	4604      	mov	r4, r0
 8008688:	460e      	mov	r6, r1
 800868a:	b93d      	cbnz	r5, 800869c <_Balloc+0x1a>
 800868c:	2010      	movs	r0, #16
 800868e:	f7ff ffe5 	bl	800865c <malloc>
 8008692:	6260      	str	r0, [r4, #36]	; 0x24
 8008694:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008698:	6005      	str	r5, [r0, #0]
 800869a:	60c5      	str	r5, [r0, #12]
 800869c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800869e:	68eb      	ldr	r3, [r5, #12]
 80086a0:	b183      	cbz	r3, 80086c4 <_Balloc+0x42>
 80086a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80086aa:	b9b8      	cbnz	r0, 80086dc <_Balloc+0x5a>
 80086ac:	2101      	movs	r1, #1
 80086ae:	fa01 f506 	lsl.w	r5, r1, r6
 80086b2:	1d6a      	adds	r2, r5, #5
 80086b4:	0092      	lsls	r2, r2, #2
 80086b6:	4620      	mov	r0, r4
 80086b8:	f000 fabe 	bl	8008c38 <_calloc_r>
 80086bc:	b160      	cbz	r0, 80086d8 <_Balloc+0x56>
 80086be:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80086c2:	e00e      	b.n	80086e2 <_Balloc+0x60>
 80086c4:	2221      	movs	r2, #33	; 0x21
 80086c6:	2104      	movs	r1, #4
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fab5 	bl	8008c38 <_calloc_r>
 80086ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086d0:	60e8      	str	r0, [r5, #12]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1e4      	bne.n	80086a2 <_Balloc+0x20>
 80086d8:	2000      	movs	r0, #0
 80086da:	bd70      	pop	{r4, r5, r6, pc}
 80086dc:	6802      	ldr	r2, [r0, #0]
 80086de:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80086e2:	2300      	movs	r3, #0
 80086e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086e8:	e7f7      	b.n	80086da <_Balloc+0x58>

080086ea <_Bfree>:
 80086ea:	b570      	push	{r4, r5, r6, lr}
 80086ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80086ee:	4606      	mov	r6, r0
 80086f0:	460d      	mov	r5, r1
 80086f2:	b93c      	cbnz	r4, 8008704 <_Bfree+0x1a>
 80086f4:	2010      	movs	r0, #16
 80086f6:	f7ff ffb1 	bl	800865c <malloc>
 80086fa:	6270      	str	r0, [r6, #36]	; 0x24
 80086fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008700:	6004      	str	r4, [r0, #0]
 8008702:	60c4      	str	r4, [r0, #12]
 8008704:	b13d      	cbz	r5, 8008716 <_Bfree+0x2c>
 8008706:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008708:	686a      	ldr	r2, [r5, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008710:	6029      	str	r1, [r5, #0]
 8008712:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008716:	bd70      	pop	{r4, r5, r6, pc}

08008718 <__multadd>:
 8008718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800871c:	690d      	ldr	r5, [r1, #16]
 800871e:	461f      	mov	r7, r3
 8008720:	4606      	mov	r6, r0
 8008722:	460c      	mov	r4, r1
 8008724:	f101 0c14 	add.w	ip, r1, #20
 8008728:	2300      	movs	r3, #0
 800872a:	f8dc 0000 	ldr.w	r0, [ip]
 800872e:	b281      	uxth	r1, r0
 8008730:	fb02 7101 	mla	r1, r2, r1, r7
 8008734:	0c0f      	lsrs	r7, r1, #16
 8008736:	0c00      	lsrs	r0, r0, #16
 8008738:	fb02 7000 	mla	r0, r2, r0, r7
 800873c:	b289      	uxth	r1, r1
 800873e:	3301      	adds	r3, #1
 8008740:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008744:	429d      	cmp	r5, r3
 8008746:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800874a:	f84c 1b04 	str.w	r1, [ip], #4
 800874e:	dcec      	bgt.n	800872a <__multadd+0x12>
 8008750:	b1d7      	cbz	r7, 8008788 <__multadd+0x70>
 8008752:	68a3      	ldr	r3, [r4, #8]
 8008754:	42ab      	cmp	r3, r5
 8008756:	dc12      	bgt.n	800877e <__multadd+0x66>
 8008758:	6861      	ldr	r1, [r4, #4]
 800875a:	4630      	mov	r0, r6
 800875c:	3101      	adds	r1, #1
 800875e:	f7ff ff90 	bl	8008682 <_Balloc>
 8008762:	6922      	ldr	r2, [r4, #16]
 8008764:	3202      	adds	r2, #2
 8008766:	f104 010c 	add.w	r1, r4, #12
 800876a:	4680      	mov	r8, r0
 800876c:	0092      	lsls	r2, r2, #2
 800876e:	300c      	adds	r0, #12
 8008770:	f7ff ff7c 	bl	800866c <memcpy>
 8008774:	4621      	mov	r1, r4
 8008776:	4630      	mov	r0, r6
 8008778:	f7ff ffb7 	bl	80086ea <_Bfree>
 800877c:	4644      	mov	r4, r8
 800877e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008782:	3501      	adds	r5, #1
 8008784:	615f      	str	r7, [r3, #20]
 8008786:	6125      	str	r5, [r4, #16]
 8008788:	4620      	mov	r0, r4
 800878a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800878e <__hi0bits>:
 800878e:	0c02      	lsrs	r2, r0, #16
 8008790:	0412      	lsls	r2, r2, #16
 8008792:	4603      	mov	r3, r0
 8008794:	b9b2      	cbnz	r2, 80087c4 <__hi0bits+0x36>
 8008796:	0403      	lsls	r3, r0, #16
 8008798:	2010      	movs	r0, #16
 800879a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800879e:	bf04      	itt	eq
 80087a0:	021b      	lsleq	r3, r3, #8
 80087a2:	3008      	addeq	r0, #8
 80087a4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80087a8:	bf04      	itt	eq
 80087aa:	011b      	lsleq	r3, r3, #4
 80087ac:	3004      	addeq	r0, #4
 80087ae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80087b2:	bf04      	itt	eq
 80087b4:	009b      	lsleq	r3, r3, #2
 80087b6:	3002      	addeq	r0, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	db06      	blt.n	80087ca <__hi0bits+0x3c>
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	d503      	bpl.n	80087c8 <__hi0bits+0x3a>
 80087c0:	3001      	adds	r0, #1
 80087c2:	4770      	bx	lr
 80087c4:	2000      	movs	r0, #0
 80087c6:	e7e8      	b.n	800879a <__hi0bits+0xc>
 80087c8:	2020      	movs	r0, #32
 80087ca:	4770      	bx	lr

080087cc <__lo0bits>:
 80087cc:	6803      	ldr	r3, [r0, #0]
 80087ce:	f013 0207 	ands.w	r2, r3, #7
 80087d2:	4601      	mov	r1, r0
 80087d4:	d00b      	beq.n	80087ee <__lo0bits+0x22>
 80087d6:	07da      	lsls	r2, r3, #31
 80087d8:	d423      	bmi.n	8008822 <__lo0bits+0x56>
 80087da:	0798      	lsls	r0, r3, #30
 80087dc:	bf49      	itett	mi
 80087de:	085b      	lsrmi	r3, r3, #1
 80087e0:	089b      	lsrpl	r3, r3, #2
 80087e2:	2001      	movmi	r0, #1
 80087e4:	600b      	strmi	r3, [r1, #0]
 80087e6:	bf5c      	itt	pl
 80087e8:	600b      	strpl	r3, [r1, #0]
 80087ea:	2002      	movpl	r0, #2
 80087ec:	4770      	bx	lr
 80087ee:	b298      	uxth	r0, r3
 80087f0:	b9a8      	cbnz	r0, 800881e <__lo0bits+0x52>
 80087f2:	0c1b      	lsrs	r3, r3, #16
 80087f4:	2010      	movs	r0, #16
 80087f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80087fa:	bf04      	itt	eq
 80087fc:	0a1b      	lsreq	r3, r3, #8
 80087fe:	3008      	addeq	r0, #8
 8008800:	071a      	lsls	r2, r3, #28
 8008802:	bf04      	itt	eq
 8008804:	091b      	lsreq	r3, r3, #4
 8008806:	3004      	addeq	r0, #4
 8008808:	079a      	lsls	r2, r3, #30
 800880a:	bf04      	itt	eq
 800880c:	089b      	lsreq	r3, r3, #2
 800880e:	3002      	addeq	r0, #2
 8008810:	07da      	lsls	r2, r3, #31
 8008812:	d402      	bmi.n	800881a <__lo0bits+0x4e>
 8008814:	085b      	lsrs	r3, r3, #1
 8008816:	d006      	beq.n	8008826 <__lo0bits+0x5a>
 8008818:	3001      	adds	r0, #1
 800881a:	600b      	str	r3, [r1, #0]
 800881c:	4770      	bx	lr
 800881e:	4610      	mov	r0, r2
 8008820:	e7e9      	b.n	80087f6 <__lo0bits+0x2a>
 8008822:	2000      	movs	r0, #0
 8008824:	4770      	bx	lr
 8008826:	2020      	movs	r0, #32
 8008828:	4770      	bx	lr

0800882a <__i2b>:
 800882a:	b510      	push	{r4, lr}
 800882c:	460c      	mov	r4, r1
 800882e:	2101      	movs	r1, #1
 8008830:	f7ff ff27 	bl	8008682 <_Balloc>
 8008834:	2201      	movs	r2, #1
 8008836:	6144      	str	r4, [r0, #20]
 8008838:	6102      	str	r2, [r0, #16]
 800883a:	bd10      	pop	{r4, pc}

0800883c <__multiply>:
 800883c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008840:	4614      	mov	r4, r2
 8008842:	690a      	ldr	r2, [r1, #16]
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	429a      	cmp	r2, r3
 8008848:	bfb8      	it	lt
 800884a:	460b      	movlt	r3, r1
 800884c:	4688      	mov	r8, r1
 800884e:	bfbc      	itt	lt
 8008850:	46a0      	movlt	r8, r4
 8008852:	461c      	movlt	r4, r3
 8008854:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008858:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800885c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008860:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008864:	eb07 0609 	add.w	r6, r7, r9
 8008868:	42b3      	cmp	r3, r6
 800886a:	bfb8      	it	lt
 800886c:	3101      	addlt	r1, #1
 800886e:	f7ff ff08 	bl	8008682 <_Balloc>
 8008872:	f100 0514 	add.w	r5, r0, #20
 8008876:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800887a:	462b      	mov	r3, r5
 800887c:	2200      	movs	r2, #0
 800887e:	4573      	cmp	r3, lr
 8008880:	d316      	bcc.n	80088b0 <__multiply+0x74>
 8008882:	f104 0214 	add.w	r2, r4, #20
 8008886:	f108 0114 	add.w	r1, r8, #20
 800888a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800888e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	9b00      	ldr	r3, [sp, #0]
 8008896:	9201      	str	r2, [sp, #4]
 8008898:	4293      	cmp	r3, r2
 800889a:	d80c      	bhi.n	80088b6 <__multiply+0x7a>
 800889c:	2e00      	cmp	r6, #0
 800889e:	dd03      	ble.n	80088a8 <__multiply+0x6c>
 80088a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d05d      	beq.n	8008964 <__multiply+0x128>
 80088a8:	6106      	str	r6, [r0, #16]
 80088aa:	b003      	add	sp, #12
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	f843 2b04 	str.w	r2, [r3], #4
 80088b4:	e7e3      	b.n	800887e <__multiply+0x42>
 80088b6:	f8b2 b000 	ldrh.w	fp, [r2]
 80088ba:	f1bb 0f00 	cmp.w	fp, #0
 80088be:	d023      	beq.n	8008908 <__multiply+0xcc>
 80088c0:	4689      	mov	r9, r1
 80088c2:	46ac      	mov	ip, r5
 80088c4:	f04f 0800 	mov.w	r8, #0
 80088c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80088cc:	f8dc a000 	ldr.w	sl, [ip]
 80088d0:	b2a3      	uxth	r3, r4
 80088d2:	fa1f fa8a 	uxth.w	sl, sl
 80088d6:	fb0b a303 	mla	r3, fp, r3, sl
 80088da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80088de:	f8dc 4000 	ldr.w	r4, [ip]
 80088e2:	4443      	add	r3, r8
 80088e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80088e8:	fb0b 840a 	mla	r4, fp, sl, r8
 80088ec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80088f0:	46e2      	mov	sl, ip
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80088f8:	454f      	cmp	r7, r9
 80088fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80088fe:	f84a 3b04 	str.w	r3, [sl], #4
 8008902:	d82b      	bhi.n	800895c <__multiply+0x120>
 8008904:	f8cc 8004 	str.w	r8, [ip, #4]
 8008908:	9b01      	ldr	r3, [sp, #4]
 800890a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800890e:	3204      	adds	r2, #4
 8008910:	f1ba 0f00 	cmp.w	sl, #0
 8008914:	d020      	beq.n	8008958 <__multiply+0x11c>
 8008916:	682b      	ldr	r3, [r5, #0]
 8008918:	4689      	mov	r9, r1
 800891a:	46a8      	mov	r8, r5
 800891c:	f04f 0b00 	mov.w	fp, #0
 8008920:	f8b9 c000 	ldrh.w	ip, [r9]
 8008924:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008928:	fb0a 440c 	mla	r4, sl, ip, r4
 800892c:	445c      	add	r4, fp
 800892e:	46c4      	mov	ip, r8
 8008930:	b29b      	uxth	r3, r3
 8008932:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008936:	f84c 3b04 	str.w	r3, [ip], #4
 800893a:	f859 3b04 	ldr.w	r3, [r9], #4
 800893e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008942:	0c1b      	lsrs	r3, r3, #16
 8008944:	fb0a b303 	mla	r3, sl, r3, fp
 8008948:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800894c:	454f      	cmp	r7, r9
 800894e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008952:	d805      	bhi.n	8008960 <__multiply+0x124>
 8008954:	f8c8 3004 	str.w	r3, [r8, #4]
 8008958:	3504      	adds	r5, #4
 800895a:	e79b      	b.n	8008894 <__multiply+0x58>
 800895c:	46d4      	mov	ip, sl
 800895e:	e7b3      	b.n	80088c8 <__multiply+0x8c>
 8008960:	46e0      	mov	r8, ip
 8008962:	e7dd      	b.n	8008920 <__multiply+0xe4>
 8008964:	3e01      	subs	r6, #1
 8008966:	e799      	b.n	800889c <__multiply+0x60>

08008968 <__pow5mult>:
 8008968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800896c:	4615      	mov	r5, r2
 800896e:	f012 0203 	ands.w	r2, r2, #3
 8008972:	4606      	mov	r6, r0
 8008974:	460f      	mov	r7, r1
 8008976:	d007      	beq.n	8008988 <__pow5mult+0x20>
 8008978:	3a01      	subs	r2, #1
 800897a:	4c21      	ldr	r4, [pc, #132]	; (8008a00 <__pow5mult+0x98>)
 800897c:	2300      	movs	r3, #0
 800897e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008982:	f7ff fec9 	bl	8008718 <__multadd>
 8008986:	4607      	mov	r7, r0
 8008988:	10ad      	asrs	r5, r5, #2
 800898a:	d035      	beq.n	80089f8 <__pow5mult+0x90>
 800898c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800898e:	b93c      	cbnz	r4, 80089a0 <__pow5mult+0x38>
 8008990:	2010      	movs	r0, #16
 8008992:	f7ff fe63 	bl	800865c <malloc>
 8008996:	6270      	str	r0, [r6, #36]	; 0x24
 8008998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800899c:	6004      	str	r4, [r0, #0]
 800899e:	60c4      	str	r4, [r0, #12]
 80089a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089a8:	b94c      	cbnz	r4, 80089be <__pow5mult+0x56>
 80089aa:	f240 2171 	movw	r1, #625	; 0x271
 80089ae:	4630      	mov	r0, r6
 80089b0:	f7ff ff3b 	bl	800882a <__i2b>
 80089b4:	2300      	movs	r3, #0
 80089b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80089ba:	4604      	mov	r4, r0
 80089bc:	6003      	str	r3, [r0, #0]
 80089be:	f04f 0800 	mov.w	r8, #0
 80089c2:	07eb      	lsls	r3, r5, #31
 80089c4:	d50a      	bpl.n	80089dc <__pow5mult+0x74>
 80089c6:	4639      	mov	r1, r7
 80089c8:	4622      	mov	r2, r4
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7ff ff36 	bl	800883c <__multiply>
 80089d0:	4639      	mov	r1, r7
 80089d2:	4681      	mov	r9, r0
 80089d4:	4630      	mov	r0, r6
 80089d6:	f7ff fe88 	bl	80086ea <_Bfree>
 80089da:	464f      	mov	r7, r9
 80089dc:	106d      	asrs	r5, r5, #1
 80089de:	d00b      	beq.n	80089f8 <__pow5mult+0x90>
 80089e0:	6820      	ldr	r0, [r4, #0]
 80089e2:	b938      	cbnz	r0, 80089f4 <__pow5mult+0x8c>
 80089e4:	4622      	mov	r2, r4
 80089e6:	4621      	mov	r1, r4
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7ff ff27 	bl	800883c <__multiply>
 80089ee:	6020      	str	r0, [r4, #0]
 80089f0:	f8c0 8000 	str.w	r8, [r0]
 80089f4:	4604      	mov	r4, r0
 80089f6:	e7e4      	b.n	80089c2 <__pow5mult+0x5a>
 80089f8:	4638      	mov	r0, r7
 80089fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fe:	bf00      	nop
 8008a00:	0800aaa8 	.word	0x0800aaa8

08008a04 <__lshift>:
 8008a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a08:	460c      	mov	r4, r1
 8008a0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a0e:	6923      	ldr	r3, [r4, #16]
 8008a10:	6849      	ldr	r1, [r1, #4]
 8008a12:	eb0a 0903 	add.w	r9, sl, r3
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	4607      	mov	r7, r0
 8008a1a:	4616      	mov	r6, r2
 8008a1c:	f109 0501 	add.w	r5, r9, #1
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	db32      	blt.n	8008a8a <__lshift+0x86>
 8008a24:	4638      	mov	r0, r7
 8008a26:	f7ff fe2c 	bl	8008682 <_Balloc>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	4680      	mov	r8, r0
 8008a2e:	f100 0114 	add.w	r1, r0, #20
 8008a32:	461a      	mov	r2, r3
 8008a34:	4553      	cmp	r3, sl
 8008a36:	db2b      	blt.n	8008a90 <__lshift+0x8c>
 8008a38:	6920      	ldr	r0, [r4, #16]
 8008a3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a3e:	f104 0314 	add.w	r3, r4, #20
 8008a42:	f016 021f 	ands.w	r2, r6, #31
 8008a46:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a4a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a4e:	d025      	beq.n	8008a9c <__lshift+0x98>
 8008a50:	f1c2 0e20 	rsb	lr, r2, #32
 8008a54:	2000      	movs	r0, #0
 8008a56:	681e      	ldr	r6, [r3, #0]
 8008a58:	468a      	mov	sl, r1
 8008a5a:	4096      	lsls	r6, r2
 8008a5c:	4330      	orrs	r0, r6
 8008a5e:	f84a 0b04 	str.w	r0, [sl], #4
 8008a62:	f853 0b04 	ldr.w	r0, [r3], #4
 8008a66:	459c      	cmp	ip, r3
 8008a68:	fa20 f00e 	lsr.w	r0, r0, lr
 8008a6c:	d814      	bhi.n	8008a98 <__lshift+0x94>
 8008a6e:	6048      	str	r0, [r1, #4]
 8008a70:	b108      	cbz	r0, 8008a76 <__lshift+0x72>
 8008a72:	f109 0502 	add.w	r5, r9, #2
 8008a76:	3d01      	subs	r5, #1
 8008a78:	4638      	mov	r0, r7
 8008a7a:	f8c8 5010 	str.w	r5, [r8, #16]
 8008a7e:	4621      	mov	r1, r4
 8008a80:	f7ff fe33 	bl	80086ea <_Bfree>
 8008a84:	4640      	mov	r0, r8
 8008a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8a:	3101      	adds	r1, #1
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	e7c7      	b.n	8008a20 <__lshift+0x1c>
 8008a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008a94:	3301      	adds	r3, #1
 8008a96:	e7cd      	b.n	8008a34 <__lshift+0x30>
 8008a98:	4651      	mov	r1, sl
 8008a9a:	e7dc      	b.n	8008a56 <__lshift+0x52>
 8008a9c:	3904      	subs	r1, #4
 8008a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa2:	f841 2f04 	str.w	r2, [r1, #4]!
 8008aa6:	459c      	cmp	ip, r3
 8008aa8:	d8f9      	bhi.n	8008a9e <__lshift+0x9a>
 8008aaa:	e7e4      	b.n	8008a76 <__lshift+0x72>

08008aac <__mcmp>:
 8008aac:	6903      	ldr	r3, [r0, #16]
 8008aae:	690a      	ldr	r2, [r1, #16]
 8008ab0:	1a9b      	subs	r3, r3, r2
 8008ab2:	b530      	push	{r4, r5, lr}
 8008ab4:	d10c      	bne.n	8008ad0 <__mcmp+0x24>
 8008ab6:	0092      	lsls	r2, r2, #2
 8008ab8:	3014      	adds	r0, #20
 8008aba:	3114      	adds	r1, #20
 8008abc:	1884      	adds	r4, r0, r2
 8008abe:	4411      	add	r1, r2
 8008ac0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ac4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ac8:	4295      	cmp	r5, r2
 8008aca:	d003      	beq.n	8008ad4 <__mcmp+0x28>
 8008acc:	d305      	bcc.n	8008ada <__mcmp+0x2e>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	bd30      	pop	{r4, r5, pc}
 8008ad4:	42a0      	cmp	r0, r4
 8008ad6:	d3f3      	bcc.n	8008ac0 <__mcmp+0x14>
 8008ad8:	e7fa      	b.n	8008ad0 <__mcmp+0x24>
 8008ada:	f04f 33ff 	mov.w	r3, #4294967295
 8008ade:	e7f7      	b.n	8008ad0 <__mcmp+0x24>

08008ae0 <__mdiff>:
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	460d      	mov	r5, r1
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	4611      	mov	r1, r2
 8008aea:	4628      	mov	r0, r5
 8008aec:	4614      	mov	r4, r2
 8008aee:	f7ff ffdd 	bl	8008aac <__mcmp>
 8008af2:	1e06      	subs	r6, r0, #0
 8008af4:	d108      	bne.n	8008b08 <__mdiff+0x28>
 8008af6:	4631      	mov	r1, r6
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7ff fdc2 	bl	8008682 <_Balloc>
 8008afe:	2301      	movs	r3, #1
 8008b00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b08:	bfa4      	itt	ge
 8008b0a:	4623      	movge	r3, r4
 8008b0c:	462c      	movge	r4, r5
 8008b0e:	4638      	mov	r0, r7
 8008b10:	6861      	ldr	r1, [r4, #4]
 8008b12:	bfa6      	itte	ge
 8008b14:	461d      	movge	r5, r3
 8008b16:	2600      	movge	r6, #0
 8008b18:	2601      	movlt	r6, #1
 8008b1a:	f7ff fdb2 	bl	8008682 <_Balloc>
 8008b1e:	692b      	ldr	r3, [r5, #16]
 8008b20:	60c6      	str	r6, [r0, #12]
 8008b22:	6926      	ldr	r6, [r4, #16]
 8008b24:	f105 0914 	add.w	r9, r5, #20
 8008b28:	f104 0214 	add.w	r2, r4, #20
 8008b2c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008b30:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008b34:	f100 0514 	add.w	r5, r0, #20
 8008b38:	f04f 0e00 	mov.w	lr, #0
 8008b3c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008b40:	f859 4b04 	ldr.w	r4, [r9], #4
 8008b44:	fa1e f18a 	uxtah	r1, lr, sl
 8008b48:	b2a3      	uxth	r3, r4
 8008b4a:	1ac9      	subs	r1, r1, r3
 8008b4c:	0c23      	lsrs	r3, r4, #16
 8008b4e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008b52:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008b56:	b289      	uxth	r1, r1
 8008b58:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008b5c:	45c8      	cmp	r8, r9
 8008b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008b62:	4694      	mov	ip, r2
 8008b64:	f845 3b04 	str.w	r3, [r5], #4
 8008b68:	d8e8      	bhi.n	8008b3c <__mdiff+0x5c>
 8008b6a:	45bc      	cmp	ip, r7
 8008b6c:	d304      	bcc.n	8008b78 <__mdiff+0x98>
 8008b6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008b72:	b183      	cbz	r3, 8008b96 <__mdiff+0xb6>
 8008b74:	6106      	str	r6, [r0, #16]
 8008b76:	e7c5      	b.n	8008b04 <__mdiff+0x24>
 8008b78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008b7c:	fa1e f381 	uxtah	r3, lr, r1
 8008b80:	141a      	asrs	r2, r3, #16
 8008b82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b8c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008b90:	f845 3b04 	str.w	r3, [r5], #4
 8008b94:	e7e9      	b.n	8008b6a <__mdiff+0x8a>
 8008b96:	3e01      	subs	r6, #1
 8008b98:	e7e9      	b.n	8008b6e <__mdiff+0x8e>

08008b9a <__d2b>:
 8008b9a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b9e:	460e      	mov	r6, r1
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	ec59 8b10 	vmov	r8, r9, d0
 8008ba6:	4615      	mov	r5, r2
 8008ba8:	f7ff fd6b 	bl	8008682 <_Balloc>
 8008bac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008bb0:	4607      	mov	r7, r0
 8008bb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bb6:	bb34      	cbnz	r4, 8008c06 <__d2b+0x6c>
 8008bb8:	9301      	str	r3, [sp, #4]
 8008bba:	f1b8 0300 	subs.w	r3, r8, #0
 8008bbe:	d027      	beq.n	8008c10 <__d2b+0x76>
 8008bc0:	a802      	add	r0, sp, #8
 8008bc2:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008bc6:	f7ff fe01 	bl	80087cc <__lo0bits>
 8008bca:	9900      	ldr	r1, [sp, #0]
 8008bcc:	b1f0      	cbz	r0, 8008c0c <__d2b+0x72>
 8008bce:	9a01      	ldr	r2, [sp, #4]
 8008bd0:	f1c0 0320 	rsb	r3, r0, #32
 8008bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd8:	430b      	orrs	r3, r1
 8008bda:	40c2      	lsrs	r2, r0
 8008bdc:	617b      	str	r3, [r7, #20]
 8008bde:	9201      	str	r2, [sp, #4]
 8008be0:	9b01      	ldr	r3, [sp, #4]
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	bf14      	ite	ne
 8008be8:	2102      	movne	r1, #2
 8008bea:	2101      	moveq	r1, #1
 8008bec:	6139      	str	r1, [r7, #16]
 8008bee:	b1c4      	cbz	r4, 8008c22 <__d2b+0x88>
 8008bf0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008bf4:	4404      	add	r4, r0
 8008bf6:	6034      	str	r4, [r6, #0]
 8008bf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bfc:	6028      	str	r0, [r5, #0]
 8008bfe:	4638      	mov	r0, r7
 8008c00:	b003      	add	sp, #12
 8008c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c0a:	e7d5      	b.n	8008bb8 <__d2b+0x1e>
 8008c0c:	6179      	str	r1, [r7, #20]
 8008c0e:	e7e7      	b.n	8008be0 <__d2b+0x46>
 8008c10:	a801      	add	r0, sp, #4
 8008c12:	f7ff fddb 	bl	80087cc <__lo0bits>
 8008c16:	9b01      	ldr	r3, [sp, #4]
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	6139      	str	r1, [r7, #16]
 8008c1e:	3020      	adds	r0, #32
 8008c20:	e7e5      	b.n	8008bee <__d2b+0x54>
 8008c22:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008c26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c2a:	6030      	str	r0, [r6, #0]
 8008c2c:	6918      	ldr	r0, [r3, #16]
 8008c2e:	f7ff fdae 	bl	800878e <__hi0bits>
 8008c32:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c36:	e7e1      	b.n	8008bfc <__d2b+0x62>

08008c38 <_calloc_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	fb02 f401 	mul.w	r4, r2, r1
 8008c3e:	4621      	mov	r1, r4
 8008c40:	f000 f808 	bl	8008c54 <_malloc_r>
 8008c44:	4605      	mov	r5, r0
 8008c46:	b118      	cbz	r0, 8008c50 <_calloc_r+0x18>
 8008c48:	4622      	mov	r2, r4
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	f7fe fb60 	bl	8007310 <memset>
 8008c50:	4628      	mov	r0, r5
 8008c52:	bd38      	pop	{r3, r4, r5, pc}

08008c54 <_malloc_r>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	1ccd      	adds	r5, r1, #3
 8008c58:	f025 0503 	bic.w	r5, r5, #3
 8008c5c:	3508      	adds	r5, #8
 8008c5e:	2d0c      	cmp	r5, #12
 8008c60:	bf38      	it	cc
 8008c62:	250c      	movcc	r5, #12
 8008c64:	2d00      	cmp	r5, #0
 8008c66:	4606      	mov	r6, r0
 8008c68:	db01      	blt.n	8008c6e <_malloc_r+0x1a>
 8008c6a:	42a9      	cmp	r1, r5
 8008c6c:	d903      	bls.n	8008c76 <_malloc_r+0x22>
 8008c6e:	230c      	movs	r3, #12
 8008c70:	6033      	str	r3, [r6, #0]
 8008c72:	2000      	movs	r0, #0
 8008c74:	bd70      	pop	{r4, r5, r6, pc}
 8008c76:	f000 f869 	bl	8008d4c <__malloc_lock>
 8008c7a:	4a21      	ldr	r2, [pc, #132]	; (8008d00 <_malloc_r+0xac>)
 8008c7c:	6814      	ldr	r4, [r2, #0]
 8008c7e:	4621      	mov	r1, r4
 8008c80:	b991      	cbnz	r1, 8008ca8 <_malloc_r+0x54>
 8008c82:	4c20      	ldr	r4, [pc, #128]	; (8008d04 <_malloc_r+0xb0>)
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	b91b      	cbnz	r3, 8008c90 <_malloc_r+0x3c>
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f000 f83d 	bl	8008d08 <_sbrk_r>
 8008c8e:	6020      	str	r0, [r4, #0]
 8008c90:	4629      	mov	r1, r5
 8008c92:	4630      	mov	r0, r6
 8008c94:	f000 f838 	bl	8008d08 <_sbrk_r>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d124      	bne.n	8008ce6 <_malloc_r+0x92>
 8008c9c:	230c      	movs	r3, #12
 8008c9e:	6033      	str	r3, [r6, #0]
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f000 f854 	bl	8008d4e <__malloc_unlock>
 8008ca6:	e7e4      	b.n	8008c72 <_malloc_r+0x1e>
 8008ca8:	680b      	ldr	r3, [r1, #0]
 8008caa:	1b5b      	subs	r3, r3, r5
 8008cac:	d418      	bmi.n	8008ce0 <_malloc_r+0x8c>
 8008cae:	2b0b      	cmp	r3, #11
 8008cb0:	d90f      	bls.n	8008cd2 <_malloc_r+0x7e>
 8008cb2:	600b      	str	r3, [r1, #0]
 8008cb4:	50cd      	str	r5, [r1, r3]
 8008cb6:	18cc      	adds	r4, r1, r3
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f000 f848 	bl	8008d4e <__malloc_unlock>
 8008cbe:	f104 000b 	add.w	r0, r4, #11
 8008cc2:	1d23      	adds	r3, r4, #4
 8008cc4:	f020 0007 	bic.w	r0, r0, #7
 8008cc8:	1ac3      	subs	r3, r0, r3
 8008cca:	d0d3      	beq.n	8008c74 <_malloc_r+0x20>
 8008ccc:	425a      	negs	r2, r3
 8008cce:	50e2      	str	r2, [r4, r3]
 8008cd0:	e7d0      	b.n	8008c74 <_malloc_r+0x20>
 8008cd2:	428c      	cmp	r4, r1
 8008cd4:	684b      	ldr	r3, [r1, #4]
 8008cd6:	bf16      	itet	ne
 8008cd8:	6063      	strne	r3, [r4, #4]
 8008cda:	6013      	streq	r3, [r2, #0]
 8008cdc:	460c      	movne	r4, r1
 8008cde:	e7eb      	b.n	8008cb8 <_malloc_r+0x64>
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	6849      	ldr	r1, [r1, #4]
 8008ce4:	e7cc      	b.n	8008c80 <_malloc_r+0x2c>
 8008ce6:	1cc4      	adds	r4, r0, #3
 8008ce8:	f024 0403 	bic.w	r4, r4, #3
 8008cec:	42a0      	cmp	r0, r4
 8008cee:	d005      	beq.n	8008cfc <_malloc_r+0xa8>
 8008cf0:	1a21      	subs	r1, r4, r0
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f000 f808 	bl	8008d08 <_sbrk_r>
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d0cf      	beq.n	8008c9c <_malloc_r+0x48>
 8008cfc:	6025      	str	r5, [r4, #0]
 8008cfe:	e7db      	b.n	8008cb8 <_malloc_r+0x64>
 8008d00:	200002b0 	.word	0x200002b0
 8008d04:	200002b4 	.word	0x200002b4

08008d08 <_sbrk_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4c06      	ldr	r4, [pc, #24]	; (8008d24 <_sbrk_r+0x1c>)
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	4605      	mov	r5, r0
 8008d10:	4608      	mov	r0, r1
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	f7f8 fcb6 	bl	8001684 <_sbrk>
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	d102      	bne.n	8008d22 <_sbrk_r+0x1a>
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	b103      	cbz	r3, 8008d22 <_sbrk_r+0x1a>
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
 8008d24:	200004f8 	.word	0x200004f8

08008d28 <__ascii_mbtowc>:
 8008d28:	b082      	sub	sp, #8
 8008d2a:	b901      	cbnz	r1, 8008d2e <__ascii_mbtowc+0x6>
 8008d2c:	a901      	add	r1, sp, #4
 8008d2e:	b142      	cbz	r2, 8008d42 <__ascii_mbtowc+0x1a>
 8008d30:	b14b      	cbz	r3, 8008d46 <__ascii_mbtowc+0x1e>
 8008d32:	7813      	ldrb	r3, [r2, #0]
 8008d34:	600b      	str	r3, [r1, #0]
 8008d36:	7812      	ldrb	r2, [r2, #0]
 8008d38:	1c10      	adds	r0, r2, #0
 8008d3a:	bf18      	it	ne
 8008d3c:	2001      	movne	r0, #1
 8008d3e:	b002      	add	sp, #8
 8008d40:	4770      	bx	lr
 8008d42:	4610      	mov	r0, r2
 8008d44:	e7fb      	b.n	8008d3e <__ascii_mbtowc+0x16>
 8008d46:	f06f 0001 	mvn.w	r0, #1
 8008d4a:	e7f8      	b.n	8008d3e <__ascii_mbtowc+0x16>

08008d4c <__malloc_lock>:
 8008d4c:	4770      	bx	lr

08008d4e <__malloc_unlock>:
 8008d4e:	4770      	bx	lr

08008d50 <__ascii_wctomb>:
 8008d50:	b149      	cbz	r1, 8008d66 <__ascii_wctomb+0x16>
 8008d52:	2aff      	cmp	r2, #255	; 0xff
 8008d54:	bf85      	ittet	hi
 8008d56:	238a      	movhi	r3, #138	; 0x8a
 8008d58:	6003      	strhi	r3, [r0, #0]
 8008d5a:	700a      	strbls	r2, [r1, #0]
 8008d5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d60:	bf98      	it	ls
 8008d62:	2001      	movls	r0, #1
 8008d64:	4770      	bx	lr
 8008d66:	4608      	mov	r0, r1
 8008d68:	4770      	bx	lr
	...

08008d6c <pow>:
 8008d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d70:	ed2d 8b04 	vpush	{d8-d9}
 8008d74:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009048 <pow+0x2dc>
 8008d78:	b08d      	sub	sp, #52	; 0x34
 8008d7a:	ec57 6b10 	vmov	r6, r7, d0
 8008d7e:	ec55 4b11 	vmov	r4, r5, d1
 8008d82:	f000 f965 	bl	8009050 <__ieee754_pow>
 8008d86:	f999 3000 	ldrsb.w	r3, [r9]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	eeb0 8a40 	vmov.f32	s16, s0
 8008d92:	eef0 8a60 	vmov.f32	s17, s1
 8008d96:	46c8      	mov	r8, r9
 8008d98:	d05f      	beq.n	8008e5a <pow+0xee>
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	462b      	mov	r3, r5
 8008d9e:	4620      	mov	r0, r4
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7f7 fe6f 	bl	8000a84 <__aeabi_dcmpun>
 8008da6:	4683      	mov	fp, r0
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d156      	bne.n	8008e5a <pow+0xee>
 8008dac:	4632      	mov	r2, r6
 8008dae:	463b      	mov	r3, r7
 8008db0:	4630      	mov	r0, r6
 8008db2:	4639      	mov	r1, r7
 8008db4:	f7f7 fe66 	bl	8000a84 <__aeabi_dcmpun>
 8008db8:	9001      	str	r0, [sp, #4]
 8008dba:	b1e8      	cbz	r0, 8008df8 <pow+0x8c>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	f7f7 fe2c 	bl	8000a20 <__aeabi_dcmpeq>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d046      	beq.n	8008e5a <pow+0xee>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	9302      	str	r3, [sp, #8]
 8008dd0:	4b96      	ldr	r3, [pc, #600]	; (800902c <pow+0x2c0>)
 8008dd2:	9303      	str	r3, [sp, #12]
 8008dd4:	4b96      	ldr	r3, [pc, #600]	; (8009030 <pow+0x2c4>)
 8008dd6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008dda:	2200      	movs	r2, #0
 8008ddc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008de0:	9b00      	ldr	r3, [sp, #0]
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008de8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008dec:	d033      	beq.n	8008e56 <pow+0xea>
 8008dee:	a802      	add	r0, sp, #8
 8008df0:	f000 fefd 	bl	8009bee <matherr>
 8008df4:	bb48      	cbnz	r0, 8008e4a <pow+0xde>
 8008df6:	e05d      	b.n	8008eb4 <pow+0x148>
 8008df8:	f04f 0a00 	mov.w	sl, #0
 8008dfc:	f04f 0b00 	mov.w	fp, #0
 8008e00:	4652      	mov	r2, sl
 8008e02:	465b      	mov	r3, fp
 8008e04:	4630      	mov	r0, r6
 8008e06:	4639      	mov	r1, r7
 8008e08:	f7f7 fe0a 	bl	8000a20 <__aeabi_dcmpeq>
 8008e0c:	ec4b ab19 	vmov	d9, sl, fp
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d054      	beq.n	8008ebe <pow+0x152>
 8008e14:	4652      	mov	r2, sl
 8008e16:	465b      	mov	r3, fp
 8008e18:	4620      	mov	r0, r4
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	f7f7 fe00 	bl	8000a20 <__aeabi_dcmpeq>
 8008e20:	4680      	mov	r8, r0
 8008e22:	b318      	cbz	r0, 8008e6c <pow+0x100>
 8008e24:	2301      	movs	r3, #1
 8008e26:	9302      	str	r3, [sp, #8]
 8008e28:	4b80      	ldr	r3, [pc, #512]	; (800902c <pow+0x2c0>)
 8008e2a:	9303      	str	r3, [sp, #12]
 8008e2c:	9b01      	ldr	r3, [sp, #4]
 8008e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e30:	9b00      	ldr	r3, [sp, #0]
 8008e32:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008e36:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008e3a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0d5      	beq.n	8008dee <pow+0x82>
 8008e42:	4b7b      	ldr	r3, [pc, #492]	; (8009030 <pow+0x2c4>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e4c:	b11b      	cbz	r3, 8008e56 <pow+0xea>
 8008e4e:	f7fe fa35 	bl	80072bc <__errno>
 8008e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008e5a:	eeb0 0a48 	vmov.f32	s0, s16
 8008e5e:	eef0 0a68 	vmov.f32	s1, s17
 8008e62:	b00d      	add	sp, #52	; 0x34
 8008e64:	ecbd 8b04 	vpop	{d8-d9}
 8008e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6c:	ec45 4b10 	vmov	d0, r4, r5
 8008e70:	f000 feb5 	bl	8009bde <finite>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d0f0      	beq.n	8008e5a <pow+0xee>
 8008e78:	4652      	mov	r2, sl
 8008e7a:	465b      	mov	r3, fp
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	4629      	mov	r1, r5
 8008e80:	f7f7 fdd8 	bl	8000a34 <__aeabi_dcmplt>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d0e8      	beq.n	8008e5a <pow+0xee>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	9302      	str	r3, [sp, #8]
 8008e8c:	4b67      	ldr	r3, [pc, #412]	; (800902c <pow+0x2c0>)
 8008e8e:	9303      	str	r3, [sp, #12]
 8008e90:	f999 3000 	ldrsb.w	r3, [r9]
 8008e94:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008e98:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008e9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008ea0:	b913      	cbnz	r3, 8008ea8 <pow+0x13c>
 8008ea2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008ea6:	e7a2      	b.n	8008dee <pow+0x82>
 8008ea8:	4962      	ldr	r1, [pc, #392]	; (8009034 <pow+0x2c8>)
 8008eaa:	2000      	movs	r0, #0
 8008eac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d19c      	bne.n	8008dee <pow+0x82>
 8008eb4:	f7fe fa02 	bl	80072bc <__errno>
 8008eb8:	2321      	movs	r3, #33	; 0x21
 8008eba:	6003      	str	r3, [r0, #0]
 8008ebc:	e7c5      	b.n	8008e4a <pow+0xde>
 8008ebe:	eeb0 0a48 	vmov.f32	s0, s16
 8008ec2:	eef0 0a68 	vmov.f32	s1, s17
 8008ec6:	f000 fe8a 	bl	8009bde <finite>
 8008eca:	9000      	str	r0, [sp, #0]
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f040 8081 	bne.w	8008fd4 <pow+0x268>
 8008ed2:	ec47 6b10 	vmov	d0, r6, r7
 8008ed6:	f000 fe82 	bl	8009bde <finite>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d07a      	beq.n	8008fd4 <pow+0x268>
 8008ede:	ec45 4b10 	vmov	d0, r4, r5
 8008ee2:	f000 fe7c 	bl	8009bde <finite>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d074      	beq.n	8008fd4 <pow+0x268>
 8008eea:	ec53 2b18 	vmov	r2, r3, d8
 8008eee:	ee18 0a10 	vmov	r0, s16
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	f7f7 fdc6 	bl	8000a84 <__aeabi_dcmpun>
 8008ef8:	f999 9000 	ldrsb.w	r9, [r9]
 8008efc:	4b4b      	ldr	r3, [pc, #300]	; (800902c <pow+0x2c0>)
 8008efe:	b1b0      	cbz	r0, 8008f2e <pow+0x1c2>
 8008f00:	2201      	movs	r2, #1
 8008f02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f06:	9b00      	ldr	r3, [sp, #0]
 8008f08:	930a      	str	r3, [sp, #40]	; 0x28
 8008f0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008f0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008f12:	f1b9 0f00 	cmp.w	r9, #0
 8008f16:	d0c4      	beq.n	8008ea2 <pow+0x136>
 8008f18:	4652      	mov	r2, sl
 8008f1a:	465b      	mov	r3, fp
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	4659      	mov	r1, fp
 8008f20:	f7f7 fc40 	bl	80007a4 <__aeabi_ddiv>
 8008f24:	f1b9 0f02 	cmp.w	r9, #2
 8008f28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f2c:	e7c1      	b.n	8008eb2 <pow+0x146>
 8008f2e:	2203      	movs	r2, #3
 8008f30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f34:	900a      	str	r0, [sp, #40]	; 0x28
 8008f36:	4629      	mov	r1, r5
 8008f38:	4620      	mov	r0, r4
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4b3e      	ldr	r3, [pc, #248]	; (8009038 <pow+0x2cc>)
 8008f3e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008f42:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008f46:	f7f7 fb03 	bl	8000550 <__aeabi_dmul>
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	460d      	mov	r5, r1
 8008f4e:	f1b9 0f00 	cmp.w	r9, #0
 8008f52:	d124      	bne.n	8008f9e <pow+0x232>
 8008f54:	4b39      	ldr	r3, [pc, #228]	; (800903c <pow+0x2d0>)
 8008f56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008f5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f5e:	4630      	mov	r0, r6
 8008f60:	4652      	mov	r2, sl
 8008f62:	465b      	mov	r3, fp
 8008f64:	4639      	mov	r1, r7
 8008f66:	f7f7 fd65 	bl	8000a34 <__aeabi_dcmplt>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d056      	beq.n	800901c <pow+0x2b0>
 8008f6e:	ec45 4b10 	vmov	d0, r4, r5
 8008f72:	f000 fe49 	bl	8009c08 <rint>
 8008f76:	4622      	mov	r2, r4
 8008f78:	462b      	mov	r3, r5
 8008f7a:	ec51 0b10 	vmov	r0, r1, d0
 8008f7e:	f7f7 fd4f 	bl	8000a20 <__aeabi_dcmpeq>
 8008f82:	b920      	cbnz	r0, 8008f8e <pow+0x222>
 8008f84:	4b2e      	ldr	r3, [pc, #184]	; (8009040 <pow+0x2d4>)
 8008f86:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008f8a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f8e:	f998 3000 	ldrsb.w	r3, [r8]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d142      	bne.n	800901c <pow+0x2b0>
 8008f96:	f7fe f991 	bl	80072bc <__errno>
 8008f9a:	2322      	movs	r3, #34	; 0x22
 8008f9c:	e78d      	b.n	8008eba <pow+0x14e>
 8008f9e:	4b29      	ldr	r3, [pc, #164]	; (8009044 <pow+0x2d8>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	4652      	mov	r2, sl
 8008faa:	465b      	mov	r3, fp
 8008fac:	4639      	mov	r1, r7
 8008fae:	f7f7 fd41 	bl	8000a34 <__aeabi_dcmplt>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d0eb      	beq.n	8008f8e <pow+0x222>
 8008fb6:	ec45 4b10 	vmov	d0, r4, r5
 8008fba:	f000 fe25 	bl	8009c08 <rint>
 8008fbe:	4622      	mov	r2, r4
 8008fc0:	462b      	mov	r3, r5
 8008fc2:	ec51 0b10 	vmov	r0, r1, d0
 8008fc6:	f7f7 fd2b 	bl	8000a20 <__aeabi_dcmpeq>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d1df      	bne.n	8008f8e <pow+0x222>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4b18      	ldr	r3, [pc, #96]	; (8009034 <pow+0x2c8>)
 8008fd2:	e7da      	b.n	8008f8a <pow+0x21e>
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	ec51 0b18 	vmov	r0, r1, d8
 8008fdc:	f7f7 fd20 	bl	8000a20 <__aeabi_dcmpeq>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	f43f af3a 	beq.w	8008e5a <pow+0xee>
 8008fe6:	ec47 6b10 	vmov	d0, r6, r7
 8008fea:	f000 fdf8 	bl	8009bde <finite>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f43f af33 	beq.w	8008e5a <pow+0xee>
 8008ff4:	ec45 4b10 	vmov	d0, r4, r5
 8008ff8:	f000 fdf1 	bl	8009bde <finite>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f43f af2c 	beq.w	8008e5a <pow+0xee>
 8009002:	2304      	movs	r3, #4
 8009004:	9302      	str	r3, [sp, #8]
 8009006:	4b09      	ldr	r3, [pc, #36]	; (800902c <pow+0x2c0>)
 8009008:	9303      	str	r3, [sp, #12]
 800900a:	2300      	movs	r3, #0
 800900c:	930a      	str	r3, [sp, #40]	; 0x28
 800900e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009012:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009016:	ed8d 9b08 	vstr	d9, [sp, #32]
 800901a:	e7b8      	b.n	8008f8e <pow+0x222>
 800901c:	a802      	add	r0, sp, #8
 800901e:	f000 fde6 	bl	8009bee <matherr>
 8009022:	2800      	cmp	r0, #0
 8009024:	f47f af11 	bne.w	8008e4a <pow+0xde>
 8009028:	e7b5      	b.n	8008f96 <pow+0x22a>
 800902a:	bf00      	nop
 800902c:	0800abbf 	.word	0x0800abbf
 8009030:	3ff00000 	.word	0x3ff00000
 8009034:	fff00000 	.word	0xfff00000
 8009038:	3fe00000 	.word	0x3fe00000
 800903c:	47efffff 	.word	0x47efffff
 8009040:	c7efffff 	.word	0xc7efffff
 8009044:	7ff00000 	.word	0x7ff00000
 8009048:	20000200 	.word	0x20000200
 800904c:	00000000 	.word	0x00000000

08009050 <__ieee754_pow>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	b091      	sub	sp, #68	; 0x44
 8009056:	ed8d 1b00 	vstr	d1, [sp]
 800905a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800905e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009062:	ea58 0302 	orrs.w	r3, r8, r2
 8009066:	ec57 6b10 	vmov	r6, r7, d0
 800906a:	f000 84be 	beq.w	80099ea <__ieee754_pow+0x99a>
 800906e:	4b7a      	ldr	r3, [pc, #488]	; (8009258 <__ieee754_pow+0x208>)
 8009070:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009074:	429c      	cmp	r4, r3
 8009076:	463d      	mov	r5, r7
 8009078:	ee10 aa10 	vmov	sl, s0
 800907c:	dc09      	bgt.n	8009092 <__ieee754_pow+0x42>
 800907e:	d103      	bne.n	8009088 <__ieee754_pow+0x38>
 8009080:	b93e      	cbnz	r6, 8009092 <__ieee754_pow+0x42>
 8009082:	45a0      	cmp	r8, r4
 8009084:	dc0d      	bgt.n	80090a2 <__ieee754_pow+0x52>
 8009086:	e001      	b.n	800908c <__ieee754_pow+0x3c>
 8009088:	4598      	cmp	r8, r3
 800908a:	dc02      	bgt.n	8009092 <__ieee754_pow+0x42>
 800908c:	4598      	cmp	r8, r3
 800908e:	d10e      	bne.n	80090ae <__ieee754_pow+0x5e>
 8009090:	b16a      	cbz	r2, 80090ae <__ieee754_pow+0x5e>
 8009092:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009096:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800909a:	ea54 030a 	orrs.w	r3, r4, sl
 800909e:	f000 84a4 	beq.w	80099ea <__ieee754_pow+0x99a>
 80090a2:	486e      	ldr	r0, [pc, #440]	; (800925c <__ieee754_pow+0x20c>)
 80090a4:	b011      	add	sp, #68	; 0x44
 80090a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090aa:	f000 bda5 	b.w	8009bf8 <nan>
 80090ae:	2d00      	cmp	r5, #0
 80090b0:	da53      	bge.n	800915a <__ieee754_pow+0x10a>
 80090b2:	4b6b      	ldr	r3, [pc, #428]	; (8009260 <__ieee754_pow+0x210>)
 80090b4:	4598      	cmp	r8, r3
 80090b6:	dc4d      	bgt.n	8009154 <__ieee754_pow+0x104>
 80090b8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80090bc:	4598      	cmp	r8, r3
 80090be:	dd4c      	ble.n	800915a <__ieee754_pow+0x10a>
 80090c0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80090c4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80090c8:	2b14      	cmp	r3, #20
 80090ca:	dd26      	ble.n	800911a <__ieee754_pow+0xca>
 80090cc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80090d0:	fa22 f103 	lsr.w	r1, r2, r3
 80090d4:	fa01 f303 	lsl.w	r3, r1, r3
 80090d8:	4293      	cmp	r3, r2
 80090da:	d13e      	bne.n	800915a <__ieee754_pow+0x10a>
 80090dc:	f001 0101 	and.w	r1, r1, #1
 80090e0:	f1c1 0b02 	rsb	fp, r1, #2
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	d15b      	bne.n	80091a0 <__ieee754_pow+0x150>
 80090e8:	4b5b      	ldr	r3, [pc, #364]	; (8009258 <__ieee754_pow+0x208>)
 80090ea:	4598      	cmp	r8, r3
 80090ec:	d124      	bne.n	8009138 <__ieee754_pow+0xe8>
 80090ee:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80090f2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80090f6:	ea53 030a 	orrs.w	r3, r3, sl
 80090fa:	f000 8476 	beq.w	80099ea <__ieee754_pow+0x99a>
 80090fe:	4b59      	ldr	r3, [pc, #356]	; (8009264 <__ieee754_pow+0x214>)
 8009100:	429c      	cmp	r4, r3
 8009102:	dd2d      	ble.n	8009160 <__ieee754_pow+0x110>
 8009104:	f1b9 0f00 	cmp.w	r9, #0
 8009108:	f280 8473 	bge.w	80099f2 <__ieee754_pow+0x9a2>
 800910c:	2000      	movs	r0, #0
 800910e:	2100      	movs	r1, #0
 8009110:	ec41 0b10 	vmov	d0, r0, r1
 8009114:	b011      	add	sp, #68	; 0x44
 8009116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911a:	2a00      	cmp	r2, #0
 800911c:	d13e      	bne.n	800919c <__ieee754_pow+0x14c>
 800911e:	f1c3 0314 	rsb	r3, r3, #20
 8009122:	fa48 f103 	asr.w	r1, r8, r3
 8009126:	fa01 f303 	lsl.w	r3, r1, r3
 800912a:	4543      	cmp	r3, r8
 800912c:	f040 8469 	bne.w	8009a02 <__ieee754_pow+0x9b2>
 8009130:	f001 0101 	and.w	r1, r1, #1
 8009134:	f1c1 0b02 	rsb	fp, r1, #2
 8009138:	4b4b      	ldr	r3, [pc, #300]	; (8009268 <__ieee754_pow+0x218>)
 800913a:	4598      	cmp	r8, r3
 800913c:	d118      	bne.n	8009170 <__ieee754_pow+0x120>
 800913e:	f1b9 0f00 	cmp.w	r9, #0
 8009142:	f280 845a 	bge.w	80099fa <__ieee754_pow+0x9aa>
 8009146:	4948      	ldr	r1, [pc, #288]	; (8009268 <__ieee754_pow+0x218>)
 8009148:	4632      	mov	r2, r6
 800914a:	463b      	mov	r3, r7
 800914c:	2000      	movs	r0, #0
 800914e:	f7f7 fb29 	bl	80007a4 <__aeabi_ddiv>
 8009152:	e7dd      	b.n	8009110 <__ieee754_pow+0xc0>
 8009154:	f04f 0b02 	mov.w	fp, #2
 8009158:	e7c4      	b.n	80090e4 <__ieee754_pow+0x94>
 800915a:	f04f 0b00 	mov.w	fp, #0
 800915e:	e7c1      	b.n	80090e4 <__ieee754_pow+0x94>
 8009160:	f1b9 0f00 	cmp.w	r9, #0
 8009164:	dad2      	bge.n	800910c <__ieee754_pow+0xbc>
 8009166:	e9dd 0300 	ldrd	r0, r3, [sp]
 800916a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800916e:	e7cf      	b.n	8009110 <__ieee754_pow+0xc0>
 8009170:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009174:	d106      	bne.n	8009184 <__ieee754_pow+0x134>
 8009176:	4632      	mov	r2, r6
 8009178:	463b      	mov	r3, r7
 800917a:	4610      	mov	r0, r2
 800917c:	4619      	mov	r1, r3
 800917e:	f7f7 f9e7 	bl	8000550 <__aeabi_dmul>
 8009182:	e7c5      	b.n	8009110 <__ieee754_pow+0xc0>
 8009184:	4b39      	ldr	r3, [pc, #228]	; (800926c <__ieee754_pow+0x21c>)
 8009186:	4599      	cmp	r9, r3
 8009188:	d10a      	bne.n	80091a0 <__ieee754_pow+0x150>
 800918a:	2d00      	cmp	r5, #0
 800918c:	db08      	blt.n	80091a0 <__ieee754_pow+0x150>
 800918e:	ec47 6b10 	vmov	d0, r6, r7
 8009192:	b011      	add	sp, #68	; 0x44
 8009194:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	f000 bc68 	b.w	8009a6c <__ieee754_sqrt>
 800919c:	f04f 0b00 	mov.w	fp, #0
 80091a0:	ec47 6b10 	vmov	d0, r6, r7
 80091a4:	f000 fd12 	bl	8009bcc <fabs>
 80091a8:	ec51 0b10 	vmov	r0, r1, d0
 80091ac:	f1ba 0f00 	cmp.w	sl, #0
 80091b0:	d127      	bne.n	8009202 <__ieee754_pow+0x1b2>
 80091b2:	b124      	cbz	r4, 80091be <__ieee754_pow+0x16e>
 80091b4:	4b2c      	ldr	r3, [pc, #176]	; (8009268 <__ieee754_pow+0x218>)
 80091b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d121      	bne.n	8009202 <__ieee754_pow+0x1b2>
 80091be:	f1b9 0f00 	cmp.w	r9, #0
 80091c2:	da05      	bge.n	80091d0 <__ieee754_pow+0x180>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	2000      	movs	r0, #0
 80091ca:	4927      	ldr	r1, [pc, #156]	; (8009268 <__ieee754_pow+0x218>)
 80091cc:	f7f7 faea 	bl	80007a4 <__aeabi_ddiv>
 80091d0:	2d00      	cmp	r5, #0
 80091d2:	da9d      	bge.n	8009110 <__ieee754_pow+0xc0>
 80091d4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80091d8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80091dc:	ea54 030b 	orrs.w	r3, r4, fp
 80091e0:	d108      	bne.n	80091f4 <__ieee754_pow+0x1a4>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	f7f6 fff9 	bl	80001e0 <__aeabi_dsub>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	e7ac      	b.n	800914e <__ieee754_pow+0xfe>
 80091f4:	f1bb 0f01 	cmp.w	fp, #1
 80091f8:	d18a      	bne.n	8009110 <__ieee754_pow+0xc0>
 80091fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091fe:	4619      	mov	r1, r3
 8009200:	e786      	b.n	8009110 <__ieee754_pow+0xc0>
 8009202:	0fed      	lsrs	r5, r5, #31
 8009204:	1e6b      	subs	r3, r5, #1
 8009206:	930d      	str	r3, [sp, #52]	; 0x34
 8009208:	ea5b 0303 	orrs.w	r3, fp, r3
 800920c:	d102      	bne.n	8009214 <__ieee754_pow+0x1c4>
 800920e:	4632      	mov	r2, r6
 8009210:	463b      	mov	r3, r7
 8009212:	e7e8      	b.n	80091e6 <__ieee754_pow+0x196>
 8009214:	4b16      	ldr	r3, [pc, #88]	; (8009270 <__ieee754_pow+0x220>)
 8009216:	4598      	cmp	r8, r3
 8009218:	f340 80fe 	ble.w	8009418 <__ieee754_pow+0x3c8>
 800921c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009220:	4598      	cmp	r8, r3
 8009222:	dd0a      	ble.n	800923a <__ieee754_pow+0x1ea>
 8009224:	4b0f      	ldr	r3, [pc, #60]	; (8009264 <__ieee754_pow+0x214>)
 8009226:	429c      	cmp	r4, r3
 8009228:	dc0d      	bgt.n	8009246 <__ieee754_pow+0x1f6>
 800922a:	f1b9 0f00 	cmp.w	r9, #0
 800922e:	f6bf af6d 	bge.w	800910c <__ieee754_pow+0xbc>
 8009232:	a307      	add	r3, pc, #28	; (adr r3, 8009250 <__ieee754_pow+0x200>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	e79f      	b.n	800917a <__ieee754_pow+0x12a>
 800923a:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <__ieee754_pow+0x224>)
 800923c:	429c      	cmp	r4, r3
 800923e:	ddf4      	ble.n	800922a <__ieee754_pow+0x1da>
 8009240:	4b09      	ldr	r3, [pc, #36]	; (8009268 <__ieee754_pow+0x218>)
 8009242:	429c      	cmp	r4, r3
 8009244:	dd18      	ble.n	8009278 <__ieee754_pow+0x228>
 8009246:	f1b9 0f00 	cmp.w	r9, #0
 800924a:	dcf2      	bgt.n	8009232 <__ieee754_pow+0x1e2>
 800924c:	e75e      	b.n	800910c <__ieee754_pow+0xbc>
 800924e:	bf00      	nop
 8009250:	8800759c 	.word	0x8800759c
 8009254:	7e37e43c 	.word	0x7e37e43c
 8009258:	7ff00000 	.word	0x7ff00000
 800925c:	0800aabd 	.word	0x0800aabd
 8009260:	433fffff 	.word	0x433fffff
 8009264:	3fefffff 	.word	0x3fefffff
 8009268:	3ff00000 	.word	0x3ff00000
 800926c:	3fe00000 	.word	0x3fe00000
 8009270:	41e00000 	.word	0x41e00000
 8009274:	3feffffe 	.word	0x3feffffe
 8009278:	2200      	movs	r2, #0
 800927a:	4b63      	ldr	r3, [pc, #396]	; (8009408 <__ieee754_pow+0x3b8>)
 800927c:	f7f6 ffb0 	bl	80001e0 <__aeabi_dsub>
 8009280:	a355      	add	r3, pc, #340	; (adr r3, 80093d8 <__ieee754_pow+0x388>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	4604      	mov	r4, r0
 8009288:	460d      	mov	r5, r1
 800928a:	f7f7 f961 	bl	8000550 <__aeabi_dmul>
 800928e:	a354      	add	r3, pc, #336	; (adr r3, 80093e0 <__ieee754_pow+0x390>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	4606      	mov	r6, r0
 8009296:	460f      	mov	r7, r1
 8009298:	4620      	mov	r0, r4
 800929a:	4629      	mov	r1, r5
 800929c:	f7f7 f958 	bl	8000550 <__aeabi_dmul>
 80092a0:	2200      	movs	r2, #0
 80092a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092a6:	4b59      	ldr	r3, [pc, #356]	; (800940c <__ieee754_pow+0x3bc>)
 80092a8:	4620      	mov	r0, r4
 80092aa:	4629      	mov	r1, r5
 80092ac:	f7f7 f950 	bl	8000550 <__aeabi_dmul>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	a14c      	add	r1, pc, #304	; (adr r1, 80093e8 <__ieee754_pow+0x398>)
 80092b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092ba:	f7f6 ff91 	bl	80001e0 <__aeabi_dsub>
 80092be:	4622      	mov	r2, r4
 80092c0:	462b      	mov	r3, r5
 80092c2:	f7f7 f945 	bl	8000550 <__aeabi_dmul>
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	2000      	movs	r0, #0
 80092cc:	4950      	ldr	r1, [pc, #320]	; (8009410 <__ieee754_pow+0x3c0>)
 80092ce:	f7f6 ff87 	bl	80001e0 <__aeabi_dsub>
 80092d2:	4622      	mov	r2, r4
 80092d4:	462b      	mov	r3, r5
 80092d6:	4680      	mov	r8, r0
 80092d8:	4689      	mov	r9, r1
 80092da:	4620      	mov	r0, r4
 80092dc:	4629      	mov	r1, r5
 80092de:	f7f7 f937 	bl	8000550 <__aeabi_dmul>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	4640      	mov	r0, r8
 80092e8:	4649      	mov	r1, r9
 80092ea:	f7f7 f931 	bl	8000550 <__aeabi_dmul>
 80092ee:	a340      	add	r3, pc, #256	; (adr r3, 80093f0 <__ieee754_pow+0x3a0>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	f7f7 f92c 	bl	8000550 <__aeabi_dmul>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009300:	f7f6 ff6e 	bl	80001e0 <__aeabi_dsub>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4604      	mov	r4, r0
 800930a:	460d      	mov	r5, r1
 800930c:	4630      	mov	r0, r6
 800930e:	4639      	mov	r1, r7
 8009310:	f7f6 ff68 	bl	80001e4 <__adddf3>
 8009314:	2000      	movs	r0, #0
 8009316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800931a:	4632      	mov	r2, r6
 800931c:	463b      	mov	r3, r7
 800931e:	f7f6 ff5f 	bl	80001e0 <__aeabi_dsub>
 8009322:	4602      	mov	r2, r0
 8009324:	460b      	mov	r3, r1
 8009326:	4620      	mov	r0, r4
 8009328:	4629      	mov	r1, r5
 800932a:	f7f6 ff59 	bl	80001e0 <__aeabi_dsub>
 800932e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009330:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009334:	4313      	orrs	r3, r2
 8009336:	4606      	mov	r6, r0
 8009338:	460f      	mov	r7, r1
 800933a:	f040 81eb 	bne.w	8009714 <__ieee754_pow+0x6c4>
 800933e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80093f8 <__ieee754_pow+0x3a8>
 8009342:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009346:	2400      	movs	r4, #0
 8009348:	4622      	mov	r2, r4
 800934a:	462b      	mov	r3, r5
 800934c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009350:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009354:	f7f6 ff44 	bl	80001e0 <__aeabi_dsub>
 8009358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800935c:	f7f7 f8f8 	bl	8000550 <__aeabi_dmul>
 8009360:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009364:	4680      	mov	r8, r0
 8009366:	4689      	mov	r9, r1
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	f7f7 f8f0 	bl	8000550 <__aeabi_dmul>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4640      	mov	r0, r8
 8009376:	4649      	mov	r1, r9
 8009378:	f7f6 ff34 	bl	80001e4 <__adddf3>
 800937c:	4622      	mov	r2, r4
 800937e:	462b      	mov	r3, r5
 8009380:	4680      	mov	r8, r0
 8009382:	4689      	mov	r9, r1
 8009384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009388:	f7f7 f8e2 	bl	8000550 <__aeabi_dmul>
 800938c:	460b      	mov	r3, r1
 800938e:	4604      	mov	r4, r0
 8009390:	460d      	mov	r5, r1
 8009392:	4602      	mov	r2, r0
 8009394:	4649      	mov	r1, r9
 8009396:	4640      	mov	r0, r8
 8009398:	e9cd 4500 	strd	r4, r5, [sp]
 800939c:	f7f6 ff22 	bl	80001e4 <__adddf3>
 80093a0:	4b1c      	ldr	r3, [pc, #112]	; (8009414 <__ieee754_pow+0x3c4>)
 80093a2:	4299      	cmp	r1, r3
 80093a4:	4606      	mov	r6, r0
 80093a6:	460f      	mov	r7, r1
 80093a8:	468b      	mov	fp, r1
 80093aa:	f340 82f7 	ble.w	800999c <__ieee754_pow+0x94c>
 80093ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80093b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80093b6:	4303      	orrs	r3, r0
 80093b8:	f000 81ea 	beq.w	8009790 <__ieee754_pow+0x740>
 80093bc:	a310      	add	r3, pc, #64	; (adr r3, 8009400 <__ieee754_pow+0x3b0>)
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093c6:	f7f7 f8c3 	bl	8000550 <__aeabi_dmul>
 80093ca:	a30d      	add	r3, pc, #52	; (adr r3, 8009400 <__ieee754_pow+0x3b0>)
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	e6d5      	b.n	800917e <__ieee754_pow+0x12e>
 80093d2:	bf00      	nop
 80093d4:	f3af 8000 	nop.w
 80093d8:	60000000 	.word	0x60000000
 80093dc:	3ff71547 	.word	0x3ff71547
 80093e0:	f85ddf44 	.word	0xf85ddf44
 80093e4:	3e54ae0b 	.word	0x3e54ae0b
 80093e8:	55555555 	.word	0x55555555
 80093ec:	3fd55555 	.word	0x3fd55555
 80093f0:	652b82fe 	.word	0x652b82fe
 80093f4:	3ff71547 	.word	0x3ff71547
 80093f8:	00000000 	.word	0x00000000
 80093fc:	bff00000 	.word	0xbff00000
 8009400:	8800759c 	.word	0x8800759c
 8009404:	7e37e43c 	.word	0x7e37e43c
 8009408:	3ff00000 	.word	0x3ff00000
 800940c:	3fd00000 	.word	0x3fd00000
 8009410:	3fe00000 	.word	0x3fe00000
 8009414:	408fffff 	.word	0x408fffff
 8009418:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800941c:	f04f 0200 	mov.w	r2, #0
 8009420:	da05      	bge.n	800942e <__ieee754_pow+0x3de>
 8009422:	4bd3      	ldr	r3, [pc, #844]	; (8009770 <__ieee754_pow+0x720>)
 8009424:	f7f7 f894 	bl	8000550 <__aeabi_dmul>
 8009428:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800942c:	460c      	mov	r4, r1
 800942e:	1523      	asrs	r3, r4, #20
 8009430:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009434:	4413      	add	r3, r2
 8009436:	9309      	str	r3, [sp, #36]	; 0x24
 8009438:	4bce      	ldr	r3, [pc, #824]	; (8009774 <__ieee754_pow+0x724>)
 800943a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800943e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009442:	429c      	cmp	r4, r3
 8009444:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009448:	dd08      	ble.n	800945c <__ieee754_pow+0x40c>
 800944a:	4bcb      	ldr	r3, [pc, #812]	; (8009778 <__ieee754_pow+0x728>)
 800944c:	429c      	cmp	r4, r3
 800944e:	f340 815e 	ble.w	800970e <__ieee754_pow+0x6be>
 8009452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009454:	3301      	adds	r3, #1
 8009456:	9309      	str	r3, [sp, #36]	; 0x24
 8009458:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800945c:	f04f 0a00 	mov.w	sl, #0
 8009460:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009464:	930c      	str	r3, [sp, #48]	; 0x30
 8009466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009468:	4bc4      	ldr	r3, [pc, #784]	; (800977c <__ieee754_pow+0x72c>)
 800946a:	4413      	add	r3, r2
 800946c:	ed93 7b00 	vldr	d7, [r3]
 8009470:	4629      	mov	r1, r5
 8009472:	ec53 2b17 	vmov	r2, r3, d7
 8009476:	ed8d 7b06 	vstr	d7, [sp, #24]
 800947a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800947e:	f7f6 feaf 	bl	80001e0 <__aeabi_dsub>
 8009482:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009486:	4606      	mov	r6, r0
 8009488:	460f      	mov	r7, r1
 800948a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800948e:	f7f6 fea9 	bl	80001e4 <__adddf3>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	2000      	movs	r0, #0
 8009498:	49b9      	ldr	r1, [pc, #740]	; (8009780 <__ieee754_pow+0x730>)
 800949a:	f7f7 f983 	bl	80007a4 <__aeabi_ddiv>
 800949e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4630      	mov	r0, r6
 80094a8:	4639      	mov	r1, r7
 80094aa:	f7f7 f851 	bl	8000550 <__aeabi_dmul>
 80094ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094b2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80094b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80094ba:	2300      	movs	r3, #0
 80094bc:	9302      	str	r3, [sp, #8]
 80094be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094c2:	106d      	asrs	r5, r5, #1
 80094c4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80094c8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80094cc:	2200      	movs	r2, #0
 80094ce:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80094d2:	4640      	mov	r0, r8
 80094d4:	4649      	mov	r1, r9
 80094d6:	4614      	mov	r4, r2
 80094d8:	461d      	mov	r5, r3
 80094da:	f7f7 f839 	bl	8000550 <__aeabi_dmul>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4630      	mov	r0, r6
 80094e4:	4639      	mov	r1, r7
 80094e6:	f7f6 fe7b 	bl	80001e0 <__aeabi_dsub>
 80094ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094ee:	4606      	mov	r6, r0
 80094f0:	460f      	mov	r7, r1
 80094f2:	4620      	mov	r0, r4
 80094f4:	4629      	mov	r1, r5
 80094f6:	f7f6 fe73 	bl	80001e0 <__aeabi_dsub>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009502:	f7f6 fe6d 	bl	80001e0 <__aeabi_dsub>
 8009506:	4642      	mov	r2, r8
 8009508:	464b      	mov	r3, r9
 800950a:	f7f7 f821 	bl	8000550 <__aeabi_dmul>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4630      	mov	r0, r6
 8009514:	4639      	mov	r1, r7
 8009516:	f7f6 fe63 	bl	80001e0 <__aeabi_dsub>
 800951a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800951e:	f7f7 f817 	bl	8000550 <__aeabi_dmul>
 8009522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009526:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800952a:	4610      	mov	r0, r2
 800952c:	4619      	mov	r1, r3
 800952e:	f7f7 f80f 	bl	8000550 <__aeabi_dmul>
 8009532:	a37b      	add	r3, pc, #492	; (adr r3, 8009720 <__ieee754_pow+0x6d0>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	4604      	mov	r4, r0
 800953a:	460d      	mov	r5, r1
 800953c:	f7f7 f808 	bl	8000550 <__aeabi_dmul>
 8009540:	a379      	add	r3, pc, #484	; (adr r3, 8009728 <__ieee754_pow+0x6d8>)
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	f7f6 fe4d 	bl	80001e4 <__adddf3>
 800954a:	4622      	mov	r2, r4
 800954c:	462b      	mov	r3, r5
 800954e:	f7f6 ffff 	bl	8000550 <__aeabi_dmul>
 8009552:	a377      	add	r3, pc, #476	; (adr r3, 8009730 <__ieee754_pow+0x6e0>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f7f6 fe44 	bl	80001e4 <__adddf3>
 800955c:	4622      	mov	r2, r4
 800955e:	462b      	mov	r3, r5
 8009560:	f7f6 fff6 	bl	8000550 <__aeabi_dmul>
 8009564:	a374      	add	r3, pc, #464	; (adr r3, 8009738 <__ieee754_pow+0x6e8>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f7f6 fe3b 	bl	80001e4 <__adddf3>
 800956e:	4622      	mov	r2, r4
 8009570:	462b      	mov	r3, r5
 8009572:	f7f6 ffed 	bl	8000550 <__aeabi_dmul>
 8009576:	a372      	add	r3, pc, #456	; (adr r3, 8009740 <__ieee754_pow+0x6f0>)
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f7f6 fe32 	bl	80001e4 <__adddf3>
 8009580:	4622      	mov	r2, r4
 8009582:	462b      	mov	r3, r5
 8009584:	f7f6 ffe4 	bl	8000550 <__aeabi_dmul>
 8009588:	a36f      	add	r3, pc, #444	; (adr r3, 8009748 <__ieee754_pow+0x6f8>)
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	f7f6 fe29 	bl	80001e4 <__adddf3>
 8009592:	4622      	mov	r2, r4
 8009594:	4606      	mov	r6, r0
 8009596:	460f      	mov	r7, r1
 8009598:	462b      	mov	r3, r5
 800959a:	4620      	mov	r0, r4
 800959c:	4629      	mov	r1, r5
 800959e:	f7f6 ffd7 	bl	8000550 <__aeabi_dmul>
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	4630      	mov	r0, r6
 80095a8:	4639      	mov	r1, r7
 80095aa:	f7f6 ffd1 	bl	8000550 <__aeabi_dmul>
 80095ae:	4642      	mov	r2, r8
 80095b0:	4604      	mov	r4, r0
 80095b2:	460d      	mov	r5, r1
 80095b4:	464b      	mov	r3, r9
 80095b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095ba:	f7f6 fe13 	bl	80001e4 <__adddf3>
 80095be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095c2:	f7f6 ffc5 	bl	8000550 <__aeabi_dmul>
 80095c6:	4622      	mov	r2, r4
 80095c8:	462b      	mov	r3, r5
 80095ca:	f7f6 fe0b 	bl	80001e4 <__adddf3>
 80095ce:	4642      	mov	r2, r8
 80095d0:	4606      	mov	r6, r0
 80095d2:	460f      	mov	r7, r1
 80095d4:	464b      	mov	r3, r9
 80095d6:	4640      	mov	r0, r8
 80095d8:	4649      	mov	r1, r9
 80095da:	f7f6 ffb9 	bl	8000550 <__aeabi_dmul>
 80095de:	2200      	movs	r2, #0
 80095e0:	4b68      	ldr	r3, [pc, #416]	; (8009784 <__ieee754_pow+0x734>)
 80095e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80095e6:	f7f6 fdfd 	bl	80001e4 <__adddf3>
 80095ea:	4632      	mov	r2, r6
 80095ec:	463b      	mov	r3, r7
 80095ee:	f7f6 fdf9 	bl	80001e4 <__adddf3>
 80095f2:	9802      	ldr	r0, [sp, #8]
 80095f4:	460d      	mov	r5, r1
 80095f6:	4604      	mov	r4, r0
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4640      	mov	r0, r8
 80095fe:	4649      	mov	r1, r9
 8009600:	f7f6 ffa6 	bl	8000550 <__aeabi_dmul>
 8009604:	2200      	movs	r2, #0
 8009606:	4680      	mov	r8, r0
 8009608:	4689      	mov	r9, r1
 800960a:	4b5e      	ldr	r3, [pc, #376]	; (8009784 <__ieee754_pow+0x734>)
 800960c:	4620      	mov	r0, r4
 800960e:	4629      	mov	r1, r5
 8009610:	f7f6 fde6 	bl	80001e0 <__aeabi_dsub>
 8009614:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009618:	f7f6 fde2 	bl	80001e0 <__aeabi_dsub>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4630      	mov	r0, r6
 8009622:	4639      	mov	r1, r7
 8009624:	f7f6 fddc 	bl	80001e0 <__aeabi_dsub>
 8009628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800962c:	f7f6 ff90 	bl	8000550 <__aeabi_dmul>
 8009630:	4622      	mov	r2, r4
 8009632:	4606      	mov	r6, r0
 8009634:	460f      	mov	r7, r1
 8009636:	462b      	mov	r3, r5
 8009638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800963c:	f7f6 ff88 	bl	8000550 <__aeabi_dmul>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4630      	mov	r0, r6
 8009646:	4639      	mov	r1, r7
 8009648:	f7f6 fdcc 	bl	80001e4 <__adddf3>
 800964c:	4606      	mov	r6, r0
 800964e:	460f      	mov	r7, r1
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	4640      	mov	r0, r8
 8009656:	4649      	mov	r1, r9
 8009658:	f7f6 fdc4 	bl	80001e4 <__adddf3>
 800965c:	9802      	ldr	r0, [sp, #8]
 800965e:	a33c      	add	r3, pc, #240	; (adr r3, 8009750 <__ieee754_pow+0x700>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	4604      	mov	r4, r0
 8009666:	460d      	mov	r5, r1
 8009668:	f7f6 ff72 	bl	8000550 <__aeabi_dmul>
 800966c:	4642      	mov	r2, r8
 800966e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009672:	464b      	mov	r3, r9
 8009674:	4620      	mov	r0, r4
 8009676:	4629      	mov	r1, r5
 8009678:	f7f6 fdb2 	bl	80001e0 <__aeabi_dsub>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4630      	mov	r0, r6
 8009682:	4639      	mov	r1, r7
 8009684:	f7f6 fdac 	bl	80001e0 <__aeabi_dsub>
 8009688:	a333      	add	r3, pc, #204	; (adr r3, 8009758 <__ieee754_pow+0x708>)
 800968a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968e:	f7f6 ff5f 	bl	8000550 <__aeabi_dmul>
 8009692:	a333      	add	r3, pc, #204	; (adr r3, 8009760 <__ieee754_pow+0x710>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	4606      	mov	r6, r0
 800969a:	460f      	mov	r7, r1
 800969c:	4620      	mov	r0, r4
 800969e:	4629      	mov	r1, r5
 80096a0:	f7f6 ff56 	bl	8000550 <__aeabi_dmul>
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	4630      	mov	r0, r6
 80096aa:	4639      	mov	r1, r7
 80096ac:	f7f6 fd9a 	bl	80001e4 <__adddf3>
 80096b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096b2:	4b35      	ldr	r3, [pc, #212]	; (8009788 <__ieee754_pow+0x738>)
 80096b4:	4413      	add	r3, r2
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	f7f6 fd93 	bl	80001e4 <__adddf3>
 80096be:	4604      	mov	r4, r0
 80096c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c2:	460d      	mov	r5, r1
 80096c4:	f7f6 feda 	bl	800047c <__aeabi_i2d>
 80096c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096ca:	4b30      	ldr	r3, [pc, #192]	; (800978c <__ieee754_pow+0x73c>)
 80096cc:	4413      	add	r3, r2
 80096ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096d2:	4606      	mov	r6, r0
 80096d4:	460f      	mov	r7, r1
 80096d6:	4622      	mov	r2, r4
 80096d8:	462b      	mov	r3, r5
 80096da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096de:	f7f6 fd81 	bl	80001e4 <__adddf3>
 80096e2:	4642      	mov	r2, r8
 80096e4:	464b      	mov	r3, r9
 80096e6:	f7f6 fd7d 	bl	80001e4 <__adddf3>
 80096ea:	4632      	mov	r2, r6
 80096ec:	463b      	mov	r3, r7
 80096ee:	f7f6 fd79 	bl	80001e4 <__adddf3>
 80096f2:	9802      	ldr	r0, [sp, #8]
 80096f4:	4632      	mov	r2, r6
 80096f6:	463b      	mov	r3, r7
 80096f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096fc:	f7f6 fd70 	bl	80001e0 <__aeabi_dsub>
 8009700:	4642      	mov	r2, r8
 8009702:	464b      	mov	r3, r9
 8009704:	f7f6 fd6c 	bl	80001e0 <__aeabi_dsub>
 8009708:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800970c:	e607      	b.n	800931e <__ieee754_pow+0x2ce>
 800970e:	f04f 0a01 	mov.w	sl, #1
 8009712:	e6a5      	b.n	8009460 <__ieee754_pow+0x410>
 8009714:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009768 <__ieee754_pow+0x718>
 8009718:	e613      	b.n	8009342 <__ieee754_pow+0x2f2>
 800971a:	bf00      	nop
 800971c:	f3af 8000 	nop.w
 8009720:	4a454eef 	.word	0x4a454eef
 8009724:	3fca7e28 	.word	0x3fca7e28
 8009728:	93c9db65 	.word	0x93c9db65
 800972c:	3fcd864a 	.word	0x3fcd864a
 8009730:	a91d4101 	.word	0xa91d4101
 8009734:	3fd17460 	.word	0x3fd17460
 8009738:	518f264d 	.word	0x518f264d
 800973c:	3fd55555 	.word	0x3fd55555
 8009740:	db6fabff 	.word	0xdb6fabff
 8009744:	3fdb6db6 	.word	0x3fdb6db6
 8009748:	33333303 	.word	0x33333303
 800974c:	3fe33333 	.word	0x3fe33333
 8009750:	e0000000 	.word	0xe0000000
 8009754:	3feec709 	.word	0x3feec709
 8009758:	dc3a03fd 	.word	0xdc3a03fd
 800975c:	3feec709 	.word	0x3feec709
 8009760:	145b01f5 	.word	0x145b01f5
 8009764:	be3e2fe0 	.word	0xbe3e2fe0
 8009768:	00000000 	.word	0x00000000
 800976c:	3ff00000 	.word	0x3ff00000
 8009770:	43400000 	.word	0x43400000
 8009774:	0003988e 	.word	0x0003988e
 8009778:	000bb679 	.word	0x000bb679
 800977c:	0800abc8 	.word	0x0800abc8
 8009780:	3ff00000 	.word	0x3ff00000
 8009784:	40080000 	.word	0x40080000
 8009788:	0800abe8 	.word	0x0800abe8
 800978c:	0800abd8 	.word	0x0800abd8
 8009790:	a3b4      	add	r3, pc, #720	; (adr r3, 8009a64 <__ieee754_pow+0xa14>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	4640      	mov	r0, r8
 8009798:	4649      	mov	r1, r9
 800979a:	f7f6 fd23 	bl	80001e4 <__adddf3>
 800979e:	4622      	mov	r2, r4
 80097a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097a4:	462b      	mov	r3, r5
 80097a6:	4630      	mov	r0, r6
 80097a8:	4639      	mov	r1, r7
 80097aa:	f7f6 fd19 	bl	80001e0 <__aeabi_dsub>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097b6:	f7f7 f95b 	bl	8000a70 <__aeabi_dcmpgt>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	f47f adfe 	bne.w	80093bc <__ieee754_pow+0x36c>
 80097c0:	4aa3      	ldr	r2, [pc, #652]	; (8009a50 <__ieee754_pow+0xa00>)
 80097c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097c6:	4293      	cmp	r3, r2
 80097c8:	f340 810a 	ble.w	80099e0 <__ieee754_pow+0x990>
 80097cc:	151b      	asrs	r3, r3, #20
 80097ce:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80097d2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80097d6:	fa4a f303 	asr.w	r3, sl, r3
 80097da:	445b      	add	r3, fp
 80097dc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80097e0:	4e9c      	ldr	r6, [pc, #624]	; (8009a54 <__ieee754_pow+0xa04>)
 80097e2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80097e6:	4116      	asrs	r6, r2
 80097e8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80097ec:	2000      	movs	r0, #0
 80097ee:	ea23 0106 	bic.w	r1, r3, r6
 80097f2:	f1c2 0214 	rsb	r2, r2, #20
 80097f6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80097fa:	fa4a fa02 	asr.w	sl, sl, r2
 80097fe:	f1bb 0f00 	cmp.w	fp, #0
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4620      	mov	r0, r4
 8009808:	4629      	mov	r1, r5
 800980a:	bfb8      	it	lt
 800980c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009810:	f7f6 fce6 	bl	80001e0 <__aeabi_dsub>
 8009814:	e9cd 0100 	strd	r0, r1, [sp]
 8009818:	4642      	mov	r2, r8
 800981a:	464b      	mov	r3, r9
 800981c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009820:	f7f6 fce0 	bl	80001e4 <__adddf3>
 8009824:	2000      	movs	r0, #0
 8009826:	a378      	add	r3, pc, #480	; (adr r3, 8009a08 <__ieee754_pow+0x9b8>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	4604      	mov	r4, r0
 800982e:	460d      	mov	r5, r1
 8009830:	f7f6 fe8e 	bl	8000550 <__aeabi_dmul>
 8009834:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009838:	4606      	mov	r6, r0
 800983a:	460f      	mov	r7, r1
 800983c:	4620      	mov	r0, r4
 800983e:	4629      	mov	r1, r5
 8009840:	f7f6 fcce 	bl	80001e0 <__aeabi_dsub>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	4640      	mov	r0, r8
 800984a:	4649      	mov	r1, r9
 800984c:	f7f6 fcc8 	bl	80001e0 <__aeabi_dsub>
 8009850:	a36f      	add	r3, pc, #444	; (adr r3, 8009a10 <__ieee754_pow+0x9c0>)
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	f7f6 fe7b 	bl	8000550 <__aeabi_dmul>
 800985a:	a36f      	add	r3, pc, #444	; (adr r3, 8009a18 <__ieee754_pow+0x9c8>)
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	4680      	mov	r8, r0
 8009862:	4689      	mov	r9, r1
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7f6 fe72 	bl	8000550 <__aeabi_dmul>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	4640      	mov	r0, r8
 8009872:	4649      	mov	r1, r9
 8009874:	f7f6 fcb6 	bl	80001e4 <__adddf3>
 8009878:	4604      	mov	r4, r0
 800987a:	460d      	mov	r5, r1
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4630      	mov	r0, r6
 8009882:	4639      	mov	r1, r7
 8009884:	f7f6 fcae 	bl	80001e4 <__adddf3>
 8009888:	4632      	mov	r2, r6
 800988a:	463b      	mov	r3, r7
 800988c:	4680      	mov	r8, r0
 800988e:	4689      	mov	r9, r1
 8009890:	f7f6 fca6 	bl	80001e0 <__aeabi_dsub>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4620      	mov	r0, r4
 800989a:	4629      	mov	r1, r5
 800989c:	f7f6 fca0 	bl	80001e0 <__aeabi_dsub>
 80098a0:	4642      	mov	r2, r8
 80098a2:	4606      	mov	r6, r0
 80098a4:	460f      	mov	r7, r1
 80098a6:	464b      	mov	r3, r9
 80098a8:	4640      	mov	r0, r8
 80098aa:	4649      	mov	r1, r9
 80098ac:	f7f6 fe50 	bl	8000550 <__aeabi_dmul>
 80098b0:	a35b      	add	r3, pc, #364	; (adr r3, 8009a20 <__ieee754_pow+0x9d0>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	4604      	mov	r4, r0
 80098b8:	460d      	mov	r5, r1
 80098ba:	f7f6 fe49 	bl	8000550 <__aeabi_dmul>
 80098be:	a35a      	add	r3, pc, #360	; (adr r3, 8009a28 <__ieee754_pow+0x9d8>)
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	f7f6 fc8c 	bl	80001e0 <__aeabi_dsub>
 80098c8:	4622      	mov	r2, r4
 80098ca:	462b      	mov	r3, r5
 80098cc:	f7f6 fe40 	bl	8000550 <__aeabi_dmul>
 80098d0:	a357      	add	r3, pc, #348	; (adr r3, 8009a30 <__ieee754_pow+0x9e0>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	f7f6 fc85 	bl	80001e4 <__adddf3>
 80098da:	4622      	mov	r2, r4
 80098dc:	462b      	mov	r3, r5
 80098de:	f7f6 fe37 	bl	8000550 <__aeabi_dmul>
 80098e2:	a355      	add	r3, pc, #340	; (adr r3, 8009a38 <__ieee754_pow+0x9e8>)
 80098e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e8:	f7f6 fc7a 	bl	80001e0 <__aeabi_dsub>
 80098ec:	4622      	mov	r2, r4
 80098ee:	462b      	mov	r3, r5
 80098f0:	f7f6 fe2e 	bl	8000550 <__aeabi_dmul>
 80098f4:	a352      	add	r3, pc, #328	; (adr r3, 8009a40 <__ieee754_pow+0x9f0>)
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	f7f6 fc73 	bl	80001e4 <__adddf3>
 80098fe:	4622      	mov	r2, r4
 8009900:	462b      	mov	r3, r5
 8009902:	f7f6 fe25 	bl	8000550 <__aeabi_dmul>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4640      	mov	r0, r8
 800990c:	4649      	mov	r1, r9
 800990e:	f7f6 fc67 	bl	80001e0 <__aeabi_dsub>
 8009912:	4604      	mov	r4, r0
 8009914:	460d      	mov	r5, r1
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	f7f6 fe17 	bl	8000550 <__aeabi_dmul>
 8009922:	2200      	movs	r2, #0
 8009924:	e9cd 0100 	strd	r0, r1, [sp]
 8009928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800992c:	4620      	mov	r0, r4
 800992e:	4629      	mov	r1, r5
 8009930:	f7f6 fc56 	bl	80001e0 <__aeabi_dsub>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800993c:	f7f6 ff32 	bl	80007a4 <__aeabi_ddiv>
 8009940:	4632      	mov	r2, r6
 8009942:	4604      	mov	r4, r0
 8009944:	460d      	mov	r5, r1
 8009946:	463b      	mov	r3, r7
 8009948:	4640      	mov	r0, r8
 800994a:	4649      	mov	r1, r9
 800994c:	f7f6 fe00 	bl	8000550 <__aeabi_dmul>
 8009950:	4632      	mov	r2, r6
 8009952:	463b      	mov	r3, r7
 8009954:	f7f6 fc46 	bl	80001e4 <__adddf3>
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f6 fc3e 	bl	80001e0 <__aeabi_dsub>
 8009964:	4642      	mov	r2, r8
 8009966:	464b      	mov	r3, r9
 8009968:	f7f6 fc3a 	bl	80001e0 <__aeabi_dsub>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	2000      	movs	r0, #0
 8009972:	4939      	ldr	r1, [pc, #228]	; (8009a58 <__ieee754_pow+0xa08>)
 8009974:	f7f6 fc34 	bl	80001e0 <__aeabi_dsub>
 8009978:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800997c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	da2f      	bge.n	80099e6 <__ieee754_pow+0x996>
 8009986:	4650      	mov	r0, sl
 8009988:	ec43 2b10 	vmov	d0, r2, r3
 800998c:	f000 f9c0 	bl	8009d10 <scalbn>
 8009990:	ec51 0b10 	vmov	r0, r1, d0
 8009994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009998:	f7ff bbf1 	b.w	800917e <__ieee754_pow+0x12e>
 800999c:	4b2f      	ldr	r3, [pc, #188]	; (8009a5c <__ieee754_pow+0xa0c>)
 800999e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80099a2:	429e      	cmp	r6, r3
 80099a4:	f77f af0c 	ble.w	80097c0 <__ieee754_pow+0x770>
 80099a8:	4b2d      	ldr	r3, [pc, #180]	; (8009a60 <__ieee754_pow+0xa10>)
 80099aa:	440b      	add	r3, r1
 80099ac:	4303      	orrs	r3, r0
 80099ae:	d00b      	beq.n	80099c8 <__ieee754_pow+0x978>
 80099b0:	a325      	add	r3, pc, #148	; (adr r3, 8009a48 <__ieee754_pow+0x9f8>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099ba:	f7f6 fdc9 	bl	8000550 <__aeabi_dmul>
 80099be:	a322      	add	r3, pc, #136	; (adr r3, 8009a48 <__ieee754_pow+0x9f8>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f7ff bbdb 	b.w	800917e <__ieee754_pow+0x12e>
 80099c8:	4622      	mov	r2, r4
 80099ca:	462b      	mov	r3, r5
 80099cc:	f7f6 fc08 	bl	80001e0 <__aeabi_dsub>
 80099d0:	4642      	mov	r2, r8
 80099d2:	464b      	mov	r3, r9
 80099d4:	f7f7 f842 	bl	8000a5c <__aeabi_dcmpge>
 80099d8:	2800      	cmp	r0, #0
 80099da:	f43f aef1 	beq.w	80097c0 <__ieee754_pow+0x770>
 80099de:	e7e7      	b.n	80099b0 <__ieee754_pow+0x960>
 80099e0:	f04f 0a00 	mov.w	sl, #0
 80099e4:	e718      	b.n	8009818 <__ieee754_pow+0x7c8>
 80099e6:	4621      	mov	r1, r4
 80099e8:	e7d4      	b.n	8009994 <__ieee754_pow+0x944>
 80099ea:	2000      	movs	r0, #0
 80099ec:	491a      	ldr	r1, [pc, #104]	; (8009a58 <__ieee754_pow+0xa08>)
 80099ee:	f7ff bb8f 	b.w	8009110 <__ieee754_pow+0xc0>
 80099f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099f6:	f7ff bb8b 	b.w	8009110 <__ieee754_pow+0xc0>
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7ff bb87 	b.w	8009110 <__ieee754_pow+0xc0>
 8009a02:	4693      	mov	fp, r2
 8009a04:	f7ff bb98 	b.w	8009138 <__ieee754_pow+0xe8>
 8009a08:	00000000 	.word	0x00000000
 8009a0c:	3fe62e43 	.word	0x3fe62e43
 8009a10:	fefa39ef 	.word	0xfefa39ef
 8009a14:	3fe62e42 	.word	0x3fe62e42
 8009a18:	0ca86c39 	.word	0x0ca86c39
 8009a1c:	be205c61 	.word	0xbe205c61
 8009a20:	72bea4d0 	.word	0x72bea4d0
 8009a24:	3e663769 	.word	0x3e663769
 8009a28:	c5d26bf1 	.word	0xc5d26bf1
 8009a2c:	3ebbbd41 	.word	0x3ebbbd41
 8009a30:	af25de2c 	.word	0xaf25de2c
 8009a34:	3f11566a 	.word	0x3f11566a
 8009a38:	16bebd93 	.word	0x16bebd93
 8009a3c:	3f66c16c 	.word	0x3f66c16c
 8009a40:	5555553e 	.word	0x5555553e
 8009a44:	3fc55555 	.word	0x3fc55555
 8009a48:	c2f8f359 	.word	0xc2f8f359
 8009a4c:	01a56e1f 	.word	0x01a56e1f
 8009a50:	3fe00000 	.word	0x3fe00000
 8009a54:	000fffff 	.word	0x000fffff
 8009a58:	3ff00000 	.word	0x3ff00000
 8009a5c:	4090cbff 	.word	0x4090cbff
 8009a60:	3f6f3400 	.word	0x3f6f3400
 8009a64:	652b82fe 	.word	0x652b82fe
 8009a68:	3c971547 	.word	0x3c971547

08009a6c <__ieee754_sqrt>:
 8009a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a70:	4955      	ldr	r1, [pc, #340]	; (8009bc8 <__ieee754_sqrt+0x15c>)
 8009a72:	ec55 4b10 	vmov	r4, r5, d0
 8009a76:	43a9      	bics	r1, r5
 8009a78:	462b      	mov	r3, r5
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	d112      	bne.n	8009aa4 <__ieee754_sqrt+0x38>
 8009a7e:	ee10 2a10 	vmov	r2, s0
 8009a82:	ee10 0a10 	vmov	r0, s0
 8009a86:	4629      	mov	r1, r5
 8009a88:	f7f6 fd62 	bl	8000550 <__aeabi_dmul>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4620      	mov	r0, r4
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7f6 fba6 	bl	80001e4 <__adddf3>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	ec45 4b10 	vmov	d0, r4, r5
 8009aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa4:	2d00      	cmp	r5, #0
 8009aa6:	ee10 0a10 	vmov	r0, s0
 8009aaa:	4621      	mov	r1, r4
 8009aac:	dc0f      	bgt.n	8009ace <__ieee754_sqrt+0x62>
 8009aae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ab2:	4330      	orrs	r0, r6
 8009ab4:	d0f2      	beq.n	8009a9c <__ieee754_sqrt+0x30>
 8009ab6:	b155      	cbz	r5, 8009ace <__ieee754_sqrt+0x62>
 8009ab8:	ee10 2a10 	vmov	r2, s0
 8009abc:	4620      	mov	r0, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	f7f6 fb8e 	bl	80001e0 <__aeabi_dsub>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	f7f6 fe6c 	bl	80007a4 <__aeabi_ddiv>
 8009acc:	e7e4      	b.n	8009a98 <__ieee754_sqrt+0x2c>
 8009ace:	151b      	asrs	r3, r3, #20
 8009ad0:	d073      	beq.n	8009bba <__ieee754_sqrt+0x14e>
 8009ad2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ad6:	07dd      	lsls	r5, r3, #31
 8009ad8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009adc:	bf48      	it	mi
 8009ade:	0fc8      	lsrmi	r0, r1, #31
 8009ae0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009ae4:	bf44      	itt	mi
 8009ae6:	0049      	lslmi	r1, r1, #1
 8009ae8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009aec:	2500      	movs	r5, #0
 8009aee:	1058      	asrs	r0, r3, #1
 8009af0:	0fcb      	lsrs	r3, r1, #31
 8009af2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009af6:	0049      	lsls	r1, r1, #1
 8009af8:	2316      	movs	r3, #22
 8009afa:	462c      	mov	r4, r5
 8009afc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009b00:	19a7      	adds	r7, r4, r6
 8009b02:	4297      	cmp	r7, r2
 8009b04:	bfde      	ittt	le
 8009b06:	19bc      	addle	r4, r7, r6
 8009b08:	1bd2      	suble	r2, r2, r7
 8009b0a:	19ad      	addle	r5, r5, r6
 8009b0c:	0fcf      	lsrs	r7, r1, #31
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009b14:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009b1c:	d1f0      	bne.n	8009b00 <__ieee754_sqrt+0x94>
 8009b1e:	f04f 0c20 	mov.w	ip, #32
 8009b22:	469e      	mov	lr, r3
 8009b24:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009b28:	42a2      	cmp	r2, r4
 8009b2a:	eb06 070e 	add.w	r7, r6, lr
 8009b2e:	dc02      	bgt.n	8009b36 <__ieee754_sqrt+0xca>
 8009b30:	d112      	bne.n	8009b58 <__ieee754_sqrt+0xec>
 8009b32:	428f      	cmp	r7, r1
 8009b34:	d810      	bhi.n	8009b58 <__ieee754_sqrt+0xec>
 8009b36:	2f00      	cmp	r7, #0
 8009b38:	eb07 0e06 	add.w	lr, r7, r6
 8009b3c:	da42      	bge.n	8009bc4 <__ieee754_sqrt+0x158>
 8009b3e:	f1be 0f00 	cmp.w	lr, #0
 8009b42:	db3f      	blt.n	8009bc4 <__ieee754_sqrt+0x158>
 8009b44:	f104 0801 	add.w	r8, r4, #1
 8009b48:	1b12      	subs	r2, r2, r4
 8009b4a:	428f      	cmp	r7, r1
 8009b4c:	bf88      	it	hi
 8009b4e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009b52:	1bc9      	subs	r1, r1, r7
 8009b54:	4433      	add	r3, r6
 8009b56:	4644      	mov	r4, r8
 8009b58:	0052      	lsls	r2, r2, #1
 8009b5a:	f1bc 0c01 	subs.w	ip, ip, #1
 8009b5e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009b62:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009b66:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b6a:	d1dd      	bne.n	8009b28 <__ieee754_sqrt+0xbc>
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	d006      	beq.n	8009b7e <__ieee754_sqrt+0x112>
 8009b70:	1c5c      	adds	r4, r3, #1
 8009b72:	bf13      	iteet	ne
 8009b74:	3301      	addne	r3, #1
 8009b76:	3501      	addeq	r5, #1
 8009b78:	4663      	moveq	r3, ip
 8009b7a:	f023 0301 	bicne.w	r3, r3, #1
 8009b7e:	106a      	asrs	r2, r5, #1
 8009b80:	085b      	lsrs	r3, r3, #1
 8009b82:	07e9      	lsls	r1, r5, #31
 8009b84:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009b88:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009b8c:	bf48      	it	mi
 8009b8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009b92:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009b96:	461c      	mov	r4, r3
 8009b98:	e780      	b.n	8009a9c <__ieee754_sqrt+0x30>
 8009b9a:	0aca      	lsrs	r2, r1, #11
 8009b9c:	3815      	subs	r0, #21
 8009b9e:	0549      	lsls	r1, r1, #21
 8009ba0:	2a00      	cmp	r2, #0
 8009ba2:	d0fa      	beq.n	8009b9a <__ieee754_sqrt+0x12e>
 8009ba4:	02d6      	lsls	r6, r2, #11
 8009ba6:	d50a      	bpl.n	8009bbe <__ieee754_sqrt+0x152>
 8009ba8:	f1c3 0420 	rsb	r4, r3, #32
 8009bac:	fa21 f404 	lsr.w	r4, r1, r4
 8009bb0:	1e5d      	subs	r5, r3, #1
 8009bb2:	4099      	lsls	r1, r3
 8009bb4:	4322      	orrs	r2, r4
 8009bb6:	1b43      	subs	r3, r0, r5
 8009bb8:	e78b      	b.n	8009ad2 <__ieee754_sqrt+0x66>
 8009bba:	4618      	mov	r0, r3
 8009bbc:	e7f0      	b.n	8009ba0 <__ieee754_sqrt+0x134>
 8009bbe:	0052      	lsls	r2, r2, #1
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	e7ef      	b.n	8009ba4 <__ieee754_sqrt+0x138>
 8009bc4:	46a0      	mov	r8, r4
 8009bc6:	e7bf      	b.n	8009b48 <__ieee754_sqrt+0xdc>
 8009bc8:	7ff00000 	.word	0x7ff00000

08009bcc <fabs>:
 8009bcc:	ec51 0b10 	vmov	r0, r1, d0
 8009bd0:	ee10 2a10 	vmov	r2, s0
 8009bd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009bd8:	ec43 2b10 	vmov	d0, r2, r3
 8009bdc:	4770      	bx	lr

08009bde <finite>:
 8009bde:	ee10 3a90 	vmov	r3, s1
 8009be2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009be6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009bea:	0fc0      	lsrs	r0, r0, #31
 8009bec:	4770      	bx	lr

08009bee <matherr>:
 8009bee:	2000      	movs	r0, #0
 8009bf0:	4770      	bx	lr
 8009bf2:	0000      	movs	r0, r0
 8009bf4:	0000      	movs	r0, r0
	...

08009bf8 <nan>:
 8009bf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c00 <nan+0x8>
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	00000000 	.word	0x00000000
 8009c04:	7ff80000 	.word	0x7ff80000

08009c08 <rint>:
 8009c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c0a:	ec51 0b10 	vmov	r0, r1, d0
 8009c0e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009c12:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009c16:	2e13      	cmp	r6, #19
 8009c18:	460b      	mov	r3, r1
 8009c1a:	ee10 4a10 	vmov	r4, s0
 8009c1e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009c22:	dc56      	bgt.n	8009cd2 <rint+0xca>
 8009c24:	2e00      	cmp	r6, #0
 8009c26:	da2b      	bge.n	8009c80 <rint+0x78>
 8009c28:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009c2c:	4302      	orrs	r2, r0
 8009c2e:	d023      	beq.n	8009c78 <rint+0x70>
 8009c30:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009c34:	4302      	orrs	r2, r0
 8009c36:	4254      	negs	r4, r2
 8009c38:	4314      	orrs	r4, r2
 8009c3a:	0c4b      	lsrs	r3, r1, #17
 8009c3c:	0b24      	lsrs	r4, r4, #12
 8009c3e:	045b      	lsls	r3, r3, #17
 8009c40:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009c44:	ea44 0103 	orr.w	r1, r4, r3
 8009c48:	460b      	mov	r3, r1
 8009c4a:	492f      	ldr	r1, [pc, #188]	; (8009d08 <rint+0x100>)
 8009c4c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009c50:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009c54:	4602      	mov	r2, r0
 8009c56:	4639      	mov	r1, r7
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f7f6 fac3 	bl	80001e4 <__adddf3>
 8009c5e:	e9cd 0100 	strd	r0, r1, [sp]
 8009c62:	463b      	mov	r3, r7
 8009c64:	4632      	mov	r2, r6
 8009c66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c6a:	f7f6 fab9 	bl	80001e0 <__aeabi_dsub>
 8009c6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c72:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009c76:	4639      	mov	r1, r7
 8009c78:	ec41 0b10 	vmov	d0, r0, r1
 8009c7c:	b003      	add	sp, #12
 8009c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c80:	4a22      	ldr	r2, [pc, #136]	; (8009d0c <rint+0x104>)
 8009c82:	4132      	asrs	r2, r6
 8009c84:	ea01 0702 	and.w	r7, r1, r2
 8009c88:	4307      	orrs	r7, r0
 8009c8a:	d0f5      	beq.n	8009c78 <rint+0x70>
 8009c8c:	0852      	lsrs	r2, r2, #1
 8009c8e:	4011      	ands	r1, r2
 8009c90:	430c      	orrs	r4, r1
 8009c92:	d00b      	beq.n	8009cac <rint+0xa4>
 8009c94:	ea23 0202 	bic.w	r2, r3, r2
 8009c98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c9c:	2e13      	cmp	r6, #19
 8009c9e:	fa43 f306 	asr.w	r3, r3, r6
 8009ca2:	bf0c      	ite	eq
 8009ca4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009ca8:	2400      	movne	r4, #0
 8009caa:	4313      	orrs	r3, r2
 8009cac:	4916      	ldr	r1, [pc, #88]	; (8009d08 <rint+0x100>)
 8009cae:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009cb2:	4622      	mov	r2, r4
 8009cb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009cb8:	4620      	mov	r0, r4
 8009cba:	4629      	mov	r1, r5
 8009cbc:	f7f6 fa92 	bl	80001e4 <__adddf3>
 8009cc0:	e9cd 0100 	strd	r0, r1, [sp]
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ccc:	f7f6 fa88 	bl	80001e0 <__aeabi_dsub>
 8009cd0:	e7d2      	b.n	8009c78 <rint+0x70>
 8009cd2:	2e33      	cmp	r6, #51	; 0x33
 8009cd4:	dd07      	ble.n	8009ce6 <rint+0xde>
 8009cd6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009cda:	d1cd      	bne.n	8009c78 <rint+0x70>
 8009cdc:	ee10 2a10 	vmov	r2, s0
 8009ce0:	f7f6 fa80 	bl	80001e4 <__adddf3>
 8009ce4:	e7c8      	b.n	8009c78 <rint+0x70>
 8009ce6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009cea:	f04f 32ff 	mov.w	r2, #4294967295
 8009cee:	40f2      	lsrs	r2, r6
 8009cf0:	4210      	tst	r0, r2
 8009cf2:	d0c1      	beq.n	8009c78 <rint+0x70>
 8009cf4:	0852      	lsrs	r2, r2, #1
 8009cf6:	4210      	tst	r0, r2
 8009cf8:	bf1f      	itttt	ne
 8009cfa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009cfe:	ea20 0202 	bicne.w	r2, r0, r2
 8009d02:	4134      	asrne	r4, r6
 8009d04:	4314      	orrne	r4, r2
 8009d06:	e7d1      	b.n	8009cac <rint+0xa4>
 8009d08:	0800abf8 	.word	0x0800abf8
 8009d0c:	000fffff 	.word	0x000fffff

08009d10 <scalbn>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	ec55 4b10 	vmov	r4, r5, d0
 8009d16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	462b      	mov	r3, r5
 8009d1e:	b9aa      	cbnz	r2, 8009d4c <scalbn+0x3c>
 8009d20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d24:	4323      	orrs	r3, r4
 8009d26:	d03b      	beq.n	8009da0 <scalbn+0x90>
 8009d28:	4b31      	ldr	r3, [pc, #196]	; (8009df0 <scalbn+0xe0>)
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	ee10 0a10 	vmov	r0, s0
 8009d32:	f7f6 fc0d 	bl	8000550 <__aeabi_dmul>
 8009d36:	4b2f      	ldr	r3, [pc, #188]	; (8009df4 <scalbn+0xe4>)
 8009d38:	429e      	cmp	r6, r3
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	460d      	mov	r5, r1
 8009d3e:	da12      	bge.n	8009d66 <scalbn+0x56>
 8009d40:	a327      	add	r3, pc, #156	; (adr r3, 8009de0 <scalbn+0xd0>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 fc03 	bl	8000550 <__aeabi_dmul>
 8009d4a:	e009      	b.n	8009d60 <scalbn+0x50>
 8009d4c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009d50:	428a      	cmp	r2, r1
 8009d52:	d10c      	bne.n	8009d6e <scalbn+0x5e>
 8009d54:	ee10 2a10 	vmov	r2, s0
 8009d58:	4620      	mov	r0, r4
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	f7f6 fa42 	bl	80001e4 <__adddf3>
 8009d60:	4604      	mov	r4, r0
 8009d62:	460d      	mov	r5, r1
 8009d64:	e01c      	b.n	8009da0 <scalbn+0x90>
 8009d66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	3a36      	subs	r2, #54	; 0x36
 8009d6e:	4432      	add	r2, r6
 8009d70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009d74:	428a      	cmp	r2, r1
 8009d76:	dd0b      	ble.n	8009d90 <scalbn+0x80>
 8009d78:	ec45 4b11 	vmov	d1, r4, r5
 8009d7c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009de8 <scalbn+0xd8>
 8009d80:	f000 f83c 	bl	8009dfc <copysign>
 8009d84:	a318      	add	r3, pc, #96	; (adr r3, 8009de8 <scalbn+0xd8>)
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	ec51 0b10 	vmov	r0, r1, d0
 8009d8e:	e7da      	b.n	8009d46 <scalbn+0x36>
 8009d90:	2a00      	cmp	r2, #0
 8009d92:	dd08      	ble.n	8009da6 <scalbn+0x96>
 8009d94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009da0:	ec45 4b10 	vmov	d0, r4, r5
 8009da4:	bd70      	pop	{r4, r5, r6, pc}
 8009da6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009daa:	da0d      	bge.n	8009dc8 <scalbn+0xb8>
 8009dac:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009db0:	429e      	cmp	r6, r3
 8009db2:	ec45 4b11 	vmov	d1, r4, r5
 8009db6:	dce1      	bgt.n	8009d7c <scalbn+0x6c>
 8009db8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009de0 <scalbn+0xd0>
 8009dbc:	f000 f81e 	bl	8009dfc <copysign>
 8009dc0:	a307      	add	r3, pc, #28	; (adr r3, 8009de0 <scalbn+0xd0>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	e7e0      	b.n	8009d8a <scalbn+0x7a>
 8009dc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009dcc:	3236      	adds	r2, #54	; 0x36
 8009dce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009dd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	4629      	mov	r1, r5
 8009dda:	2200      	movs	r2, #0
 8009ddc:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <scalbn+0xe8>)
 8009dde:	e7b2      	b.n	8009d46 <scalbn+0x36>
 8009de0:	c2f8f359 	.word	0xc2f8f359
 8009de4:	01a56e1f 	.word	0x01a56e1f
 8009de8:	8800759c 	.word	0x8800759c
 8009dec:	7e37e43c 	.word	0x7e37e43c
 8009df0:	43500000 	.word	0x43500000
 8009df4:	ffff3cb0 	.word	0xffff3cb0
 8009df8:	3c900000 	.word	0x3c900000

08009dfc <copysign>:
 8009dfc:	ec51 0b10 	vmov	r0, r1, d0
 8009e00:	ee11 0a90 	vmov	r0, s3
 8009e04:	ee10 2a10 	vmov	r2, s0
 8009e08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009e10:	ea41 0300 	orr.w	r3, r1, r0
 8009e14:	ec43 2b10 	vmov	d0, r2, r3
 8009e18:	4770      	bx	lr
	...

08009e1c <_init>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	bf00      	nop
 8009e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e22:	bc08      	pop	{r3}
 8009e24:	469e      	mov	lr, r3
 8009e26:	4770      	bx	lr

08009e28 <_fini>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	bf00      	nop
 8009e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2e:	bc08      	pop	{r3}
 8009e30:	469e      	mov	lr, r3
 8009e32:	4770      	bx	lr
