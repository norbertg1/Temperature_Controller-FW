
Temperature controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005028  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e0  080051e0  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080051e0  080051e0  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051e0  080051e0  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080051e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000030  08005218  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08005218  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cca  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023de  00000000  00000000  00030d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001028  00000000  00000000  00033108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00034130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000023d7  00000000  00000000  00035030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7bf  00000000  00000000  00037407  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087c12  00000000  00000000  00043bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb7d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004488  00000000  00000000  000cb854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005198 	.word	0x08005198

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08005198 	.word	0x08005198

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 ff38 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f834 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f000 f9ee 	bl	8000df0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a14:	f000 f9ce 	bl	8000db4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a18:	f000 f888 	bl	8000b2c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000a1c:	f000 f8c6 	bl	8000bac <MX_I2C2_Init>
  MX_SDADC1_Init();
 8000a20:	f000 f904 	bl	8000c2c <MX_SDADC1_Init>
  MX_TIM2_Init();
 8000a24:	f000 f946 	bl	8000cb4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  start_pwm(&htim2);
 8000a28:	4810      	ldr	r0, [pc, #64]	; (8000a6c <main+0x68>)
 8000a2a:	f000 fd6d 	bl	8001508 <start_pwm>
  HAL_SDADC_CalibrationStart(&hsdadc1, SDADC_CALIBRATION_SEQ_3);
 8000a2e:	2104      	movs	r1, #4
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <main+0x6c>)
 8000a32:	f003 fba7 	bl	8004184 <HAL_SDADC_CalibrationStart>
  HAL_SDADC_PollForCalibEvent(&hsdadc1, 5000);
 8000a36:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <main+0x6c>)
 8000a3c:	f003 fbe2 	bl	8004204 <HAL_SDADC_PollForCalibEvent>
  HAL_SDADC_Start_DMA(&hsdadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000a40:	2202      	movs	r2, #2
 8000a42:	490c      	ldr	r1, [pc, #48]	; (8000a74 <main+0x70>)
 8000a44:	480a      	ldr	r0, [pc, #40]	; (8000a70 <main+0x6c>)
 8000a46:	f003 fc17 	bl	8004278 <HAL_SDADC_Start_DMA>
  ssd1306_Init();
 8000a4a:	f000 fa89 	bl	8000f60 <ssd1306_Init>
  HAL_Delay(1000);
 8000a4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a52:	f000 ff79 	bl	8001948 <HAL_Delay>
  ssd1306_Fill(White);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f000 faee 	bl	8001038 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000a5c:	f000 fb0e 	bl	800107c <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  blink();
 8000a60:	f000 fd46 	bl	80014f0 <blink>
  while (1)
  {
    /* USER CODE END WHILE */
	  update_pid();
 8000a64:	f000 fd60 	bl	8001528 <update_pid>
 8000a68:	e7fc      	b.n	8000a64 <main+0x60>
 8000a6a:	bf00      	nop
 8000a6c:	20000580 	.word	0x20000580
 8000a70:	20000538 	.word	0x20000538
 8000a74:	2000057c 	.word	0x2000057c

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b09a      	sub	sp, #104	; 0x68
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a82:	2228      	movs	r2, #40	; 0x28
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f004 fb7e 	bl	8005188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	222c      	movs	r2, #44	; 0x2c
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f004 fb70 	bl	8005188 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aac:	2301      	movs	r3, #1
 8000aae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 f80f 	bl	8002ae0 <HAL_RCC_OscConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000ac8:	f000 fa2a 	bl	8000f20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000acc:	230f      	movs	r3, #15
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 ff02 	bl	80038f0 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000af2:	f000 fa15 	bl	8000f20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8000af6:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8000afa:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV2;
 8000b04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000b08:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 f8d5 	bl	8003cbc <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b18:	f000 fa02 	bl	8000f20 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8000b1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b20:	f001 ffbe 	bl	8002aa0 <HAL_PWREx_EnableSDADC>
}
 8000b24:	bf00      	nop
 8000b26:	3768      	adds	r7, #104	; 0x68
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <MX_I2C1_Init+0x78>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <MX_I2C1_Init+0x7c>)
 8000b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b66:	480e      	ldr	r0, [pc, #56]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b68:	f001 fb96 	bl	8002298 <HAL_I2C_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b72:	f000 f9d5 	bl	8000f20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b76:	2100      	movs	r1, #0
 8000b78:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b7a:	f001 fef9 	bl	8002970 <HAL_I2CEx_ConfigAnalogFilter>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b84:	f000 f9cc 	bl	8000f20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b8c:	f001 ff3b 	bl	8002a06 <HAL_I2CEx_ConfigDigitalFilter>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b96:	f000 f9c3 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200004a0 	.word	0x200004a0
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	2000090e 	.word	0x2000090e

08000bac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <MX_I2C2_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <MX_I2C2_Init+0x7c>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000be8:	f001 fb56 	bl	8002298 <HAL_I2C_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bf2:	f000 f995 	bl	8000f20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bfa:	f001 feb9 	bl	8002970 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f000 f98c 	bl	8000f20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000c0c:	f001 fefb 	bl	8002a06 <HAL_I2CEx_ConfigDigitalFilter>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 f983 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200004ec 	.word	0x200004ec
 8000c24:	40005800 	.word	0x40005800
 8000c28:	2000090e 	.word	0x2000090e

08000c2c <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC1_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_SDADC1_Init+0x80>)
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <MX_SDADC1_Init+0x84>)
 8000c42:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MX_SDADC1_Init+0x80>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_SDADC1_Init+0x80>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_SDADC1_Init+0x80>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_SDADC1_Init+0x80>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8000c5c:	4813      	ldr	r0, [pc, #76]	; (8000cac <MX_SDADC1_Init+0x80>)
 8000c5e:	f003 f9a1 	bl	8003fa4 <HAL_SDADC_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_SDADC1_Init+0x40>
  {
    Error_Handler();
 8000c68:	f000 f95a 	bl	8000f20 <Error_Handler>
  }
  /** Configure The Regular Mode
  */
  if (HAL_SDADC_SelectRegularTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480f      	ldr	r0, [pc, #60]	; (8000cac <MX_SDADC1_Init+0x80>)
 8000c70:	f003 fa58 	bl	8004124 <HAL_SDADC_SelectRegularTrigger>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_SDADC1_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f000 f951 	bl	8000f20 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_DIFF;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	461a      	mov	r2, r3
 8000c92:	2100      	movs	r1, #0
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_SDADC1_Init+0x80>)
 8000c96:	f003 fa09 	bl	80040ac <HAL_SDADC_PrepareChannelConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_SDADC1_Init+0x78>
  {
    Error_Handler();
 8000ca0:	f000 f93e 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000538 	.word	0x20000538
 8000cb0:	40016000 	.word	0x40016000

08000cb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
 8000ce0:	615a      	str	r2, [r3, #20]
 8000ce2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cec:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 160;
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000cfa:	22a0      	movs	r2, #160	; 0xa0
 8000cfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d0a:	4829      	ldr	r0, [pc, #164]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000d0c:	f003 fccf 	bl	80046ae <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000d16:	f000 f903 	bl	8000f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4822      	ldr	r0, [pc, #136]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000d28:	f003 fe2c 	bl	8004984 <HAL_TIM_ConfigClockSource>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000d32:	f000 f8f5 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d36:	481e      	ldr	r0, [pc, #120]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000d38:	f003 fce4 	bl	8004704 <HAL_TIM_PWM_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000d42:	f000 f8ed 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	4619      	mov	r1, r3
 8000d54:	4816      	ldr	r0, [pc, #88]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000d56:	f004 f97f 	bl	8005058 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000d60:	f000 f8de 	bl	8000f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d64:	2360      	movs	r3, #96	; 0x60
 8000d66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d70:	2304      	movs	r3, #4
 8000d72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000d7c:	f003 fd3c 	bl	80047f8 <HAL_TIM_PWM_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000d86:	f000 f8cb 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000d92:	f003 fd31 	bl	80047f8 <HAL_TIM_PWM_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000d9c:	f000 f8c0 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <MX_TIM2_Init+0xfc>)
 8000da2:	f000 fae3 	bl	800136c <HAL_TIM_MspPostInit>

}
 8000da6:	bf00      	nop
 8000da8:	3738      	adds	r7, #56	; 0x38
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000580 	.word	0x20000580

08000db4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_DMA_Init+0x38>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <MX_DMA_Init+0x38>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_DMA_Init+0x38>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	203a      	movs	r0, #58	; 0x3a
 8000dd8:	f000 feb3 	bl	8001b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000ddc:	203a      	movs	r0, #58	; 0x3a
 8000dde:	f000 fecc 	bl	8001b7a <HAL_NVIC_EnableIRQ>

}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a41      	ldr	r2, [pc, #260]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e1e:	4b3c      	ldr	r3, [pc, #240]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	4a3b      	ldr	r2, [pc, #236]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e28:	6153      	str	r3, [r2, #20]
 8000e2a:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a35      	ldr	r2, [pc, #212]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a29      	ldr	r2, [pc, #164]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN2_Pin|GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	212c      	movs	r1, #44	; 0x2c
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f001 f9d7 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENCODER_PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENCODER_PUSH_BUTTON_Pin;
 8000e8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <MX_GPIO_Init+0x124>)
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481e      	ldr	r0, [pc, #120]	; (8000f18 <MX_GPIO_Init+0x128>)
 8000ea0:	f001 f838 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8000ea4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_GPIO_Init+0x12c>)
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4817      	ldr	r0, [pc, #92]	; (8000f18 <MX_GPIO_Init+0x128>)
 8000eba:	f001 f82b 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN2_Pin GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|GREEN_LED_Pin|RED_LED_Pin;
 8000ebe:	232c      	movs	r3, #44	; 0x2c
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed8:	f001 f81c 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000edc:	2310      	movs	r3, #16
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_GPIO_Init+0x12c>)
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f001 f80f 	bl	8001f14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2028      	movs	r0, #40	; 0x28
 8000efc:	f000 fe21 	bl	8001b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f00:	2028      	movs	r0, #40	; 0x28
 8000f02:	f000 fe3a 	bl	8001b7a <HAL_NVIC_EnableIRQ>

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	10210000 	.word	0x10210000
 8000f18:	48000800 	.word	0x48000800
 8000f1c:	10110000 	.word	0x10110000

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af04      	add	r7, sp, #16
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2301      	movs	r3, #1
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2178      	movs	r1, #120	; 0x78
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <ssd1306_WriteCommand+0x2c>)
 8000f4e:	f001 fa33 	bl	80023b8 <HAL_I2C_Mem_Write>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200004a0 	.word	0x200004a0

08000f60 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000f64:	2064      	movs	r0, #100	; 0x64
 8000f66:	f000 fcef 	bl	8001948 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8000f6a:	20ae      	movs	r0, #174	; 0xae
 8000f6c:	f7ff ffe0 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8000f70:	2020      	movs	r0, #32
 8000f72:	f7ff ffdd 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f76:	2010      	movs	r0, #16
 8000f78:	f7ff ffda 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f7c:	20b0      	movs	r0, #176	; 0xb0
 8000f7e:	f7ff ffd7 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000f82:	20c8      	movs	r0, #200	; 0xc8
 8000f84:	f7ff ffd4 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff ffd1 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000f8e:	2010      	movs	r0, #16
 8000f90:	f7ff ffce 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000f94:	2040      	movs	r0, #64	; 0x40
 8000f96:	f7ff ffcb 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8000f9a:	2081      	movs	r0, #129	; 0x81
 8000f9c:	f7ff ffc8 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8000fa0:	20ff      	movs	r0, #255	; 0xff
 8000fa2:	f7ff ffc5 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000fa6:	20a1      	movs	r0, #161	; 0xa1
 8000fa8:	f7ff ffc2 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000fac:	20a6      	movs	r0, #166	; 0xa6
 8000fae:	f7ff ffbf 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000fb2:	20a8      	movs	r0, #168	; 0xa8
 8000fb4:	f7ff ffbc 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8000fb8:	203f      	movs	r0, #63	; 0x3f
 8000fba:	f7ff ffb9 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fbe:	20a4      	movs	r0, #164	; 0xa4
 8000fc0:	f7ff ffb6 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000fc4:	20d3      	movs	r0, #211	; 0xd3
 8000fc6:	f7ff ffb3 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ffb0 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fd0:	20d5      	movs	r0, #213	; 0xd5
 8000fd2:	f7ff ffad 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000fd6:	20f0      	movs	r0, #240	; 0xf0
 8000fd8:	f7ff ffaa 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000fdc:	20d9      	movs	r0, #217	; 0xd9
 8000fde:	f7ff ffa7 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000fe2:	2022      	movs	r0, #34	; 0x22
 8000fe4:	f7ff ffa4 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000fe8:	20da      	movs	r0, #218	; 0xda
 8000fea:	f7ff ffa1 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000fee:	2012      	movs	r0, #18
 8000ff0:	f7ff ff9e 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000ff4:	20db      	movs	r0, #219	; 0xdb
 8000ff6:	f7ff ff9b 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000ffa:	2020      	movs	r0, #32
 8000ffc:	f7ff ff98 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001000:	208d      	movs	r0, #141	; 0x8d
 8001002:	f7ff ff95 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001006:	2014      	movs	r0, #20
 8001008:	f7ff ff92 	bl	8000f30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800100c:	20af      	movs	r0, #175	; 0xaf
 800100e:	f7ff ff8f 	bl	8000f30 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f810 	bl	8001038 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001018:	f000 f830 	bl	800107c <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <ssd1306_Init+0xd4>)
 800101e:	2200      	movs	r2, #0
 8001020:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <ssd1306_Init+0xd4>)
 8001024:	2200      	movs	r2, #0
 8001026:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <ssd1306_Init+0xd4>)
 800102a:	2201      	movs	r2, #1
 800102c:	715a      	strb	r2, [r3, #5]
	
	return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000044c 	.word	0x2000044c

08001038 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	e00d      	b.n	8001064 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <ssd1306_Fill+0x1a>
 800104e:	2100      	movs	r1, #0
 8001050:	e000      	b.n	8001054 <ssd1306_Fill+0x1c>
 8001052:	21ff      	movs	r1, #255	; 0xff
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <ssd1306_Fill+0x40>)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	460a      	mov	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800106a:	d3ed      	bcc.n	8001048 <ssd1306_Fill+0x10>
	}
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	2000004c 	.word	0x2000004c

0800107c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8001082:	2300      	movs	r3, #0
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	e01d      	b.n	80010c4 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	3b50      	subs	r3, #80	; 0x50
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff4e 	bl	8000f30 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff ff4b 	bl	8000f30 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800109a:	2010      	movs	r0, #16
 800109c:	f7ff ff48 	bl	8000f30 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	01db      	lsls	r3, r3, #7
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <ssd1306_UpdateScreen+0x58>)
 80010a6:	4413      	add	r3, r2
 80010a8:	2264      	movs	r2, #100	; 0x64
 80010aa:	9202      	str	r2, [sp, #8]
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	9201      	str	r2, [sp, #4]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	2240      	movs	r2, #64	; 0x40
 80010b6:	2178      	movs	r1, #120	; 0x78
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <ssd1306_UpdateScreen+0x5c>)
 80010ba:	f001 f97d 	bl	80023b8 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3301      	adds	r3, #1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d9de      	bls.n	8001088 <ssd1306_UpdateScreen+0xc>
	}
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000004c 	.word	0x2000004c
 80010d8:	200004a0 	.word	0x200004a0

080010dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x44>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_MspInit+0x44>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_MspInit+0x44>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_MspInit+0x44>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_MspInit+0x44>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_MspInit+0x44>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <HAL_I2C_MspInit+0xdc>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d129      	bne.n	800119a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a2e      	ldr	r2, [pc, #184]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001150:	6153      	str	r3, [r2, #20]
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800115e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001164:	2312      	movs	r3, #18
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001168:	2301      	movs	r3, #1
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001170:	2304      	movs	r3, #4
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4823      	ldr	r0, [pc, #140]	; (8001208 <HAL_I2C_MspInit+0xe4>)
 800117c:	f000 feca 	bl	8001f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118a:	61d3      	str	r3, [r2, #28]
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001198:	e02e      	b.n	80011f8 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a1b      	ldr	r2, [pc, #108]	; (800120c <HAL_I2C_MspInit+0xe8>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d129      	bne.n	80011f8 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	4a16      	ldr	r2, [pc, #88]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 80011aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ae:	6153      	str	r3, [r2, #20]
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c2:	2312      	movs	r3, #18
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011ce:	2304      	movs	r3, #4
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f000 fe9a 	bl	8001f14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 80011e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ea:	61d3      	str	r3, [r2, #28]
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_I2C_MspInit+0xe0>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	; 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40005400 	.word	0x40005400
 8001204:	40021000 	.word	0x40021000
 8001208:	48000400 	.word	0x48000400
 800120c:	40005800 	.word	0x40005800

08001210 <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a3a      	ldr	r2, [pc, #232]	; (8001318 <HAL_SDADC_MspInit+0x108>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d16d      	bne.n	800130e <HAL_SDADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8001232:	4b3a      	ldr	r3, [pc, #232]	; (800131c <HAL_SDADC_MspInit+0x10c>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a39      	ldr	r2, [pc, #228]	; (800131c <HAL_SDADC_MspInit+0x10c>)
 8001238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b37      	ldr	r3, [pc, #220]	; (800131c <HAL_SDADC_MspInit+0x10c>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	4b34      	ldr	r3, [pc, #208]	; (800131c <HAL_SDADC_MspInit+0x10c>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4a33      	ldr	r2, [pc, #204]	; (800131c <HAL_SDADC_MspInit+0x10c>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001254:	6153      	str	r3, [r2, #20]
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_SDADC_MspInit+0x10c>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <HAL_SDADC_MspInit+0x10c>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	4a2d      	ldr	r2, [pc, #180]	; (800131c <HAL_SDADC_MspInit+0x10c>)
 8001268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800126c:	6153      	str	r3, [r2, #20]
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_SDADC_MspInit+0x10c>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> SDADC1_AIN6P
    PB1     ------> SDADC1_AIN6M
    PE8     ------> SDADC1_AIN8P
    PE9     ------> SDADC1_AIN8M
    */
    GPIO_InitStruct.Pin = ADC_RES__Pin|ADC_RES_B1_Pin;
 800127a:	2303      	movs	r3, #3
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127e:	2303      	movs	r3, #3
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4824      	ldr	r0, [pc, #144]	; (8001320 <HAL_SDADC_MspInit+0x110>)
 800128e:	f000 fe41 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_NTC__Pin|ADC_NTC_E9_Pin;
 8001292:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	2303      	movs	r3, #3
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	481f      	ldr	r0, [pc, #124]	; (8001324 <HAL_SDADC_MspInit+0x114>)
 80012a8:	f000 fe34 	bl	8001f14 <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_SDADC_MspInit+0x118>)
 80012ae:	4a1f      	ldr	r2, [pc, #124]	; (800132c <HAL_SDADC_MspInit+0x11c>)
 80012b0:	601a      	str	r2, [r3, #0]
    hdma_sdadc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_SDADC_MspInit+0x118>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
    hdma_sdadc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_SDADC_MspInit+0x118>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
    hdma_sdadc1.Init.MemInc = DMA_MINC_ENABLE;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_SDADC_MspInit+0x118>)
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	60da      	str	r2, [r3, #12]
    hdma_sdadc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_SDADC_MspInit+0x118>)
 80012c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ca:	611a      	str	r2, [r3, #16]
    hdma_sdadc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_SDADC_MspInit+0x118>)
 80012ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d2:	615a      	str	r2, [r3, #20]
    hdma_sdadc1.Init.Mode = DMA_CIRCULAR;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <HAL_SDADC_MspInit+0x118>)
 80012d6:	2220      	movs	r2, #32
 80012d8:	619a      	str	r2, [r3, #24]
    hdma_sdadc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_SDADC_MspInit+0x118>)
 80012dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sdadc1) != HAL_OK)
 80012e2:	4811      	ldr	r0, [pc, #68]	; (8001328 <HAL_SDADC_MspInit+0x118>)
 80012e4:	f000 fc63 	bl	8001bae <HAL_DMA_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_SDADC_MspInit+0xe2>
    {
      Error_Handler();
 80012ee:	f7ff fe17 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(hsdadc,hdma,hdma_sdadc1);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <HAL_SDADC_MspInit+0x118>)
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <HAL_SDADC_MspInit+0x118>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6253      	str	r3, [r2, #36]	; 0x24

    /* SDADC1 interrupt Init */
    HAL_NVIC_SetPriority(SDADC1_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	203d      	movs	r0, #61	; 0x3d
 8001304:	f000 fc1d 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
 8001308:	203d      	movs	r0, #61	; 0x3d
 800130a:	f000 fc36 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDADC1_MspInit 1 */

  /* USER CODE END SDADC1_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40016000 	.word	0x40016000
 800131c:	40021000 	.word	0x40021000
 8001320:	48000400 	.word	0x48000400
 8001324:	48001000 	.word	0x48001000
 8001328:	2000045c 	.word	0x2000045c
 800132c:	40020430 	.word	0x40020430

08001330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001340:	d10b      	bne.n	800135a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_TIM_Base_MspInit+0x38>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_TIM_Base_MspInit+0x38>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_TIM_Base_MspInit+0x38>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800138c:	d11c      	bne.n	80013c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_TIM_MspPostInit+0x64>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <HAL_TIM_MspPostInit+0x64>)
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	6153      	str	r3, [r2, #20]
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_TIM_MspPostInit+0x64>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 80013a6:	2303      	movs	r3, #3
 80013a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c4:	f000 fda6 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001428:	f000 fa6e 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001434:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001438:	f000 ff16 	bl	8002268 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800143c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001440:	f000 ff12 	bl	8002268 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001444:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001448:	f000 ff0e 	bl	8002268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <DMA2_Channel3_IRQHandler+0x10>)
 8001456:	f000 fc50 	bl	8001cfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000045c 	.word	0x2000045c

08001464 <SDADC1_IRQHandler>:

/**
  * @brief This function handles SDADC1 global interrupt.
  */
void SDADC1_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC1_IRQn 0 */

  /* USER CODE END SDADC1_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc1);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <SDADC1_IRQHandler+0x10>)
 800146a:	f002 ff83 	bl	8004374 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC1_IRQn 1 */

  /* USER CODE END SDADC1_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000538 	.word	0x20000538

08001478 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <SystemInit+0x28>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <SystemInit+0x28>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SystemInit+0x28>)
 800148e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001492:	609a      	str	r2, [r3, #8]
#endif
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <toggle_green_LED>:
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
}
void turn_off_green_LED(){
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
}
void toggle_green_LED(){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, HAL_GPIO_ReadPin(GREEN_LED_GPIO_Port, GREEN_LED_Pin)^1);
 80014a8:	2108      	movs	r1, #8
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ae:	f000 feab 	bl	8002208 <HAL_GPIO_ReadPin>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f083 0301 	eor.w	r3, r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	2108      	movs	r1, #8
 80014be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c2:	f000 feb9 	bl	8002238 <HAL_GPIO_WritePin>
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}

080014ca <toggle_red_LED>:
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
}
void turn_off_red_LED(){
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
}
void toggle_red_LED(){
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, HAL_GPIO_ReadPin(RED_LED_GPIO_Port, RED_LED_Pin)^1);
 80014ce:	2120      	movs	r1, #32
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f000 fe98 	bl	8002208 <HAL_GPIO_ReadPin>
 80014d8:	4603      	mov	r3, r0
 80014da:	f083 0301 	eor.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	2120      	movs	r1, #32
 80014e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e8:	f000 fea6 	bl	8002238 <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <blink>:

void blink(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	toggle_red_LED();
 80014f4:	f7ff ffe9 	bl	80014ca <toggle_red_LED>
	toggle_green_LED();
 80014f8:	f7ff ffd4 	bl	80014a4 <toggle_green_LED>
	HAL_Delay(1000);
 80014fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001500:	f000 fa22 	bl	8001948 <HAL_Delay>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <start_pwm>:

void start_pwm(TIM_HandleTypeDef *htim){
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);		//PWM enable
 8001510:	2100      	movs	r1, #0
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f003 f92c 	bl	8004770 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);		//PWM enable
 8001518:	2104      	movs	r1, #4
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f003 f928 	bl	8004770 <HAL_TIM_PWM_Start>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <update_pid>:
void set_duty_cycle(int dc){
	TIM2->CCR1=dc;
	TIM2->CCR2=dc;
}

void update_pid(){
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_GPIO_EXTI_Callback>:

//Interrupt function called on button press
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
	static int x=0,y=0,set_temp=0;
	if (GPIO_Pin == PUSH_BUTTON_Pin) x++;
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	2b10      	cmp	r3, #16
 8001546:	d104      	bne.n	8001552 <HAL_GPIO_EXTI_Callback+0x1a>
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_GPIO_EXTI_Callback+0x84>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <HAL_GPIO_EXTI_Callback+0x84>)
 8001550:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == ENCODER_PUSH_BUTTON_Pin)	y++;
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001558:	d104      	bne.n	8001564 <HAL_GPIO_EXTI_Callback+0x2c>
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_GPIO_EXTI_Callback+0x88>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_GPIO_EXTI_Callback+0x88>)
 8001562:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == ENCODER_A_Pin){
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800156a:	d123      	bne.n	80015b4 <HAL_GPIO_EXTI_Callback+0x7c>
		if(HAL_GPIO_ReadPin(ENCODER_A_GPIO_Port,ENCODER_A_Pin)	==	HAL_GPIO_ReadPin(ENCODER_B_GPIO_Port,ENCODER_B_Pin))	temp_controller.target_temp++;
 800156c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001570:	4814      	ldr	r0, [pc, #80]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001572:	f000 fe49 	bl	8002208 <HAL_GPIO_ReadPin>
 8001576:	4603      	mov	r3, r0
 8001578:	461c      	mov	r4, r3
 800157a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157e:	4811      	ldr	r0, [pc, #68]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001580:	f000 fe42 	bl	8002208 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	429c      	cmp	r4, r3
 8001588:	d10a      	bne.n	80015a0 <HAL_GPIO_EXTI_Callback+0x68>
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_GPIO_EXTI_Callback+0x90>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001594:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_GPIO_EXTI_Callback+0x90>)
 800159a:	edc3 7a00 	vstr	s15, [r3]
		else	temp_controller.target_temp--;
	}
}
 800159e:	e009      	b.n	80015b4 <HAL_GPIO_EXTI_Callback+0x7c>
		else	temp_controller.target_temp--;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_GPIO_EXTI_Callback+0x90>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_GPIO_EXTI_Callback+0x90>)
 80015b0:	edc3 7a00 	vstr	s15, [r3]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}
 80015bc:	20000454 	.word	0x20000454
 80015c0:	20000458 	.word	0x20000458
 80015c4:	48000800 	.word	0x48000800
 80015c8:	20000610 	.word	0x20000610
 80015cc:	00000000 	.word	0x00000000

080015d0 <HAL_SDADC_ConvCpltCallback>:

//Interrupt function called on completed ADC conversion
void HAL_SDADC_ConvCpltCallback(SDADC_HandleTypeDef* hsdadc){
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	ntc.current			=	((Vref/16635.0) *  adc_buf[0])/10000;
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <HAL_SDADC_ConvCpltCallback+0xe8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ff57 	bl	8000490 <__aeabi_f2d>
 80015e2:	a331      	add	r3, pc, #196	; (adr r3, 80016a8 <HAL_SDADC_ConvCpltCallback+0xd8>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7ff f8d4 	bl	8000794 <__aeabi_ddiv>
 80015ec:	4603      	mov	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	4625      	mov	r5, r4
 80015f2:	461c      	mov	r4, r3
 80015f4:	4b31      	ldr	r3, [pc, #196]	; (80016bc <HAL_SDADC_ConvCpltCallback+0xec>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff37 	bl	800046c <__aeabi_i2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4620      	mov	r0, r4
 8001604:	4629      	mov	r1, r5
 8001606:	f7fe ff9b 	bl	8000540 <__aeabi_dmul>
 800160a:	4603      	mov	r3, r0
 800160c:	460c      	mov	r4, r1
 800160e:	4618      	mov	r0, r3
 8001610:	4621      	mov	r1, r4
 8001612:	a327      	add	r3, pc, #156	; (adr r3, 80016b0 <HAL_SDADC_ConvCpltCallback+0xe0>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7ff f8bc 	bl	8000794 <__aeabi_ddiv>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	4618      	mov	r0, r3
 8001622:	4621      	mov	r1, r4
 8001624:	f7ff f99e 	bl	8000964 <__aeabi_d2f>
 8001628:	4602      	mov	r2, r0
 800162a:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_SDADC_ConvCpltCallback+0xf0>)
 800162c:	601a      	str	r2, [r3, #0]
	ntc.voltage			=	(Vref/16635.0) *  adc_buf[1];
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <HAL_SDADC_ConvCpltCallback+0xe8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff2c 	bl	8000490 <__aeabi_f2d>
 8001638:	a31b      	add	r3, pc, #108	; (adr r3, 80016a8 <HAL_SDADC_ConvCpltCallback+0xd8>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7ff f8a9 	bl	8000794 <__aeabi_ddiv>
 8001642:	4603      	mov	r3, r0
 8001644:	460c      	mov	r4, r1
 8001646:	4625      	mov	r5, r4
 8001648:	461c      	mov	r4, r3
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_SDADC_ConvCpltCallback+0xec>)
 800164c:	885b      	ldrh	r3, [r3, #2]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff0c 	bl	800046c <__aeabi_i2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7fe ff70 	bl	8000540 <__aeabi_dmul>
 8001660:	4603      	mov	r3, r0
 8001662:	460c      	mov	r4, r1
 8001664:	4618      	mov	r0, r3
 8001666:	4621      	mov	r1, r4
 8001668:	f7ff f97c 	bl	8000964 <__aeabi_d2f>
 800166c:	4602      	mov	r2, r0
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_SDADC_ConvCpltCallback+0xf0>)
 8001670:	605a      	str	r2, [r3, #4]
	ntc.resistance		=	ntc.voltage/ntc.current;
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_SDADC_ConvCpltCallback+0xf0>)
 8001674:	edd3 6a01 	vldr	s13, [r3, #4]
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_SDADC_ConvCpltCallback+0xf0>)
 800167a:	ed93 7a00 	vldr	s14, [r3]
 800167e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_SDADC_ConvCpltCallback+0xf0>)
 8001684:	edc3 7a02 	vstr	s15, [r3, #8]
	ntc.temperature		=	lookup_temp(ntc.resistance);
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <HAL_SDADC_ConvCpltCallback+0xf0>)
 800168a:	edd3 7a02 	vldr	s15, [r3, #8]
 800168e:	eeb0 0a67 	vmov.f32	s0, s15
 8001692:	f000 f817 	bl	80016c4 <lookup_temp>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_SDADC_ConvCpltCallback+0xf0>)
 800169c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bdb0      	pop	{r4, r5, r7, pc}
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40d03ec0 	.word	0x40d03ec0
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40c38800 	.word	0x40c38800
 80016b8:	20000004 	.word	0x20000004
 80016bc:	2000057c 	.word	0x2000057c
 80016c0:	20000600 	.word	0x20000600

080016c4 <lookup_temp>:

//gives back the temperature based on NTC resistance value, lookup table needed!
float lookup_temp(float R){
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	ed87 0a01 	vstr	s0, [r7, #4]
    int i = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
    float deltaT,deltaR,T;
    while(R<lookup_temp_table[1][i]){
 80016d2:	e04a      	b.n	800176a <lookup_temp+0xa6>
        i++;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
        if((i+1)==sizeof(lookup_temp_table)/sizeof(int)/2) {
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d144      	bne.n	800176a <lookup_temp+0xa6>
                deltaT = lookup_temp_table[0][i]-lookup_temp_table[0][i-1];
 80016e0:	4a50      	ldr	r2, [pc, #320]	; (8001824 <lookup_temp+0x160>)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	494d      	ldr	r1, [pc, #308]	; (8001824 <lookup_temp+0x160>)
 80016ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016fc:	edc7 7a04 	vstr	s15, [r7, #16]
                deltaR = lookup_temp_table[1][i]-lookup_temp_table[1][i-1];
 8001700:	4a48      	ldr	r2, [pc, #288]	; (8001824 <lookup_temp+0x160>)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3304      	adds	r3, #4
 8001706:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3b01      	subs	r3, #1
 800170e:	4945      	ldr	r1, [pc, #276]	; (8001824 <lookup_temp+0x160>)
 8001710:	3304      	adds	r3, #4
 8001712:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001720:	edc7 7a03 	vstr	s15, [r7, #12]
                T=lookup_temp_table[0][i]+(R-lookup_temp_table[1][i])*deltaT/deltaR;
 8001724:	4a3f      	ldr	r2, [pc, #252]	; (8001824 <lookup_temp+0x160>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001734:	4a3b      	ldr	r2, [pc, #236]	; (8001824 <lookup_temp+0x160>)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3304      	adds	r3, #4
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001746:	edd7 6a01 	vldr	s13, [r7, #4]
 800174a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800174e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001752:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001756:	edd7 6a03 	vldr	s13, [r7, #12]
 800175a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800175e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001762:	edc7 7a02 	vstr	s15, [r7, #8]
                return T;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	e053      	b.n	8001812 <lookup_temp+0x14e>
    while(R<lookup_temp_table[1][i]){
 800176a:	4a2e      	ldr	r2, [pc, #184]	; (8001824 <lookup_temp+0x160>)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3304      	adds	r3, #4
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d4a4      	bmi.n	80016d4 <lookup_temp+0x10>
        }
    }
    deltaT = lookup_temp_table[0][i+1]-lookup_temp_table[0][i];
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	4a25      	ldr	r2, [pc, #148]	; (8001824 <lookup_temp+0x160>)
 8001790:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001794:	4923      	ldr	r1, [pc, #140]	; (8001824 <lookup_temp+0x160>)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a6:	edc7 7a04 	vstr	s15, [r7, #16]
    deltaR = lookup_temp_table[1][i+1]-lookup_temp_table[1][i];
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <lookup_temp+0x160>)
 80017b0:	3304      	adds	r3, #4
 80017b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017b6:	491b      	ldr	r1, [pc, #108]	; (8001824 <lookup_temp+0x160>)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3304      	adds	r3, #4
 80017bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ca:	edc7 7a03 	vstr	s15, [r7, #12]
    T=lookup_temp_table[0][i]+(R-lookup_temp_table[1][i])*deltaT/deltaR;
 80017ce:	4a15      	ldr	r2, [pc, #84]	; (8001824 <lookup_temp+0x160>)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <lookup_temp+0x160>)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3304      	adds	r3, #4
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f0:	edd7 6a01 	vldr	s13, [r7, #4]
 80017f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80017fc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001800:	edd7 6a03 	vldr	s13, [r7, #12]
 8001804:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180c:	edc7 7a02 	vstr	s15, [r7, #8]
    return T;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	ee07 3a90 	vmov	s15, r3
}
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20000008 	.word	0x20000008

08001828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001860 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800182c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800182e:	e003      	b.n	8001838 <LoopCopyDataInit>

08001830 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001832:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001834:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001836:	3104      	adds	r1, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001838:	480b      	ldr	r0, [pc, #44]	; (8001868 <LoopForever+0xa>)
	ldr	r3, =_edata
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <LoopForever+0xe>)
	adds	r2, r0, r1
 800183c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800183e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001840:	d3f6      	bcc.n	8001830 <CopyDataInit>
	ldr	r2, =_sbss
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001844:	e002      	b.n	800184c <LoopFillZerobss>

08001846 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001846:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001848:	f842 3b04 	str.w	r3, [r2], #4

0800184c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <LoopForever+0x16>)
	cmp	r2, r3
 800184e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001850:	d3f9      	bcc.n	8001846 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001852:	f7ff fe11 	bl	8001478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001856:	f003 fc73 	bl	8005140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800185a:	f7ff f8d3 	bl	8000a04 <main>

0800185e <LoopForever>:

LoopForever:
    b LoopForever
 800185e:	e7fe      	b.n	800185e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001860:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001864:	080051e8 	.word	0x080051e8
	ldr	r0, =_sdata
 8001868:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800186c:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 8001870:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8001874:	20000618 	.word	0x20000618

08001878 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC1_IRQHandler>
	...

0800187c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_Init+0x28>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_Init+0x28>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 f94d 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	2000      	movs	r0, #0
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff fc20 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40022000 	.word	0x40022000

080018a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f965 	bl	8001b96 <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 f92d 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000000 	.word	0x20000000
 8001900:	2000002c 	.word	0x2000002c
 8001904:	20000028 	.word	0x20000028

08001908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000002c 	.word	0x2000002c
 800192c:	20000614 	.word	0x20000614

08001930 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;  
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000614 	.word	0x20000614

08001948 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_Delay+0x40>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000002c 	.word	0x2000002c

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0b      	blt.n	8001a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	4907      	ldr	r1, [pc, #28]	; (8001a28 <__NVIC_EnableIRQ+0x38>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2001      	movs	r0, #1
 8001a12:	fa00 f202 	lsl.w	r2, r0, r2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff8e 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff29 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff3e 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff8e 	bl	8001a80 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5d 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff31 	bl	80019f0 <__NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffa2 	bl	8001ae8 <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e037      	b.n	8001c34 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bda:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f940 	bl	8001e9c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}  
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_DMA_Start_IT+0x20>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e04a      	b.n	8001cf2 <HAL_DMA_Start_IT+0xb6>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d13a      	bne.n	8001ce4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2202      	movs	r2, #2
 8001c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f8d4 	bl	8001e40 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 020e 	orr.w	r2, r2, #14
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e00f      	b.n	8001cd2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 020a 	orr.w	r2, r2, #10
 8001cc0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0204 	bic.w	r2, r2, #4
 8001cd0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0201 	orr.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e005      	b.n	8001cf0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
 8001cee:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	2204      	movs	r2, #4
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d024      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x72>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01f      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d107      	bne.n	8001d4a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0204 	bic.w	r2, r2, #4
 8001d48:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	2104      	movs	r1, #4
 8001d54:	fa01 f202 	lsl.w	r2, r1, r2
 8001d58:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d06a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d6a:	e065      	b.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2202      	movs	r2, #2
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d02c      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xdc>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d027      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10b      	bne.n	8001dac <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 020a 	bic.w	r2, r2, #10
 8001da2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	2102      	movs	r1, #2
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d035      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001dd4:	e030      	b.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	2208      	movs	r2, #8
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d028      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d023      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 020e 	bic.w	r2, r2, #14
 8001dfe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
    }
  }
}  
 8001e36:	e7ff      	b.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d108      	bne.n	8001e80 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e7e:	e007      	b.n	8001e90 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	60da      	str	r2, [r3, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <DMA_CalcBaseAndBitshift+0x60>)
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d80f      	bhi.n	8001ed0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <DMA_CalcBaseAndBitshift+0x64>)
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <DMA_CalcBaseAndBitshift+0x68>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	009a      	lsls	r2, r3, #2
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <DMA_CalcBaseAndBitshift+0x6c>)
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001ece:	e00e      	b.n	8001eee <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <DMA_CalcBaseAndBitshift+0x70>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <DMA_CalcBaseAndBitshift+0x68>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	009a      	lsls	r2, r3, #2
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <DMA_CalcBaseAndBitshift+0x74>)
 8001eec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40020407 	.word	0x40020407
 8001f00:	bffdfff8 	.word	0xbffdfff8
 8001f04:	cccccccd 	.word	0xcccccccd
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	bffdfbf8 	.word	0xbffdfbf8
 8001f10:	40020400 	.word	0x40020400

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f22:	e154      	b.n	80021ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8146 	beq.w	80021c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d00b      	beq.n	8001f5c <HAL_GPIO_Init+0x48>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d007      	beq.n	8001f5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f50:	2b11      	cmp	r3, #17
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b12      	cmp	r3, #18
 8001f5a:	d130      	bne.n	8001fbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f92:	2201      	movs	r2, #1
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	f003 0201 	and.w	r2, r3, #1
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0xea>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b12      	cmp	r3, #18
 8001ffc:	d123      	bne.n	8002046 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	08da      	lsrs	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3208      	adds	r2, #8
 8002006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	6939      	ldr	r1, [r7, #16]
 8002042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0203 	and.w	r2, r3, #3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80a0 	beq.w	80021c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002088:	4b58      	ldr	r3, [pc, #352]	; (80021ec <HAL_GPIO_Init+0x2d8>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4a57      	ldr	r2, [pc, #348]	; (80021ec <HAL_GPIO_Init+0x2d8>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6193      	str	r3, [r2, #24]
 8002094:	4b55      	ldr	r3, [pc, #340]	; (80021ec <HAL_GPIO_Init+0x2d8>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020a0:	4a53      	ldr	r2, [pc, #332]	; (80021f0 <HAL_GPIO_Init+0x2dc>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ca:	d019      	beq.n	8002100 <HAL_GPIO_Init+0x1ec>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a49      	ldr	r2, [pc, #292]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_GPIO_Init+0x1e8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a48      	ldr	r2, [pc, #288]	; (80021f8 <HAL_GPIO_Init+0x2e4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d00d      	beq.n	80020f8 <HAL_GPIO_Init+0x1e4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a47      	ldr	r2, [pc, #284]	; (80021fc <HAL_GPIO_Init+0x2e8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d007      	beq.n	80020f4 <HAL_GPIO_Init+0x1e0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a46      	ldr	r2, [pc, #280]	; (8002200 <HAL_GPIO_Init+0x2ec>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_GPIO_Init+0x1dc>
 80020ec:	2304      	movs	r3, #4
 80020ee:	e008      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f0:	2305      	movs	r3, #5
 80020f2:	e006      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f4:	2303      	movs	r3, #3
 80020f6:	e004      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 8002100:	2300      	movs	r3, #0
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	f002 0203 	and.w	r2, r2, #3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4093      	lsls	r3, r2
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002112:	4937      	ldr	r1, [pc, #220]	; (80021f0 <HAL_GPIO_Init+0x2dc>)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_GPIO_Init+0x2f0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002144:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <HAL_GPIO_Init+0x2f0>)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800214a:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <HAL_GPIO_Init+0x2f0>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800216e:	4a25      	ldr	r2, [pc, #148]	; (8002204 <HAL_GPIO_Init+0x2f0>)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_GPIO_Init+0x2f0>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002198:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_GPIO_Init+0x2f0>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_GPIO_Init+0x2f0>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021c2:	4a10      	ldr	r2, [pc, #64]	; (8002204 <HAL_GPIO_Init+0x2f0>)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f47f aea3 	bne.w	8001f24 <HAL_GPIO_Init+0x10>
  }
}
 80021de:	bf00      	nop
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010000 	.word	0x40010000
 80021f4:	48000400 	.word	0x48000400
 80021f8:	48000800 	.word	0x48000800
 80021fc:	48000c00 	.word	0x48000c00
 8002200:	48001000 	.word	0x48001000
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e001      	b.n	800222a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002254:	e002      	b.n	800225c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f956 	bl	8001538 <HAL_GPIO_EXTI_Callback>
  }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010400 	.word	0x40010400

08002298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e081      	b.n	80023ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe ff30 	bl	8001124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d107      	bne.n	8002312 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e006      	b.n	8002320 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800231e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d104      	bne.n	8002332 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002330:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002344:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002354:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	ea42 0103 	orr.w	r1, r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	021a      	lsls	r2, r3, #8
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69d9      	ldr	r1, [r3, #28]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1a      	ldr	r2, [r3, #32]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	4608      	mov	r0, r1
 80023c2:	4611      	mov	r1, r2
 80023c4:	461a      	mov	r2, r3
 80023c6:	4603      	mov	r3, r0
 80023c8:	817b      	strh	r3, [r7, #10]
 80023ca:	460b      	mov	r3, r1
 80023cc:	813b      	strh	r3, [r7, #8]
 80023ce:	4613      	mov	r3, r2
 80023d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b20      	cmp	r3, #32
 80023dc:	f040 80f9 	bne.w	80025d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_I2C_Mem_Write+0x34>
 80023e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d105      	bne.n	80023f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0ed      	b.n	80025d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_I2C_Mem_Write+0x4e>
 8002402:	2302      	movs	r3, #2
 8002404:	e0e6      	b.n	80025d4 <HAL_I2C_Mem_Write+0x21c>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800240e:	f7ff fa8f 	bl	8001930 <HAL_GetTick>
 8002412:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2319      	movs	r3, #25
 800241a:	2201      	movs	r2, #1
 800241c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f955 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0d1      	b.n	80025d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2221      	movs	r2, #33	; 0x21
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2240      	movs	r2, #64	; 0x40
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a3a      	ldr	r2, [r7, #32]
 800244a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002450:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002458:	88f8      	ldrh	r0, [r7, #6]
 800245a:	893a      	ldrh	r2, [r7, #8]
 800245c:	8979      	ldrh	r1, [r7, #10]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4603      	mov	r3, r0
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 f8b9 	bl	80025e0 <I2C_RequestMemoryWrite>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0a9      	b.n	80025d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	2bff      	cmp	r3, #255	; 0xff
 8002488:	d90e      	bls.n	80024a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	22ff      	movs	r2, #255	; 0xff
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	b2da      	uxtb	r2, r3
 8002496:	8979      	ldrh	r1, [r7, #10]
 8002498:	2300      	movs	r3, #0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fa37 	bl	8002914 <I2C_TransferConfig>
 80024a6:	e00f      	b.n	80024c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	8979      	ldrh	r1, [r7, #10]
 80024ba:	2300      	movs	r3, #0
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fa26 	bl	8002914 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f93f 	bl	8002750 <I2C_WaitOnTXISFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e07b      	b.n	80025d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d034      	beq.n	8002580 <HAL_I2C_Mem_Write+0x1c8>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251a:	2b00      	cmp	r3, #0
 800251c:	d130      	bne.n	8002580 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	2200      	movs	r2, #0
 8002526:	2180      	movs	r1, #128	; 0x80
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f8d1 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e04d      	b.n	80025d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	2bff      	cmp	r3, #255	; 0xff
 8002540:	d90e      	bls.n	8002560 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	22ff      	movs	r2, #255	; 0xff
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	b2da      	uxtb	r2, r3
 800254e:	8979      	ldrh	r1, [r7, #10]
 8002550:	2300      	movs	r3, #0
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f9db 	bl	8002914 <I2C_TransferConfig>
 800255e:	e00f      	b.n	8002580 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256e:	b2da      	uxtb	r2, r3
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	2300      	movs	r3, #0
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f9ca 	bl	8002914 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d19e      	bne.n	80024c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f91e 	bl	80027d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e01a      	b.n	80025d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2220      	movs	r2, #32
 80025a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_I2C_Mem_Write+0x224>)
 80025b2:	400b      	ands	r3, r1
 80025b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
  }
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	fe00e800 	.word	0xfe00e800

080025e0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	817b      	strh	r3, [r7, #10]
 80025f2:	460b      	mov	r3, r1
 80025f4:	813b      	strh	r3, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	8979      	ldrh	r1, [r7, #10]
 8002600:	4b20      	ldr	r3, [pc, #128]	; (8002684 <I2C_RequestMemoryWrite+0xa4>)
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f983 	bl	8002914 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	69b9      	ldr	r1, [r7, #24]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f89c 	bl	8002750 <I2C_WaitOnTXISFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e02c      	b.n	800267c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d105      	bne.n	8002634 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002628:	893b      	ldrh	r3, [r7, #8]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	629a      	str	r2, [r3, #40]	; 0x28
 8002632:	e015      	b.n	8002660 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002634:	893b      	ldrh	r3, [r7, #8]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	b29b      	uxth	r3, r3
 800263a:	b2da      	uxtb	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	69b9      	ldr	r1, [r7, #24]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f882 	bl	8002750 <I2C_WaitOnTXISFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e012      	b.n	800267c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002656:	893b      	ldrh	r3, [r7, #8]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2200      	movs	r2, #0
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f830 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	80002000 	.word	0x80002000

08002688 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b02      	cmp	r3, #2
 800269c:	d103      	bne.n	80026a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d007      	beq.n	80026c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	619a      	str	r2, [r3, #24]
  }
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e0:	e022      	b.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d01e      	beq.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ea:	f7ff f921 	bl	8001930 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d302      	bcc.n	8002700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d113      	bne.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f043 0220 	orr.w	r2, r3, #32
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e00f      	b.n	8002748 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4013      	ands	r3, r2
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	429a      	cmp	r2, r3
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	429a      	cmp	r2, r3
 8002744:	d0cd      	beq.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800275c:	e02c      	b.n	80027b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f870 	bl	8002848 <I2C_IsAcknowledgeFailed>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e02a      	b.n	80027c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d01e      	beq.n	80027b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7ff f8d9 	bl	8001930 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d113      	bne.n	80027b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e007      	b.n	80027c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d1cb      	bne.n	800275e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027dc:	e028      	b.n	8002830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f830 	bl	8002848 <I2C_IsAcknowledgeFailed>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e026      	b.n	8002840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f2:	f7ff f89d 	bl	8001930 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d302      	bcc.n	8002808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d113      	bne.n	8002830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e007      	b.n	8002840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b20      	cmp	r3, #32
 800283c:	d1cf      	bne.n	80027de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b10      	cmp	r3, #16
 8002860:	d151      	bne.n	8002906 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002862:	e022      	b.n	80028aa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d01e      	beq.n	80028aa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286c:	f7ff f860 	bl	8001930 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	d302      	bcc.n	8002882 <I2C_IsAcknowledgeFailed+0x3a>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e02e      	b.n	8002908 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d1d5      	bne.n	8002864 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2210      	movs	r2, #16
 80028be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2220      	movs	r2, #32
 80028c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7ff fedd 	bl	8002688 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <I2C_IsAcknowledgeFailed+0xc8>)
 80028da:	400b      	ands	r3, r1
 80028dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f043 0204 	orr.w	r2, r3, #4
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	fe00e800 	.word	0xfe00e800

08002914 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	817b      	strh	r3, [r7, #10]
 8002922:	4613      	mov	r3, r2
 8002924:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	0d5b      	lsrs	r3, r3, #21
 8002930:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <I2C_TransferConfig+0x58>)
 8002936:	430b      	orrs	r3, r1
 8002938:	43db      	mvns	r3, r3
 800293a:	ea02 0103 	and.w	r1, r2, r3
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002944:	7a7b      	ldrb	r3, [r7, #9]
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	431a      	orrs	r2, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	431a      	orrs	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	03ff63ff 	.word	0x03ff63ff

08002970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b20      	cmp	r3, #32
 8002984:	d138      	bne.n	80029f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002990:	2302      	movs	r3, #2
 8002992:	e032      	b.n	80029fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d139      	bne.n	8002a90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e033      	b.n	8002a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2224      	movs	r2, #36	; 0x24
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_PWREx_EnableSDADC+0x38>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_PWREx_EnableSDADC+0x38>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	61d3      	str	r3, [r2, #28]
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_PWREx_EnableSDADC+0x38>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_PWREx_EnableSDADC+0x3c>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4905      	ldr	r1, [pc, #20]	; (8002adc <HAL_PWREx_EnableSDADC+0x3c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40007000 	.word	0x40007000

08002ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f000 bef4 	b.w	80038e2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 816a 	beq.w	8002dde <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b0a:	4bb3      	ldr	r3, [pc, #716]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d00c      	beq.n	8002b30 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b16:	4bb0      	ldr	r3, [pc, #704]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d159      	bne.n	8002bd6 <HAL_RCC_OscConfig+0xf6>
 8002b22:	4bad      	ldr	r3, [pc, #692]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2e:	d152      	bne.n	8002bd6 <HAL_RCC_OscConfig+0xf6>
 8002b30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b34:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b44:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d102      	bne.n	8002b62 <HAL_RCC_OscConfig+0x82>
 8002b5c:	4b9e      	ldr	r3, [pc, #632]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	e015      	b.n	8002b8e <HAL_RCC_OscConfig+0xae>
 8002b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b66:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b7e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b8a:	4b93      	ldr	r3, [pc, #588]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b92:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002b96:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b9a:	fa92 f2a2 	rbit	r2, r2
 8002b9e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ba2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ba6:	fab2 f282 	clz	r2, r2
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	f042 0220 	orr.w	r2, r2, #32
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	f002 021f 	and.w	r2, r2, #31
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 810c 	beq.w	8002ddc <HAL_RCC_OscConfig+0x2fc>
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 8106 	bne.w	8002ddc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f000 be86 	b.w	80038e2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be0:	d106      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x110>
 8002be2:	4b7d      	ldr	r3, [pc, #500]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7c      	ldr	r2, [pc, #496]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e030      	b.n	8002c52 <HAL_RCC_OscConfig+0x172>
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x134>
 8002bfa:	4b77      	ldr	r3, [pc, #476]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a76      	ldr	r2, [pc, #472]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b74      	ldr	r3, [pc, #464]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a73      	ldr	r2, [pc, #460]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e01e      	b.n	8002c52 <HAL_RCC_OscConfig+0x172>
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1e:	d10c      	bne.n	8002c3a <HAL_RCC_OscConfig+0x15a>
 8002c20:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a6c      	ldr	r2, [pc, #432]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a69      	ldr	r2, [pc, #420]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e00b      	b.n	8002c52 <HAL_RCC_OscConfig+0x172>
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a66      	ldr	r2, [pc, #408]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b64      	ldr	r3, [pc, #400]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a63      	ldr	r2, [pc, #396]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c52:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	f023 020f 	bic.w	r2, r3, #15
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	495d      	ldr	r1, [pc, #372]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d059      	beq.n	8002d24 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fe fe5e 	bl	8001930 <HAL_GetTick>
 8002c74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7a:	f7fe fe59 	bl	8001930 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d902      	bls.n	8002c90 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	f000 be29 	b.w	80038e2 <HAL_RCC_OscConfig+0xe02>
 8002c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ca4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d102      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x1e2>
 8002cbc:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	e015      	b.n	8002cee <HAL_RCC_OscConfig+0x20e>
 8002cc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002cde:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cf2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002cf6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002cfa:	fa92 f2a2 	rbit	r2, r2
 8002cfe:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d02:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d06:	fab2 f282 	clz	r2, r2
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	f042 0220 	orr.w	r2, r2, #32
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f002 021f 	and.w	r2, r2, #31
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ab      	beq.n	8002c7a <HAL_RCC_OscConfig+0x19a>
 8002d22:	e05c      	b.n	8002dde <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe fe04 	bl	8001930 <HAL_GetTick>
 8002d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fdff 	bl	8001930 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d902      	bls.n	8002d44 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	f000 bdcf 	b.w	80038e2 <HAL_RCC_OscConfig+0xe02>
 8002d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d48:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d58:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCC_OscConfig+0x296>
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	e015      	b.n	8002da2 <HAL_RCC_OscConfig+0x2c2>
 8002d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d92:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_RCC_OscConfig+0x2f8>)
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002da6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002daa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002dae:	fa92 f2a2 	rbit	r2, r2
 8002db2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002db6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002dba:	fab2 f282 	clz	r2, r2
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	f042 0220 	orr.w	r2, r2, #32
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f002 021f 	and.w	r2, r2, #31
 8002dca:	2101      	movs	r1, #1
 8002dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1ab      	bne.n	8002d2e <HAL_RCC_OscConfig+0x24e>
 8002dd6:	e002      	b.n	8002dde <HAL_RCC_OscConfig+0x2fe>
 8002dd8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 816f 	beq.w	80030cc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dee:	4bd0      	ldr	r3, [pc, #832]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002dfa:	4bcd      	ldr	r3, [pc, #820]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d16c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x400>
 8002e06:	4bca      	ldr	r3, [pc, #808]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d166      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x400>
 8002e12:	2302      	movs	r3, #2
 8002e14:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e24:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <HAL_RCC_OscConfig+0x362>
 8002e3c:	4bbc      	ldr	r3, [pc, #752]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	e013      	b.n	8002e6a <HAL_RCC_OscConfig+0x38a>
 8002e42:	2302      	movs	r3, #2
 8002e44:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e54:	2302      	movs	r3, #2
 8002e56:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e66:	4bb2      	ldr	r3, [pc, #712]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e70:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e74:	fa92 f2a2 	rbit	r2, r2
 8002e78:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e7c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e80:	fab2 f282 	clz	r2, r2
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	f042 0220 	orr.w	r2, r2, #32
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	f002 021f 	and.w	r2, r2, #31
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <HAL_RCC_OscConfig+0x3cc>
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d002      	beq.n	8002eac <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f000 bd1b 	b.w	80038e2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4ba0      	ldr	r3, [pc, #640]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	21f8      	movs	r1, #248	; 0xf8
 8002ebc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ec4:	fa91 f1a1 	rbit	r1, r1
 8002ec8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ecc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ed0:	fab1 f181 	clz	r1, r1
 8002ed4:	b2c9      	uxtb	r1, r1
 8002ed6:	408b      	lsls	r3, r1
 8002ed8:	4995      	ldr	r1, [pc, #596]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	e0f5      	b.n	80030cc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8085 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x516>
 8002eec:	2301      	movs	r3, #1
 8002eee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002efe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	461a      	mov	r2, r3
 8002f14:	2301      	movs	r3, #1
 8002f16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fe fd0a 	bl	8001930 <HAL_GetTick>
 8002f1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f22:	f7fe fd05 	bl	8001930 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	f000 bcd5 	b.w	80038e2 <HAL_RCC_OscConfig+0xe02>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <HAL_RCC_OscConfig+0x488>
 8002f62:	4b73      	ldr	r3, [pc, #460]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	e013      	b.n	8002f90 <HAL_RCC_OscConfig+0x4b0>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f80:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f8c:	4b68      	ldr	r3, [pc, #416]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	2202      	movs	r2, #2
 8002f92:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f9a:	fa92 f2a2 	rbit	r2, r2
 8002f9e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002fa2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002fa6:	fab2 f282 	clz	r2, r2
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f042 0220 	orr.w	r2, r2, #32
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f002 021f 	and.w	r2, r2, #31
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0af      	beq.n	8002f22 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b5b      	ldr	r3, [pc, #364]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fca:	1d3b      	adds	r3, r7, #4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	21f8      	movs	r1, #248	; 0xf8
 8002fd2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fda:	fa91 f1a1 	rbit	r1, r1
 8002fde:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002fe2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002fe6:	fab1 f181 	clz	r1, r1
 8002fea:	b2c9      	uxtb	r1, r1
 8002fec:	408b      	lsls	r3, r1
 8002fee:	4950      	ldr	r1, [pc, #320]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	600b      	str	r3, [r1, #0]
 8002ff4:	e06a      	b.n	80030cc <HAL_RCC_OscConfig+0x5ec>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003008:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003016:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	461a      	mov	r2, r3
 800301e:	2300      	movs	r3, #0
 8003020:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe fc85 	bl	8001930 <HAL_GetTick>
 8003026:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	e00a      	b.n	8003042 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302c:	f7fe fc80 	bl	8001930 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d902      	bls.n	8003042 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	f000 bc50 	b.w	80038e2 <HAL_RCC_OscConfig+0xe02>
 8003042:	2302      	movs	r3, #2
 8003044:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d102      	bne.n	8003072 <HAL_RCC_OscConfig+0x592>
 800306c:	4b30      	ldr	r3, [pc, #192]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	e013      	b.n	800309a <HAL_RCC_OscConfig+0x5ba>
 8003072:	2302      	movs	r3, #2
 8003074:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003084:	2302      	movs	r3, #2
 8003086:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800308a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <HAL_RCC_OscConfig+0x650>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2202      	movs	r2, #2
 800309c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80030a0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030a4:	fa92 f2a2 	rbit	r2, r2
 80030a8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80030ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80030b0:	fab2 f282 	clz	r2, r2
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	f042 0220 	orr.w	r2, r2, #32
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	f002 021f 	and.w	r2, r2, #31
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f202 	lsl.w	r2, r1, r2
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1af      	bne.n	800302c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80da 	beq.w	8003290 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d069      	beq.n	80031ba <HAL_RCC_OscConfig+0x6da>
 80030e6:	2301      	movs	r3, #1
 80030e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80030f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_RCC_OscConfig+0x654>)
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	461a      	mov	r2, r3
 800310c:	2301      	movs	r3, #1
 800310e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003110:	f7fe fc0e 	bl	8001930 <HAL_GetTick>
 8003114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003118:	e00e      	b.n	8003138 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311a:	f7fe fc09 	bl	8001930 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d906      	bls.n	8003138 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e3d9      	b.n	80038e2 <HAL_RCC_OscConfig+0xe02>
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	10908120 	.word	0x10908120
 8003138:	2302      	movs	r3, #2
 800313a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800314a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800314e:	2202      	movs	r2, #2
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f2a3 	rbit	r2, r3
 800315c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003166:	2202      	movs	r2, #2
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	fa93 f2a3 	rbit	r2, r3
 8003174:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003178:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	4ba5      	ldr	r3, [pc, #660]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 800317c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003182:	2102      	movs	r1, #2
 8003184:	6019      	str	r1, [r3, #0]
 8003186:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	fa93 f1a3 	rbit	r1, r3
 8003190:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003194:	6019      	str	r1, [r3, #0]
  return result;
 8003196:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2101      	movs	r1, #1
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0b0      	beq.n	800311a <HAL_RCC_OscConfig+0x63a>
 80031b8:	e06a      	b.n	8003290 <HAL_RCC_OscConfig+0x7b0>
 80031ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	fa93 f2a3 	rbit	r2, r3
 80031cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031d0:	601a      	str	r2, [r3, #0]
  return result;
 80031d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	4b8c      	ldr	r3, [pc, #560]	; (8003414 <HAL_RCC_OscConfig+0x934>)
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	461a      	mov	r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7fe fba0 	bl	8001930 <HAL_GetTick>
 80031f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f4:	e009      	b.n	800320a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fe fb9b 	bl	8001930 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e36b      	b.n	80038e2 <HAL_RCC_OscConfig+0xe02>
 800320a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800320e:	2202      	movs	r2, #2
 8003210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003226:	2202      	movs	r2, #2
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	fa93 f2a3 	rbit	r2, r3
 8003234:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	fa93 f2a3 	rbit	r2, r3
 800324c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003250:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003252:	4b6f      	ldr	r3, [pc, #444]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 8003254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003256:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800325a:	2102      	movs	r1, #2
 800325c:	6019      	str	r1, [r3, #0]
 800325e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f1a3 	rbit	r1, r3
 8003268:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800326c:	6019      	str	r1, [r3, #0]
  return result;
 800326e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1b2      	bne.n	80031f6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003290:	1d3b      	adds	r3, r7, #4
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8158 	beq.w	8003550 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a6:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d112      	bne.n	80032d8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	4b57      	ldr	r3, [pc, #348]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	4a56      	ldr	r2, [pc, #344]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 80032b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032bc:	61d3      	str	r3, [r2, #28]
 80032be:	4b54      	ldr	r3, [pc, #336]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f107 0308 	add.w	r3, r7, #8
 80032d0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	4b4f      	ldr	r3, [pc, #316]	; (8003418 <HAL_RCC_OscConfig+0x938>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d11a      	bne.n	800331a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e4:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <HAL_RCC_OscConfig+0x938>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a4b      	ldr	r2, [pc, #300]	; (8003418 <HAL_RCC_OscConfig+0x938>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f0:	f7fe fb1e 	bl	8001930 <HAL_GetTick>
 80032f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	e009      	b.n	800330e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fa:	f7fe fb19 	bl	8001930 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e2e9      	b.n	80038e2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	4b42      	ldr	r3, [pc, #264]	; (8003418 <HAL_RCC_OscConfig+0x938>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0ef      	beq.n	80032fa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331a:	1d3b      	adds	r3, r7, #4
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d106      	bne.n	8003332 <HAL_RCC_OscConfig+0x852>
 8003324:	4b3a      	ldr	r3, [pc, #232]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4a39      	ldr	r2, [pc, #228]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6213      	str	r3, [r2, #32]
 8003330:	e02f      	b.n	8003392 <HAL_RCC_OscConfig+0x8b2>
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10c      	bne.n	8003356 <HAL_RCC_OscConfig+0x876>
 800333c:	4b34      	ldr	r3, [pc, #208]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4a33      	ldr	r2, [pc, #204]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	6213      	str	r3, [r2, #32]
 8003348:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4a30      	ldr	r2, [pc, #192]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 800334e:	f023 0304 	bic.w	r3, r3, #4
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	e01d      	b.n	8003392 <HAL_RCC_OscConfig+0x8b2>
 8003356:	1d3b      	adds	r3, r7, #4
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d10c      	bne.n	800337a <HAL_RCC_OscConfig+0x89a>
 8003360:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4a2a      	ldr	r2, [pc, #168]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	6213      	str	r3, [r2, #32]
 800336c:	4b28      	ldr	r3, [pc, #160]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4a27      	ldr	r2, [pc, #156]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6213      	str	r3, [r2, #32]
 8003378:	e00b      	b.n	8003392 <HAL_RCC_OscConfig+0x8b2>
 800337a:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	4a24      	ldr	r2, [pc, #144]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6213      	str	r3, [r2, #32]
 8003386:	4b22      	ldr	r3, [pc, #136]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4a21      	ldr	r2, [pc, #132]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 800338c:	f023 0304 	bic.w	r3, r3, #4
 8003390:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d06b      	beq.n	8003474 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339c:	f7fe fac8 	bl	8001930 <HAL_GetTick>
 80033a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a4:	e00b      	b.n	80033be <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fe fac3 	bl	8001930 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e291      	b.n	80038e2 <HAL_RCC_OscConfig+0xe02>
 80033be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80033c2:	2202      	movs	r2, #2
 80033c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	fa93 f2a3 	rbit	r2, r3
 80033d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80033da:	2202      	movs	r2, #2
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	fa93 f2a3 	rbit	r2, r3
 80033e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033ec:	601a      	str	r2, [r3, #0]
  return result;
 80033ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f043 0302 	orr.w	r3, r3, #2
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d109      	bne.n	800341c <HAL_RCC_OscConfig+0x93c>
 8003408:	4b01      	ldr	r3, [pc, #4]	; (8003410 <HAL_RCC_OscConfig+0x930>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	e014      	b.n	8003438 <HAL_RCC_OscConfig+0x958>
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000
 8003414:	10908120 	.word	0x10908120
 8003418:	40007000 	.word	0x40007000
 800341c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003420:	2202      	movs	r2, #2
 8003422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	fa93 f2a3 	rbit	r2, r3
 800342e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	4bbb      	ldr	r3, [pc, #748]	; (8003724 <HAL_RCC_OscConfig+0xc44>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800343c:	2102      	movs	r1, #2
 800343e:	6011      	str	r1, [r2, #0]
 8003440:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	fa92 f1a2 	rbit	r1, r2
 800344a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800344e:	6011      	str	r1, [r2, #0]
  return result;
 8003450:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	fab2 f282 	clz	r2, r2
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f002 021f 	and.w	r2, r2, #31
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f202 	lsl.w	r2, r1, r2
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d099      	beq.n	80033a6 <HAL_RCC_OscConfig+0x8c6>
 8003472:	e063      	b.n	800353c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7fe fa5c 	bl	8001930 <HAL_GetTick>
 8003478:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347c:	e00b      	b.n	8003496 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fe fa57 	bl	8001930 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e225      	b.n	80038e2 <HAL_RCC_OscConfig+0xe02>
 8003496:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800349a:	2202      	movs	r2, #2
 800349c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	fa93 f2a3 	rbit	r2, r3
 80034a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034b2:	2202      	movs	r2, #2
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034c4:	601a      	str	r2, [r3, #0]
  return result;
 80034c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d102      	bne.n	80034e6 <HAL_RCC_OscConfig+0xa06>
 80034e0:	4b90      	ldr	r3, [pc, #576]	; (8003724 <HAL_RCC_OscConfig+0xc44>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	e00d      	b.n	8003502 <HAL_RCC_OscConfig+0xa22>
 80034e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80034ea:	2202      	movs	r2, #2
 80034ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	fa93 f2a3 	rbit	r2, r3
 80034f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	4b89      	ldr	r3, [pc, #548]	; (8003724 <HAL_RCC_OscConfig+0xc44>)
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003506:	2102      	movs	r1, #2
 8003508:	6011      	str	r1, [r2, #0]
 800350a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	fa92 f1a2 	rbit	r1, r2
 8003514:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003518:	6011      	str	r1, [r2, #0]
  return result;
 800351a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	fab2 f282 	clz	r2, r2
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	f002 021f 	and.w	r2, r2, #31
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f202 	lsl.w	r2, r1, r2
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1a0      	bne.n	800347e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800353c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b77      	ldr	r3, [pc, #476]	; (8003724 <HAL_RCC_OscConfig+0xc44>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	4a76      	ldr	r2, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0xc44>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 81c2 	beq.w	80038e0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800355c:	4b71      	ldr	r3, [pc, #452]	; (8003724 <HAL_RCC_OscConfig+0xc44>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b08      	cmp	r3, #8
 8003566:	f000 819c 	beq.w	80038a2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	2b02      	cmp	r3, #2
 8003572:	f040 8114 	bne.w	800379e <HAL_RCC_OscConfig+0xcbe>
 8003576:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800357a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800357e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800358e:	601a      	str	r2, [r3, #0]
  return result;
 8003590:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003594:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	461a      	mov	r2, r3
 80035a8:	2300      	movs	r3, #0
 80035aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fe f9c0 	bl	8001930 <HAL_GetTick>
 80035b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b4:	e009      	b.n	80035ca <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fe f9bb 	bl	8001930 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e18b      	b.n	80038e2 <HAL_RCC_OscConfig+0xe02>
 80035ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	fa93 f2a3 	rbit	r2, r3
 80035de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035e2:	601a      	str	r2, [r3, #0]
  return result;
 80035e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d102      	bne.n	8003604 <HAL_RCC_OscConfig+0xb24>
 80035fe:	4b49      	ldr	r3, [pc, #292]	; (8003724 <HAL_RCC_OscConfig+0xc44>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	e01b      	b.n	800363c <HAL_RCC_OscConfig+0xb5c>
 8003604:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003608:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800360c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	fa93 f2a3 	rbit	r2, r3
 8003618:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	fa93 f2a3 	rbit	r2, r3
 8003632:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <HAL_RCC_OscConfig+0xc44>)
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003640:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003644:	6011      	str	r1, [r2, #0]
 8003646:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	fa92 f1a2 	rbit	r1, r2
 8003650:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003654:	6011      	str	r1, [r2, #0]
  return result;
 8003656:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	fab2 f282 	clz	r2, r2
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f042 0220 	orr.w	r2, r2, #32
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	f002 021f 	and.w	r2, r2, #31
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f202 	lsl.w	r2, r1, r2
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d19e      	bne.n	80035b6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003678:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <HAL_RCC_OscConfig+0xc44>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003680:	1d3b      	adds	r3, r7, #4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	430b      	orrs	r3, r1
 800368e:	4925      	ldr	r1, [pc, #148]	; (8003724 <HAL_RCC_OscConfig+0xc44>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
 8003694:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003698:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800369c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	fa93 f2a3 	rbit	r2, r3
 80036a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036ac:	601a      	str	r2, [r3, #0]
  return result;
 80036ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036b2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	461a      	mov	r2, r3
 80036c6:	2301      	movs	r3, #1
 80036c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe f931 	bl	8001930 <HAL_GetTick>
 80036ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d2:	e009      	b.n	80036e8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fe f92c 	bl	8001930 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0fc      	b.n	80038e2 <HAL_RCC_OscConfig+0xe02>
 80036e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	fa93 f2a3 	rbit	r2, r3
 80036fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003700:	601a      	str	r2, [r3, #0]
  return result;
 8003702:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003706:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <HAL_RCC_OscConfig+0xc48>
 800371c:	4b01      	ldr	r3, [pc, #4]	; (8003724 <HAL_RCC_OscConfig+0xc44>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	e01e      	b.n	8003760 <HAL_RCC_OscConfig+0xc80>
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000
 8003728:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800372c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	fa93 f2a3 	rbit	r2, r3
 800373c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	fa93 f2a3 	rbit	r2, r3
 8003756:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	4b63      	ldr	r3, [pc, #396]	; (80038ec <HAL_RCC_OscConfig+0xe0c>)
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003764:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003768:	6011      	str	r1, [r2, #0]
 800376a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	fa92 f1a2 	rbit	r1, r2
 8003774:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003778:	6011      	str	r1, [r2, #0]
  return result;
 800377a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	fab2 f282 	clz	r2, r2
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	f042 0220 	orr.w	r2, r2, #32
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	f002 021f 	and.w	r2, r2, #31
 8003790:	2101      	movs	r1, #1
 8003792:	fa01 f202 	lsl.w	r2, r1, r2
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d09b      	beq.n	80036d4 <HAL_RCC_OscConfig+0xbf4>
 800379c:	e0a0      	b.n	80038e0 <HAL_RCC_OscConfig+0xe00>
 800379e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	fa93 f2a3 	rbit	r2, r3
 80037b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037b6:	601a      	str	r2, [r3, #0]
  return result;
 80037b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	461a      	mov	r2, r3
 80037d0:	2300      	movs	r3, #0
 80037d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fe f8ac 	bl	8001930 <HAL_GetTick>
 80037d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037dc:	e009      	b.n	80037f2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037de:	f7fe f8a7 	bl	8001930 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e077      	b.n	80038e2 <HAL_RCC_OscConfig+0xe02>
 80037f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	fa93 f2a3 	rbit	r2, r3
 8003806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800380a:	601a      	str	r2, [r3, #0]
  return result;
 800380c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003810:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d102      	bne.n	800382c <HAL_RCC_OscConfig+0xd4c>
 8003826:	4b31      	ldr	r3, [pc, #196]	; (80038ec <HAL_RCC_OscConfig+0xe0c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	e01b      	b.n	8003864 <HAL_RCC_OscConfig+0xd84>
 800382c:	f107 0320 	add.w	r3, r7, #32
 8003830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f107 0320 	add.w	r3, r7, #32
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	fa93 f2a3 	rbit	r2, r3
 8003840:	f107 031c 	add.w	r3, r7, #28
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f107 0318 	add.w	r3, r7, #24
 800384a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f107 0318 	add.w	r3, r7, #24
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	fa93 f2a3 	rbit	r2, r3
 800385a:	f107 0314 	add.w	r3, r7, #20
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	4b22      	ldr	r3, [pc, #136]	; (80038ec <HAL_RCC_OscConfig+0xe0c>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	f107 0210 	add.w	r2, r7, #16
 8003868:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800386c:	6011      	str	r1, [r2, #0]
 800386e:	f107 0210 	add.w	r2, r7, #16
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	fa92 f1a2 	rbit	r1, r2
 8003878:	f107 020c 	add.w	r2, r7, #12
 800387c:	6011      	str	r1, [r2, #0]
  return result;
 800387e:	f107 020c 	add.w	r2, r7, #12
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f042 0220 	orr.w	r2, r2, #32
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f002 021f 	and.w	r2, r2, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f202 	lsl.w	r2, r1, r2
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d19e      	bne.n	80037de <HAL_RCC_OscConfig+0xcfe>
 80038a0:	e01e      	b.n	80038e0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e018      	b.n	80038e2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_RCC_OscConfig+0xe0c>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d108      	bne.n	80038dc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40021000 	.word	0x40021000

080038f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b09e      	sub	sp, #120	; 0x78
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e162      	b.n	8003bce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b90      	ldr	r3, [pc, #576]	; (8003b4c <HAL_RCC_ClockConfig+0x25c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d910      	bls.n	8003938 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b8d      	ldr	r3, [pc, #564]	; (8003b4c <HAL_RCC_ClockConfig+0x25c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 0207 	bic.w	r2, r3, #7
 800391e:	498b      	ldr	r1, [pc, #556]	; (8003b4c <HAL_RCC_ClockConfig+0x25c>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b89      	ldr	r3, [pc, #548]	; (8003b4c <HAL_RCC_ClockConfig+0x25c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e14a      	b.n	8003bce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003944:	4b82      	ldr	r3, [pc, #520]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	497f      	ldr	r1, [pc, #508]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003952:	4313      	orrs	r3, r2
 8003954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80dc 	beq.w	8003b1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d13c      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xf6>
 800396c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003970:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800397a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397c:	fab3 f383 	clz	r3, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d102      	bne.n	8003996 <HAL_RCC_ClockConfig+0xa6>
 8003990:	4b6f      	ldr	r3, [pc, #444]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	e00f      	b.n	80039b6 <HAL_RCC_ClockConfig+0xc6>
 8003996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800399a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	667b      	str	r3, [r7, #100]	; 0x64
 80039a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039a8:	663b      	str	r3, [r7, #96]	; 0x60
 80039aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039ac:	fa93 f3a3 	rbit	r3, r3
 80039b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b2:	4b67      	ldr	r3, [pc, #412]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80039bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039be:	fa92 f2a2 	rbit	r2, r2
 80039c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80039c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039c6:	fab2 f282 	clz	r2, r2
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f042 0220 	orr.w	r2, r2, #32
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	f002 021f 	and.w	r2, r2, #31
 80039d6:	2101      	movs	r1, #1
 80039d8:	fa01 f202 	lsl.w	r2, r1, r2
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d17b      	bne.n	8003ada <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0f3      	b.n	8003bce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d13c      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x178>
 80039ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d102      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x128>
 8003a12:	4b4f      	ldr	r3, [pc, #316]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	e00f      	b.n	8003a38 <HAL_RCC_ClockConfig+0x148>
 8003a18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	647b      	str	r3, [r7, #68]	; 0x44
 8003a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2e:	fa93 f3a3 	rbit	r3, r3
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a34:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a3c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a40:	fa92 f2a2 	rbit	r2, r2
 8003a44:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a48:	fab2 f282 	clz	r2, r2
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	f042 0220 	orr.w	r2, r2, #32
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	f002 021f 	and.w	r2, r2, #31
 8003a58:	2101      	movs	r1, #1
 8003a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d13a      	bne.n	8003ada <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0b2      	b.n	8003bce <HAL_RCC_ClockConfig+0x2de>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d102      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x1a0>
 8003a8a:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	e00d      	b.n	8003aac <HAL_RCC_ClockConfig+0x1bc>
 8003a90:	2302      	movs	r3, #2
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	2202      	movs	r2, #2
 8003aae:	61ba      	str	r2, [r7, #24]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	fa92 f2a2 	rbit	r2, r2
 8003ab6:	617a      	str	r2, [r7, #20]
  return result;
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	fab2 f282 	clz	r2, r2
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	f042 0220 	orr.w	r2, r2, #32
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	f002 021f 	and.w	r2, r2, #31
 8003aca:	2101      	movs	r1, #1
 8003acc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e079      	b.n	8003bce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f023 0203 	bic.w	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	491a      	ldr	r1, [pc, #104]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aec:	f7fd ff20 	bl	8001930 <HAL_GetTick>
 8003af0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7fd ff1c 	bl	8001930 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e061      	b.n	8003bce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 020c 	and.w	r2, r3, #12
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d1eb      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_ClockConfig+0x25c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d214      	bcs.n	8003b54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <HAL_RCC_ClockConfig+0x25c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 0207 	bic.w	r2, r3, #7
 8003b32:	4906      	ldr	r1, [pc, #24]	; (8003b4c <HAL_RCC_ClockConfig+0x25c>)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <HAL_RCC_ClockConfig+0x25c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e040      	b.n	8003bce <HAL_RCC_ClockConfig+0x2de>
 8003b4c:	40022000 	.word	0x40022000
 8003b50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b60:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	491a      	ldr	r1, [pc, #104]	; (8003bd8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7e:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4912      	ldr	r1, [pc, #72]	; (8003bd8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b92:	f000 f829 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003b96:	4601      	mov	r1, r0
 8003b98:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba0:	22f0      	movs	r2, #240	; 0xf0
 8003ba2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	fa92 f2a2 	rbit	r2, r2
 8003baa:	60fa      	str	r2, [r7, #12]
  return result;
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	fab2 f282 	clz	r2, r2
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	40d3      	lsrs	r3, r2
 8003bb6:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <HAL_RCC_ClockConfig+0x2ec>)
 8003bb8:	5cd3      	ldrb	r3, [r2, r3]
 8003bba:	fa21 f303 	lsr.w	r3, r1, r3
 8003bbe:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <HAL_RCC_ClockConfig+0x2f0>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_RCC_ClockConfig+0x2f4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd fe6e 	bl	80018a8 <HAL_InitTick>
  
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3778      	adds	r7, #120	; 0x78
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	080051b0 	.word	0x080051b0
 8003be0:	20000000 	.word	0x20000000
 8003be4:	20000028 	.word	0x20000028

08003be8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b08b      	sub	sp, #44	; 0x2c
 8003bec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c02:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d002      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x30>
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d003      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0x36>
 8003c16:	e03c      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c18:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c1a:	623b      	str	r3, [r7, #32]
      break;
 8003c1c:	e03c      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c28:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	fa92 f2a2 	rbit	r2, r2
 8003c30:	607a      	str	r2, [r7, #4]
  return result;
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	fab2 f282 	clz	r2, r2
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	40d3      	lsrs	r3, r2
 8003c3c:	4a1c      	ldr	r2, [pc, #112]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c3e:	5cd3      	ldrb	r3, [r2, r3]
 8003c40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c42:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	220f      	movs	r2, #15
 8003c4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	fa92 f2a2 	rbit	r2, r2
 8003c54:	60fa      	str	r2, [r7, #12]
  return result;
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	fab2 f282 	clz	r2, r2
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	40d3      	lsrs	r3, r2
 8003c60:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c62:	5cd3      	ldrb	r3, [r2, r3]
 8003c64:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c70:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	e004      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	623b      	str	r3, [r7, #32]
      break;
 8003c90:	e002      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c94:	623b      	str	r3, [r7, #32]
      break;
 8003c96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c98:	6a3b      	ldr	r3, [r7, #32]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	372c      	adds	r7, #44	; 0x2c
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	007a1200 	.word	0x007a1200
 8003cb0:	080051c0 	.word	0x080051c0
 8003cb4:	080051d0 	.word	0x080051d0
 8003cb8:	003d0900 	.word	0x003d0900

08003cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b092      	sub	sp, #72	; 0x48
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80d7 	beq.w	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce0:	4b4e      	ldr	r3, [pc, #312]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10e      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cec:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	4a4a      	ldr	r2, [pc, #296]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	61d3      	str	r3, [r2, #28]
 8003cf8:	4b48      	ldr	r3, [pc, #288]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b45      	ldr	r3, [pc, #276]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d118      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d16:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a41      	ldr	r2, [pc, #260]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d22:	f7fd fe05 	bl	8001930 <HAL_GetTick>
 8003d26:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	e008      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2a:	f7fd fe01 	bl	8001930 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	; 0x64
 8003d36:	d901      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e12d      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d48:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d50:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8084 	beq.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d07c      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d68:	4b2c      	ldr	r3, [pc, #176]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d82:	fab3 f383 	clz	r3, r3
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	461a      	mov	r2, r3
 8003d92:	2301      	movs	r3, #1
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	461a      	mov	r2, r3
 8003db6:	2300      	movs	r3, #0
 8003db8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dbe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d04b      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fd fdb1 	bl	8001930 <HAL_GetTick>
 8003dce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7fd fdad 	bl	8001930 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0d7      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003de8:	2302      	movs	r3, #2
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
 8003df4:	2302      	movs	r3, #2
 8003df6:	623b      	str	r3, [r7, #32]
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	fa93 f3a3 	rbit	r3, r3
 8003dfe:	61fb      	str	r3, [r7, #28]
  return result;
 8003e00:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f043 0302 	orr.w	r3, r3, #2
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d108      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e16:	4b01      	ldr	r3, [pc, #4]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	e00d      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40007000 	.word	0x40007000
 8003e24:	10908100 	.word	0x10908100
 8003e28:	2302      	movs	r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	4b5a      	ldr	r3, [pc, #360]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	2202      	movs	r2, #2
 8003e3a:	613a      	str	r2, [r7, #16]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	fa92 f2a2 	rbit	r2, r2
 8003e42:	60fa      	str	r2, [r7, #12]
  return result;
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	fab2 f282 	clz	r2, r2
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	f002 021f 	and.w	r2, r2, #31
 8003e56:	2101      	movs	r1, #1
 8003e58:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0b7      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e62:	4b4f      	ldr	r3, [pc, #316]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	494c      	ldr	r1, [pc, #304]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d105      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7c:	4b48      	ldr	r3, [pc, #288]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	4a47      	ldr	r2, [pc, #284]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e94:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	f023 0203 	bic.w	r2, r3, #3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	493f      	ldr	r1, [pc, #252]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eb2:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	4938      	ldr	r1, [pc, #224]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ed0:	4b33      	ldr	r3, [pc, #204]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	4930      	ldr	r1, [pc, #192]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eee:	4b2c      	ldr	r3, [pc, #176]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f023 0210 	bic.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4929      	ldr	r1, [pc, #164]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f0c:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	4921      	ldr	r1, [pc, #132]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d008      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f023 0220 	bic.w	r2, r3, #32
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	491a      	ldr	r1, [pc, #104]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	4912      	ldr	r1, [pc, #72]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8003f66:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	490b      	ldr	r1, [pc, #44]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	4903      	ldr	r1, [pc, #12]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3748      	adds	r7, #72	; 0x48
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000

08003fa4 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e073      	b.n	800409e <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fd f90b 	bl	8001210 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004008:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6819      	ldr	r1, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004030:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8004044:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <HAL_SDADC_Init+0x104>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	429a      	cmp	r2, r3
 8004052:	d00f      	beq.n	8004074 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8004054:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <HAL_SDADC_Init+0x104>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <HAL_SDADC_Init+0x104>)
 800405a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405e:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_SDADC_Init+0x104>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	490f      	ldr	r1, [pc, #60]	; (80040a8 <HAL_SDADC_Init+0x104>)
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 800406e:	2002      	movs	r0, #2
 8004070:	f7fd fc6a 	bl	8001948 <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8004084:	bf00      	nop
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f8      	bne.n	8004086 <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40016000 	.word	0x40016000

080040ac <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d002      	beq.n	80040cc <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	75fb      	strb	r3, [r7, #23]
 80040ca:	e025      	b.n	8004118 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fa7b 	bl	80045c8 <SDADC_EnterInitMode>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	22ff      	movs	r2, #255	; 0xff
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	75fb      	strb	r3, [r7, #23]
 80040e4:	e018      	b.n	8004118 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80040f0:	4413      	add	r3, r2
 80040f2:	3320      	adds	r3, #32
 80040f4:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80040fe:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8004104:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 800410c:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 800410e:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8004110:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fa7b 	bl	800460e <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8004118:	7dfb      	ldrb	r3, [r7, #23]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_SDADC_SelectRegularTrigger>:
  *            @arg SDADC_SOFTWARE_TRIGGER : Software trigger.
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectRegularTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <HAL_SDADC_SelectRegularTrigger+0x5c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d105      	bne.n	8004148 <HAL_SDADC_SelectRegularTrigger+0x24>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d102      	bne.n	8004148 <HAL_SDADC_SelectRegularTrigger+0x24>
  {
    status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
 8004146:	e014      	b.n	8004172 <HAL_SDADC_SelectRegularTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414e:	2b01      	cmp	r3, #1
 8004150:	d009      	beq.n	8004166 <HAL_SDADC_SelectRegularTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8004158:	2b02      	cmp	r3, #2
 800415a:	d004      	beq.n	8004166 <HAL_SDADC_SelectRegularTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_INJ))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8004162:	2b04      	cmp	r3, #4
 8004164:	d103      	bne.n	800416e <HAL_SDADC_SelectRegularTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->RegularTrigger = Trigger;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
 800416c:	e001      	b.n	8004172 <HAL_SDADC_SelectRegularTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;    
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004172:	7bfb      	ldrb	r3, [r7, #15]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40016000 	.word	0x40016000

08004184 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d12c      	bne.n	80041f6 <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fa13 	bl	80045c8 <SDADC_EnterInitMode>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d006      	beq.n	80041b6 <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	22ff      	movs	r2, #255	; 0xff
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	73fb      	strb	r3, [r7, #15]
 80041b4:	e021      	b.n	80041fa <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0206 	bic.w	r2, r2, #6
 80041c4:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fa19 	bl	800460e <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0210 	orr.w	r2, r2, #16
 80041ea:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041f4:	e001      	b.n	80041fa <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004214:	2b02      	cmp	r3, #2
 8004216:	d001      	beq.n	800421c <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e028      	b.n	800426e <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 800421c:	f7fd fb88 	bl	8001930 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8004222:	e010      	b.n	8004246 <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d00c      	beq.n	8004246 <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 800422c:	f7fd fb80 	bl	8001930 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d302      	bcc.n	8004242 <HAL_SDADC_PollForCalibEvent+0x3e>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e013      	b.n	800426e <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b01      	cmp	r3, #1
 8004252:	d1e7      	bne.n	8004224 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 800426c:	2300      	movs	r3, #0
  }
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <HAL_SDADC_Start_DMA>:
  * @param  Length The length of data to be transferred from SDADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start_DMA(SDADC_HandleTypeDef *hsdadc, uint32_t *pData,
                                      uint32_t Length)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(pData != ((void*) 0));
  assert_param(Length != 0UL);

  /* Check that DMA is not enabled for injected conversion */
  if((hsdadc->Instance->CR1 & SDADC_CR1_JDMAEN) == SDADC_CR1_JDMAEN)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004292:	d102      	bne.n	800429a <HAL_SDADC_Start_DMA+0x22>
  {
    status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	75fb      	strb	r3, [r7, #23]
 8004298:	e061      	b.n	800435e <HAL_SDADC_Start_DMA+0xe6>
  }
  /* Check parameters compatibility */
  else if((hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10e      	bne.n	80042c0 <HAL_SDADC_Start_DMA+0x48>
          (hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	699b      	ldr	r3, [r3, #24]
  else if((hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <HAL_SDADC_Start_DMA+0x48>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	699b      	ldr	r3, [r3, #24]
          (hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d105      	bne.n	80042c0 <HAL_SDADC_Start_DMA+0x48>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d002      	beq.n	80042c0 <HAL_SDADC_Start_DMA+0x48>
          (Length != 1U))
  {
    status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
 80042be:	e04e      	b.n	800435e <HAL_SDADC_Start_DMA+0xe6>
  }
  else if((hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <HAL_SDADC_Start_DMA+0x68>
          (hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	699b      	ldr	r3, [r3, #24]
  else if((hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d107      	bne.n	80042e0 <HAL_SDADC_Start_DMA+0x68>
          (hsdadc->hdma->Init.Mode == DMA_CIRCULAR))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	699b      	ldr	r3, [r3, #24]
          (hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d102      	bne.n	80042e0 <HAL_SDADC_Start_DMA+0x68>
  {
    status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
 80042de:	e03e      	b.n	800435e <HAL_SDADC_Start_DMA+0xe6>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d004      	beq.n	80042f4 <HAL_SDADC_Start_DMA+0x7c>
          (hsdadc->State == HAL_SDADC_STATE_INJ))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d132      	bne.n	800435a <HAL_SDADC_Start_DMA+0xe2>
  {
    /* Set callbacks on DMA handler */
    hsdadc->hdma->XferCpltCallback = SDADC_DMARegularConvCplt;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <HAL_SDADC_Start_DMA+0xf0>)
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
    hsdadc->hdma->XferErrorCallback = SDADC_DMAError;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	4a1a      	ldr	r2, [pc, #104]	; (800436c <HAL_SDADC_Start_DMA+0xf4>)
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
    if(hsdadc->hdma->Init.Mode == DMA_CIRCULAR)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b20      	cmp	r3, #32
 800430c:	d103      	bne.n	8004316 <HAL_SDADC_Start_DMA+0x9e>
    {
      hsdadc->hdma->XferHalfCpltCallback = SDADC_DMARegularHalfConvCplt;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4a17      	ldr	r2, [pc, #92]	; (8004370 <HAL_SDADC_Start_DMA+0xf8>)
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Set RDMAEN bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 |= SDADC_CR1_RDMAEN;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004324:	601a      	str	r2, [r3, #0]

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->RDATAR, \
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6958      	ldr	r0, [r3, #20]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3364      	adds	r3, #100	; 0x64
 8004330:	4619      	mov	r1, r3
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f7fd fc81 	bl	8001c3c <HAL_DMA_Start_IT>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <HAL_SDADC_Start_DMA+0xd6>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	22ff      	movs	r2, #255	; 0xff
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->RDATAR, \
 800434c:	e007      	b.n	800435e <HAL_SDADC_Start_DMA+0xe6>
    }
    else
    {
      /* Start regular conversion */
      status = SDADC_RegConvStart(hsdadc);
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f96f 	bl	8004632 <SDADC_RegConvStart>
 8004354:	4603      	mov	r3, r0
 8004356:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->RDATAR, \
 8004358:	e001      	b.n	800435e <HAL_SDADC_Start_DMA+0xe6>
    }
  }
  else
  {
    status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800435e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	0800458b 	.word	0x0800458b
 800436c:	080045a7 	.word	0x080045a7
 8004370:	0800456f 	.word	0x0800456f

08004374 <HAL_SDADC_IRQHandler>:
  * @brief  This function handles the SDADC interrupts.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
void HAL_SDADC_IRQHandler(SDADC_HandleTypeDef* hsdadc)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hsdadc->Instance->ISR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60fb      	str	r3, [r7, #12]
    
  /* Check if end of regular conversion */
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b08      	cmp	r3, #8
 8004390:	d125      	bne.n	80043de <HAL_SDADC_IRQHandler+0x6a>
     ((tmp_isr & SDADC_ISR_REOCF) == SDADC_ISR_REOCF))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0308 	and.w	r3, r3, #8
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8004398:	2b00      	cmp	r3, #0
 800439a:	d020      	beq.n	80043de <HAL_SDADC_IRQHandler+0x6a>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ConvCpltCallback(hsdadc);
#else
    HAL_SDADC_ConvCpltCallback(hsdadc);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7fd f917 	bl	80015d0 <HAL_SDADC_ConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* End of conversion if mode is not continuous and software trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 80b1 	bne.w	800450e <HAL_SDADC_IRQHandler+0x19a>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f040 80ac 	bne.w	800450e <HAL_SDADC_IRQHandler+0x19a>
    {
      /* Clear REOCIE and ROVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0218 	bic.w	r2, r2, #24
 80043c4:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d101      	bne.n	80043d4 <HAL_SDADC_IRQHandler+0x60>
 80043d0:	2201      	movs	r2, #1
 80043d2:	e000      	b.n	80043d6 <HAL_SDADC_IRQHandler+0x62>
 80043d4:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80043dc:	e097      	b.n	800450e <HAL_SDADC_IRQHandler+0x19a>
    }
  }
  /* Check if end of injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d136      	bne.n	800445a <HAL_SDADC_IRQHandler+0xe6>
          ((tmp_isr & SDADC_ISR_JEOCF) == SDADC_ISR_JEOCF))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0302 	and.w	r3, r3, #2
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d031      	beq.n	800445a <HAL_SDADC_IRQHandler+0xe6>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->InjectedConvCpltCallback(hsdadc);
#else
    HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8a5 	bl	8004546 <HAL_SDADC_InjectedConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1e5a      	subs	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24
    if(hsdadc->InjConvRemaining ==0UL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <HAL_SDADC_IRQHandler+0xa2>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1a      	ldr	r2, [r3, #32]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* End of conversion if mode is not continuous, software trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d179      	bne.n	8004512 <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004422:	2b00      	cmp	r3, #0
 8004424:	d175      	bne.n	8004512 <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800442e:	429a      	cmp	r2, r3
 8004430:	d16f      	bne.n	8004512 <HAL_SDADC_IRQHandler+0x19e>
    {
      /* Clear JEOCIE and JOVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0206 	bic.w	r2, r2, #6
 8004440:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 8004448:	2b04      	cmp	r3, #4
 800444a:	d101      	bne.n	8004450 <HAL_SDADC_IRQHandler+0xdc>
 800444c:	2201      	movs	r2, #1
 800444e:	e000      	b.n	8004452 <HAL_SDADC_IRQHandler+0xde>
 8004450:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004458:	e05b      	b.n	8004512 <HAL_SDADC_IRQHandler+0x19e>
    }
  }
  /* Check if end of calibration */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d11c      	bne.n	80044a2 <HAL_SDADC_IRQHandler+0x12e>
          ((tmp_isr & SDADC_ISR_EOCALF) == SDADC_ISR_EOCALF))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0301 	and.w	r3, r3, #1
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 800446e:	2b00      	cmp	r3, #0
 8004470:	d017      	beq.n	80044a2 <HAL_SDADC_IRQHandler+0x12e>
  {
    /* Clear EOCALIE bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_EOCALIE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]

    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	60da      	str	r2, [r3, #12]

    /* Call calibration callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->CalibrationCpltCallback(hsdadc);
#else
    HAL_SDADC_CalibrationCpltCallback(hsdadc);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f843 	bl	800451e <HAL_SDADC_CalibrationCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update SDADC state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044a0:	e038      	b.n	8004514 <HAL_SDADC_IRQHandler+0x1a0>
  }
  /* Check if overrun occurs during regular conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d113      	bne.n	80044d8 <HAL_SDADC_IRQHandler+0x164>
          ((tmp_isr & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 0310 	and.w	r3, r3, #16
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00e      	beq.n	80044d8 <HAL_SDADC_IRQHandler+0x164>
  {
    /* Set CLRROVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0210 	orr.w	r2, r2, #16
 80044c8:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f842 	bl	800455a <HAL_SDADC_ErrorCallback>
 80044d6:	e01d      	b.n	8004514 <HAL_SDADC_IRQHandler+0x1a0>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  }
  /* Check if overrun occurs during injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d117      	bne.n	8004516 <HAL_SDADC_IRQHandler+0x1a2>
          ((tmp_isr & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0304 	and.w	r3, r3, #4
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d012      	beq.n	8004516 <HAL_SDADC_IRQHandler+0x1a2>
  {
    /* Set CLRJOVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0204 	orr.w	r2, r2, #4
 80044fe:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f827 	bl	800455a <HAL_SDADC_ErrorCallback>
  else
  {
    /* No additional IRQ source */
  }
  
  return;
 800450c:	e002      	b.n	8004514 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800450e:	bf00      	nop
 8004510:	e000      	b.n	8004514 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8004512:	bf00      	nop
  return;
 8004514:	bf00      	nop
 8004516:	bf00      	nop
}
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_SDADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_CalibrationCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_CalibrationCpltCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_SDADC_ConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ConvHalfCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_SDADC_InjectedConvCpltCallback>:
            using HAL_SDADC_InjectedGetValue or HAL_SDADC_InjectedMultiModeGetValue.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_InjectedConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_InjectedConvCpltCallback could be implemented in the user file.
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <SDADC_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void SDADC_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  /* Get SDADC handle */
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
  hsdadc->ConvHalfCpltCallback(hsdadc);
#else
  HAL_SDADC_ConvHalfCpltCallback(hsdadc);
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff ffd8 	bl	8004532 <HAL_SDADC_ConvHalfCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <SDADC_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void SDADC_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  /* Get SDADC handle */
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
  hsdadc->ConvCpltCallback(hsdadc);
#else
  HAL_SDADC_ConvCpltCallback(hsdadc);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7fd f819 	bl	80015d0 <HAL_SDADC_ConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <SDADC_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void SDADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  /* Get SDADC handle */
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hsdadc->ErrorCode = SDADC_ERROR_DMA;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2203      	movs	r2, #3
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
  hsdadc->ErrorCallback(hsdadc);
#else
  HAL_SDADC_ErrorCallback(hsdadc);
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f7ff ffcd 	bl	800455a <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80045de:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 80045e0:	f7fd f9a6 	bl	8001930 <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 80045e6:	e008      	b.n	80045fa <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 80045e8:	f7fd f9a2 	bl	8001930 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2bc8      	cmp	r3, #200	; 0xc8
 80045f4:	d901      	bls.n	80045fa <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e005      	b.n	8004606 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	daf1      	bge.n	80045e8 <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004624:	601a      	str	r2, [r3, #0]
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	2b00      	cmp	r3, #0
 8004644:	d108      	bne.n	8004658 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	e017      	b.n	8004688 <SDADC_RegConvStart+0x56>
  }
  else /* synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ffb5 	bl	80045c8 <SDADC_EnterInitMode>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d006      	beq.n	8004672 <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	22ff      	movs	r2, #255	; 0xff
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	e00a      	b.n	8004688 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004680:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff ffc3 	bl	800460e <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <SDADC_RegConvStart+0x6a>
 8004698:	2203      	movs	r2, #3
 800469a:	e000      	b.n	800469e <SDADC_RegConvStart+0x6c>
 800469c:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e01d      	b.n	80046fc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fc fe2b 	bl	8001330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f000 fa01 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e01d      	b.n	8004752 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f815 	bl	800475a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f000 f9d6 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2201      	movs	r2, #1
 8004780:	6839      	ldr	r1, [r7, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fc43 	bl	800500e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a17      	ldr	r2, [pc, #92]	; (80047ec <HAL_TIM_PWM_Start+0x7c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d009      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x36>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <HAL_TIM_PWM_Start+0x80>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x36>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <HAL_TIM_PWM_Start+0x84>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <HAL_TIM_PWM_Start+0x3a>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <HAL_TIM_PWM_Start+0x3c>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b06      	cmp	r3, #6
 80047d0:	d007      	beq.n	80047e2 <HAL_TIM_PWM_Start+0x72>
  {
    __HAL_TIM_ENABLE(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40014400 	.word	0x40014400
 80047f4:	40014800 	.word	0x40014800

080047f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800480e:	2302      	movs	r3, #2
 8004810:	e0b4      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b0c      	cmp	r3, #12
 8004826:	f200 809f 	bhi.w	8004968 <HAL_TIM_PWM_ConfigChannel+0x170>
 800482a:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	08004865 	.word	0x08004865
 8004834:	08004969 	.word	0x08004969
 8004838:	08004969 	.word	0x08004969
 800483c:	08004969 	.word	0x08004969
 8004840:	080048a5 	.word	0x080048a5
 8004844:	08004969 	.word	0x08004969
 8004848:	08004969 	.word	0x08004969
 800484c:	08004969 	.word	0x08004969
 8004850:	080048e7 	.word	0x080048e7
 8004854:	08004969 	.word	0x08004969
 8004858:	08004969 	.word	0x08004969
 800485c:	08004969 	.word	0x08004969
 8004860:	08004927 	.word	0x08004927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f9dc 	bl	8004c28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0208 	orr.w	r2, r2, #8
 800487e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0204 	bic.w	r2, r2, #4
 800488e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6999      	ldr	r1, [r3, #24]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	619a      	str	r2, [r3, #24]
      break;
 80048a2:	e062      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fa36 	bl	8004d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6999      	ldr	r1, [r3, #24]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	619a      	str	r2, [r3, #24]
      break;
 80048e4:	e041      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fa77 	bl	8004de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0208 	orr.w	r2, r2, #8
 8004900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0204 	bic.w	r2, r2, #4
 8004910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69d9      	ldr	r1, [r3, #28]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	61da      	str	r2, [r3, #28]
      break;
 8004924:	e021      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fa95 	bl	8004e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69d9      	ldr	r1, [r3, #28]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	021a      	lsls	r2, r3, #8
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	61da      	str	r2, [r3, #28]
      break;
 8004966:	e000      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004968:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_TIM_ConfigClockSource+0x18>
 8004998:	2302      	movs	r3, #2
 800499a:	e0a6      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x166>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d067      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0x120>
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d80b      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x6c>
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d073      	beq.n	8004ac4 <HAL_TIM_ConfigClockSource+0x140>
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d802      	bhi.n	80049e6 <HAL_TIM_ConfigClockSource+0x62>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d06f      	beq.n	8004ac4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80049e4:	e078      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d06c      	beq.n	8004ac4 <HAL_TIM_ConfigClockSource+0x140>
 80049ea:	2b30      	cmp	r3, #48	; 0x30
 80049ec:	d06a      	beq.n	8004ac4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80049ee:	e073      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049f0:	2b70      	cmp	r3, #112	; 0x70
 80049f2:	d00d      	beq.n	8004a10 <HAL_TIM_ConfigClockSource+0x8c>
 80049f4:	2b70      	cmp	r3, #112	; 0x70
 80049f6:	d804      	bhi.n	8004a02 <HAL_TIM_ConfigClockSource+0x7e>
 80049f8:	2b50      	cmp	r3, #80	; 0x50
 80049fa:	d033      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0xe0>
 80049fc:	2b60      	cmp	r3, #96	; 0x60
 80049fe:	d041      	beq.n	8004a84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004a00:	e06a      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a06:	d066      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x152>
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0c:	d017      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004a0e:	e063      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6899      	ldr	r1, [r3, #8]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f000 fad5 	bl	8004fce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	609a      	str	r2, [r3, #8]
      break;
 8004a3c:	e04c      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6899      	ldr	r1, [r3, #8]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f000 fabe 	bl	8004fce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a60:	609a      	str	r2, [r3, #8]
      break;
 8004a62:	e039      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	461a      	mov	r2, r3
 8004a72:	f000 fa32 	bl	8004eda <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2150      	movs	r1, #80	; 0x50
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fa8b 	bl	8004f98 <TIM_ITRx_SetConfig>
      break;
 8004a82:	e029      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	461a      	mov	r2, r3
 8004a92:	f000 fa51 	bl	8004f38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2160      	movs	r1, #96	; 0x60
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fa7b 	bl	8004f98 <TIM_ITRx_SetConfig>
      break;
 8004aa2:	e019      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f000 fa12 	bl	8004eda <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2140      	movs	r1, #64	; 0x40
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fa6b 	bl	8004f98 <TIM_ITRx_SetConfig>
      break;
 8004ac2:	e009      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f000 fa62 	bl	8004f98 <TIM_ITRx_SetConfig>
      break;
 8004ad4:	e000      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ad6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0a:	d00f      	beq.n	8004b2c <TIM_Base_SetConfig+0x38>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a3c      	ldr	r2, [pc, #240]	; (8004c00 <TIM_Base_SetConfig+0x10c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <TIM_Base_SetConfig+0x38>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a3b      	ldr	r2, [pc, #236]	; (8004c04 <TIM_Base_SetConfig+0x110>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <TIM_Base_SetConfig+0x38>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a3a      	ldr	r2, [pc, #232]	; (8004c08 <TIM_Base_SetConfig+0x114>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_Base_SetConfig+0x38>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a39      	ldr	r2, [pc, #228]	; (8004c0c <TIM_Base_SetConfig+0x118>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d108      	bne.n	8004b3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d027      	beq.n	8004b96 <TIM_Base_SetConfig+0xa2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a2d      	ldr	r2, [pc, #180]	; (8004c00 <TIM_Base_SetConfig+0x10c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d023      	beq.n	8004b96 <TIM_Base_SetConfig+0xa2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a2c      	ldr	r2, [pc, #176]	; (8004c04 <TIM_Base_SetConfig+0x110>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d01f      	beq.n	8004b96 <TIM_Base_SetConfig+0xa2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a2b      	ldr	r2, [pc, #172]	; (8004c08 <TIM_Base_SetConfig+0x114>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01b      	beq.n	8004b96 <TIM_Base_SetConfig+0xa2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a2b      	ldr	r2, [pc, #172]	; (8004c10 <TIM_Base_SetConfig+0x11c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d017      	beq.n	8004b96 <TIM_Base_SetConfig+0xa2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a2a      	ldr	r2, [pc, #168]	; (8004c14 <TIM_Base_SetConfig+0x120>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <TIM_Base_SetConfig+0xa2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a29      	ldr	r2, [pc, #164]	; (8004c18 <TIM_Base_SetConfig+0x124>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00f      	beq.n	8004b96 <TIM_Base_SetConfig+0xa2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a28      	ldr	r2, [pc, #160]	; (8004c1c <TIM_Base_SetConfig+0x128>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00b      	beq.n	8004b96 <TIM_Base_SetConfig+0xa2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a27      	ldr	r2, [pc, #156]	; (8004c20 <TIM_Base_SetConfig+0x12c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d007      	beq.n	8004b96 <TIM_Base_SetConfig+0xa2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a26      	ldr	r2, [pc, #152]	; (8004c24 <TIM_Base_SetConfig+0x130>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_Base_SetConfig+0xa2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <TIM_Base_SetConfig+0x118>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d108      	bne.n	8004ba8 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <TIM_Base_SetConfig+0x128>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_Base_SetConfig+0xf0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <TIM_Base_SetConfig+0x12c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_Base_SetConfig+0xf0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a11      	ldr	r2, [pc, #68]	; (8004c24 <TIM_Base_SetConfig+0x130>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d103      	bne.n	8004bec <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	615a      	str	r2, [r3, #20]
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40000400 	.word	0x40000400
 8004c04:	40000800 	.word	0x40000800
 8004c08:	40000c00 	.word	0x40000c00
 8004c0c:	40015c00 	.word	0x40015c00
 8004c10:	40001800 	.word	0x40001800
 8004c14:	40001c00 	.word	0x40001c00
 8004c18:	40002000 	.word	0x40002000
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	40014800 	.word	0x40014800

08004c28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f023 0201 	bic.w	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f023 0302 	bic.w	r3, r3, #2
 8004c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a24      	ldr	r2, [pc, #144]	; (8004d10 <TIM_OC1_SetConfig+0xe8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d007      	beq.n	8004c94 <TIM_OC1_SetConfig+0x6c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a23      	ldr	r2, [pc, #140]	; (8004d14 <TIM_OC1_SetConfig+0xec>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_OC1_SetConfig+0x6c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <TIM_OC1_SetConfig+0xf0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d10c      	bne.n	8004cae <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0308 	bic.w	r3, r3, #8
 8004c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f023 0304 	bic.w	r3, r3, #4
 8004cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <TIM_OC1_SetConfig+0xe8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d007      	beq.n	8004cc6 <TIM_OC1_SetConfig+0x9e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <TIM_OC1_SetConfig+0xec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_OC1_SetConfig+0x9e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a15      	ldr	r2, [pc, #84]	; (8004d18 <TIM_OC1_SetConfig+0xf0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d111      	bne.n	8004cea <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	621a      	str	r2, [r3, #32]
}
 8004d04:	bf00      	nop
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800

08004d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f023 0210 	bic.w	r2, r3, #16
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f023 0320 	bic.w	r3, r3, #32
 8004d66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a17      	ldr	r2, [pc, #92]	; (8004dd4 <TIM_OC2_SetConfig+0xb8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d007      	beq.n	8004d8c <TIM_OC2_SetConfig+0x70>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <TIM_OC2_SetConfig+0xbc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_OC2_SetConfig+0x70>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a15      	ldr	r2, [pc, #84]	; (8004ddc <TIM_OC2_SetConfig+0xc0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d10f      	bne.n	8004dac <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d92:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40014400 	.word	0x40014400
 8004ddc:	40014800 	.word	0x40014800

08004de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0303 	bic.w	r3, r3, #3
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	621a      	str	r2, [r3, #32]
}
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b087      	sub	sp, #28
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f023 0201 	bic.w	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 030a 	bic.w	r3, r3, #10
 8004f16:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f023 0210 	bic.w	r2, r3, #16
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	031b      	lsls	r3, r3, #12
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	621a      	str	r2, [r3, #32]
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f043 0307 	orr.w	r3, r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	609a      	str	r2, [r3, #8]
}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b087      	sub	sp, #28
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	021a      	lsls	r2, r3, #8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	609a      	str	r2, [r3, #8]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800500e:	b480      	push	{r7}
 8005010:	b087      	sub	sp, #28
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	2201      	movs	r2, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	43db      	mvns	r3, r3
 8005030:	401a      	ands	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1a      	ldr	r2, [r3, #32]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	fa01 f303 	lsl.w	r3, r1, r3
 8005046:	431a      	orrs	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	621a      	str	r2, [r3, #32]
}
 800504c:	bf00      	nop
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800506c:	2302      	movs	r3, #2
 800506e:	e055      	b.n	800511c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d01d      	beq.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d018      	beq.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1a      	ldr	r2, [pc, #104]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d013      	beq.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a18      	ldr	r2, [pc, #96]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00e      	beq.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a17      	ldr	r2, [pc, #92]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a15      	ldr	r2, [pc, #84]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d004      	beq.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a14      	ldr	r2, [pc, #80]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d10c      	bne.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40001800 	.word	0x40001800
 8005138:	40014000 	.word	0x40014000
 800513c:	40015c00 	.word	0x40015c00

08005140 <__libc_init_array>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4e0d      	ldr	r6, [pc, #52]	; (8005178 <__libc_init_array+0x38>)
 8005144:	4c0d      	ldr	r4, [pc, #52]	; (800517c <__libc_init_array+0x3c>)
 8005146:	1ba4      	subs	r4, r4, r6
 8005148:	10a4      	asrs	r4, r4, #2
 800514a:	2500      	movs	r5, #0
 800514c:	42a5      	cmp	r5, r4
 800514e:	d109      	bne.n	8005164 <__libc_init_array+0x24>
 8005150:	4e0b      	ldr	r6, [pc, #44]	; (8005180 <__libc_init_array+0x40>)
 8005152:	4c0c      	ldr	r4, [pc, #48]	; (8005184 <__libc_init_array+0x44>)
 8005154:	f000 f820 	bl	8005198 <_init>
 8005158:	1ba4      	subs	r4, r4, r6
 800515a:	10a4      	asrs	r4, r4, #2
 800515c:	2500      	movs	r5, #0
 800515e:	42a5      	cmp	r5, r4
 8005160:	d105      	bne.n	800516e <__libc_init_array+0x2e>
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005168:	4798      	blx	r3
 800516a:	3501      	adds	r5, #1
 800516c:	e7ee      	b.n	800514c <__libc_init_array+0xc>
 800516e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005172:	4798      	blx	r3
 8005174:	3501      	adds	r5, #1
 8005176:	e7f2      	b.n	800515e <__libc_init_array+0x1e>
 8005178:	080051e0 	.word	0x080051e0
 800517c:	080051e0 	.word	0x080051e0
 8005180:	080051e0 	.word	0x080051e0
 8005184:	080051e4 	.word	0x080051e4

08005188 <memset>:
 8005188:	4402      	add	r2, r0
 800518a:	4603      	mov	r3, r0
 800518c:	4293      	cmp	r3, r2
 800518e:	d100      	bne.n	8005192 <memset+0xa>
 8005190:	4770      	bx	lr
 8005192:	f803 1b01 	strb.w	r1, [r3], #1
 8005196:	e7f9      	b.n	800518c <memset+0x4>

08005198 <_init>:
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519a:	bf00      	nop
 800519c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519e:	bc08      	pop	{r3}
 80051a0:	469e      	mov	lr, r3
 80051a2:	4770      	bx	lr

080051a4 <_fini>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	bf00      	nop
 80051a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051aa:	bc08      	pop	{r3}
 80051ac:	469e      	mov	lr, r3
 80051ae:	4770      	bx	lr
